
light-follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b8e0  0800b8e0  0001b8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd70  0800bd70  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd78  0800bd78  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd7c  0800bd7c  0001bd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800bd80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000214  0800bf94  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800bf94  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa10  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4a  00000000  00000000  0003fc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  000437a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00044b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c13f  00000000  00000000  00045db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a81  00000000  00000000  00071eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b0f6  00000000  00000000  0008b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00196a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006598  00000000  00000000  00196b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8c8 	.word	0x0800b8c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800b8c8 	.word	0x0800b8c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <PID_init>:
	 * @brief Initialize PID instance
	 * @param[in] *PID PID instance to initialize
	 * @return None
	 */
void PID_init(arm_pid_instance_f32 *PID)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	PID->Kd=KD/Tp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
	PID->Ki=KI*Tp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <PID_init+0x2c>)
 8000eb4:	61da      	str	r2, [r3, #28]
	PID->Kp=KP;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <PID_init+0x30>)
 8000eba:	619a      	str	r2, [r3, #24]
	arm_pid_init_f32(PID, 0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f007 f94c 	bl	800815c <arm_pid_init_f32>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	3b449ba6 	.word	0x3b449ba6
 8000ed0:	3f666666 	.word	0x3f666666

08000ed4 <Regulation>:
 * @param[in] *PID PID instance
 * @param[in] e error value
 * @return control signal value
 */
int Regulation(arm_pid_instance_f32 *PID,uint16_t e)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
	float static u;
	if(abs(e)>50)
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	2b32      	cmp	r3, #50	; 0x32
 8000ee4:	d951      	bls.n	8000f8a <Regulation+0xb6>
	{
	u=arm_pid_f32(PID,e);
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	ed93 7a00 	vldr	s14, [r3]
 8000efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f02:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000f16:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f38:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <Regulation+0xd8>)
 8000f54:	6013      	str	r3, [r2, #0]
	if(u<-500)u=-500;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <Regulation+0xd8>)
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000fb0 <Regulation+0xdc>
 8000f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f68:	d502      	bpl.n	8000f70 <Regulation+0x9c>
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <Regulation+0xd8>)
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <Regulation+0xe0>)
 8000f6e:	601a      	str	r2, [r3, #0]
	if(u>500)u=500;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <Regulation+0xd8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fb8 <Regulation+0xe4>
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd02      	ble.n	8000f8a <Regulation+0xb6>
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <Regulation+0xd8>)
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <Regulation+0xe8>)
 8000f88:	601a      	str	r2, [r3, #0]
	}
	return u+1500;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <Regulation+0xd8>)
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fc0 <Regulation+0xec>
 8000f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20000230 	.word	0x20000230
 8000fb0:	c3fa0000 	.word	0xc3fa0000
 8000fb4:	c3fa0000 	.word	0xc3fa0000
 8000fb8:	43fa0000 	.word	0x43fa0000
 8000fbc:	43fa0000 	.word	0x43fa0000
 8000fc0:	44bb8000 	.word	0x44bb8000

08000fc4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <MX_ADC2_Init+0xd8>)
 8000fdc:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <MX_ADC2_Init+0xdc>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_ADC2_Init+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <MX_ADC2_Init+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_ADC2_Init+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <MX_ADC2_Init+0xd8>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_ADC2_Init+0xd8>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <MX_ADC2_Init+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_ADC2_Init+0xd8>)
 8001006:	2200      	movs	r2, #0
 8001008:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_ADC2_Init+0xd8>)
 800100c:	2202      	movs	r2, #2
 800100e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_ADC2_Init+0xd8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_ADC2_Init+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_ADC2_Init+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_ADC2_Init+0xd8>)
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_ADC2_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_ADC2_Init+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800103a:	4818      	ldr	r0, [pc, #96]	; (800109c <MX_ADC2_Init+0xd8>)
 800103c:	f001 fb02 	bl	8002644 <HAL_ADC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001046:	f000 fc2e 	bl	80018a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC2_Init+0xe0>)
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104e:	2306      	movs	r3, #6
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001056:	237f      	movs	r3, #127	; 0x7f
 8001058:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800105a:	2304      	movs	r3, #4
 800105c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_ADC2_Init+0xd8>)
 8001068:	f001 fd1c 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001072:	f000 fc18 	bl	80018a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_ADC2_Init+0xe4>)
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107a:	230c      	movs	r3, #12
 800107c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_ADC2_Init+0xd8>)
 8001084:	f001 fd0e 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800108e:	f000 fc0a 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000248 	.word	0x20000248
 80010a0:	50040100 	.word	0x50040100
 80010a4:	04300002 	.word	0x04300002
 80010a8:	08600004 	.word	0x08600004

080010ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ac      	sub	sp, #176	; 0xb0
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2288      	movs	r2, #136	; 0x88
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 f891 	bl	80081f4 <memset>
  if(adcHandle->Instance==ADC2)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <HAL_ADC_MspInit+0x11c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d171      	bne.n	80011c0 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010f2:	2308      	movs	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fd61 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001118:	f000 fbc5 	bl	80018a6 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_ADC_MspInit+0x120>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	4a2a      	ldr	r2, [pc, #168]	; (80011cc <HAL_ADC_MspInit+0x120>)
 8001122:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_ADC_MspInit+0x120>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_ADC_MspInit+0x120>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <HAL_ADC_MspInit+0x120>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_ADC_MspInit+0x120>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN1
    PC1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001162:	4619      	mov	r1, r3
 8001164:	481a      	ldr	r0, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x124>)
 8001166:	f002 fd0b 	bl	8003b80 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 800116c:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <HAL_ADC_MspInit+0x12c>)
 800116e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 800118a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 8001192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001196:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 800119a:	2220      	movs	r2, #32
 800119c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 80011a6:	f002 fa75 	bl	8003694 <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80011b0:	f000 fb79 	bl	80018a6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 80011b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ba:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_ADC_MspInit+0x128>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37b0      	adds	r7, #176	; 0xb0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	50040100 	.word	0x50040100
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800
 80011d4:	200002ac 	.word	0x200002ac
 80011d8:	4002001c 	.word	0x4002001c

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_DMA_Init+0x38>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <MX_DMA_Init+0x38>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6493      	str	r3, [r2, #72]	; 0x48
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_DMA_Init+0x38>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	200c      	movs	r0, #12
 8001200:	f002 fa11 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001204:	200c      	movs	r0, #12
 8001206:	f002 fa2a 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <MX_GPIO_Init+0x148>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <MX_GPIO_Init+0x148>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b49      	ldr	r3, [pc, #292]	; (8001360 <MX_GPIO_Init+0x148>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <MX_GPIO_Init+0x148>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a45      	ldr	r2, [pc, #276]	; (8001360 <MX_GPIO_Init+0x148>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b43      	ldr	r3, [pc, #268]	; (8001360 <MX_GPIO_Init+0x148>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b40      	ldr	r3, [pc, #256]	; (8001360 <MX_GPIO_Init+0x148>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <MX_GPIO_Init+0x148>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <MX_GPIO_Init+0x148>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <MX_GPIO_Init+0x148>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a39      	ldr	r2, [pc, #228]	; (8001360 <MX_GPIO_Init+0x148>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <MX_GPIO_Init+0x148>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f002 fe1c 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80012a2:	4830      	ldr	r0, [pc, #192]	; (8001364 <MX_GPIO_Init+0x14c>)
 80012a4:	f002 fe16 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	482e      	ldr	r0, [pc, #184]	; (8001368 <MX_GPIO_Init+0x150>)
 80012ae:	f002 fe11 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4827      	ldr	r0, [pc, #156]	; (8001368 <MX_GPIO_Init+0x150>)
 80012ca:	f002 fc59 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_D7_Pin|LCD_RS_Pin;
 80012ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f002 fc49 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80012ee:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <MX_GPIO_Init+0x14c>)
 8001308:	f002 fc3a 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_GPIO_Init+0x150>)
 8001324:	f002 fc2c 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Left_Pin|Down_Pin|Right_Pin;
 8001328:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f002 fc1d 	bl	8003b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f002 f96b 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001350:	2028      	movs	r0, #40	; 0x28
 8001352:	f002 f984 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800

0800136c <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6898      	ldr	r0, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	899b      	ldrh	r3, [r3, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	f002 fda6 	bl	8003ed4 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7d9b      	ldrb	r3, [r3, #22]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d115      	bne.n	80013bc <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2204      	movs	r2, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f842 	bl	800142c <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2204      	movs	r2, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f839 	bl	800142c <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 80013ba:	e005      	b.n	80013c8 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2208      	movs	r2, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f832 	bl	800142c <lcd_write>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6898      	ldr	r0, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	899b      	ldrh	r3, [r3, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 fd74 	bl	8003ed4 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7d9b      	ldrb	r3, [r3, #22]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2204      	movs	r2, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f814 	bl	800142c <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2204      	movs	r2, #4
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f80b 	bl	800142c <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001416:	e005      	b.n	8001424 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	2208      	movs	r2, #8
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f804 	bl	800142c <lcd_write>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
 8001438:	4613      	mov	r3, r2
 800143a:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6918      	ldr	r0, [r3, #16]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	8a9b      	ldrh	r3, [r3, #20]
 8001444:	2201      	movs	r2, #1
 8001446:	4619      	mov	r1, r3
 8001448:	f002 fd44 	bl	8003ed4 <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e019      	b.n	8001486 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	8819      	ldrh	r1, [r3, #0]
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	fa42 f303 	asr.w	r3, r2, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	f002 fd2a 	bl	8003ed4 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3301      	adds	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	78bb      	ldrb	r3, [r7, #2]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3e1      	bcc.n	8001452 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6918      	ldr	r0, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8a9b      	ldrh	r3, [r3, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	f002 fd1b 	bl	8003ed4 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 800149e:	2132      	movs	r1, #50	; 0x32
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f804 	bl	80014ae <lcd_delay_us>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 f898 	bl	80055fc <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 80014cc:	bf00      	nop
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f8      	bhi.n	80014ce <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 f8f3 	bl	80056cc <HAL_TIM_Base_Stop>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None 
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 80014fc:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ffd4 	bl	80014ae <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7d9b      	ldrb	r3, [r3, #22]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d120      	bne.n	8001550 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 800150e:	2103      	movs	r1, #3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff2b 	bl	800136c <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001516:	f241 0167 	movw	r1, #4199	; 0x1067
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffc7 	bl	80014ae <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001520:	2103      	movs	r1, #3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff22 	bl	800136c <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001528:	21c8      	movs	r1, #200	; 0xc8
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffbf 	bl	80014ae <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001530:	2103      	movs	r1, #3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff1a 	bl	800136c <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001538:	2102      	movs	r1, #2
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ff16 	bl	800136c <lcd_write_command>

    hlcd->IsInitialized = 1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8001546:	2128      	movs	r1, #40	; 0x28
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff0f 	bl	800136c <lcd_write_command>
 800154e:	e01f      	b.n	8001590 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7d9b      	ldrb	r3, [r3, #22]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d11b      	bne.n	8001590 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001558:	2130      	movs	r1, #48	; 0x30
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff06 	bl	800136c <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001560:	f241 0167 	movw	r1, #4199	; 0x1067
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffa2 	bl	80014ae <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800156a:	2130      	movs	r1, #48	; 0x30
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fefd 	bl	800136c <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001572:	21c8      	movs	r1, #200	; 0xc8
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff9a 	bl	80014ae <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800157a:	2130      	movs	r1, #48	; 0x30
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fef5 	bl	800136c <lcd_write_command>

	hlcd->IsInitialized = 1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8001588:	2138      	movs	r1, #56	; 0x38
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff feee 	bl	800136c <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001590:	2101      	movs	r1, #1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff feea 	bl	800136c <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8001598:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff86 	bl	80014ae <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 80015a2:	210c      	movs	r1, #12
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fee1 	bl	800136c <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 80015aa:	2106      	movs	r1, #6
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fedd 	bl	800136c <lcd_write_command>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None 
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 80015ba:	b590      	push	{r4, r7, lr}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e00a      	b.n	80015e0 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fefb 	bl	80013d0 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfc      	ldrb	r4, [r7, #15]
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f7fe fdf4 	bl	80001d0 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	429c      	cmp	r4, r3
 80015ec:	d3ed      	bcc.n	80015ca <LCD_printStr+0x10>
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None 
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
 8001604:	4613      	mov	r3, r2
 8001606:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	4a07      	ldr	r2, [pc, #28]	; (8001628 <LCD_SetCursor+0x30>)
 800160c:	5cd2      	ldrb	r2, [r2, r3]
 800160e:	78bb      	ldrb	r3, [r7, #2]
 8001610:	4413      	add	r3, r2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	3b80      	subs	r3, #128	; 0x80
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fea6 	bl	800136c <lcd_write_command>
  #endif
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800b928 	.word	0x0800b928

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f000 fd92 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f83e 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f7ff fdee 	bl	8001218 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800163c:	f000 fcce 	bl	8001fdc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001640:	f000 fb5a 	bl	8001cf8 <MX_TIM2_Init>
  MX_DMA_Init();
 8001644:	f7ff fdca 	bl	80011dc <MX_DMA_Init>
  MX_TIM3_Init();
 8001648:	f000 fba4 	bl	8001d94 <MX_TIM3_Init>
  MX_ADC2_Init();
 800164c:	f7ff fcba 	bl	8000fc4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <main+0x70>)
 8001652:	f004 f863 	bl	800571c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)UartMsg, strlen("LED1=100"));
 8001656:	2208      	movs	r2, #8
 8001658:	4911      	ldr	r1, [pc, #68]	; (80016a0 <main+0x74>)
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <main+0x78>)
 800165c:	f005 fb14 	bl	8006c88 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3,1);
 8001660:	2101      	movs	r1, #1
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <main+0x7c>)
 8001664:	f004 f92c 	bl	80058c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,2);
 8001668:	2102      	movs	r1, #2
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <main+0x7c>)
 800166c:	f004 f928 	bl	80058c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,3);
 8001670:	2103      	movs	r1, #3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <main+0x7c>)
 8001674:	f004 f924 	bl	80058c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,4);
 8001678:	2104      	movs	r1, #4
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <main+0x7c>)
 800167c:	f004 f920 	bl	80058c0 <HAL_TIM_PWM_Start>
  LCD_Init(&hlcd1);
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <main+0x80>)
 8001682:	f7ff ff34 	bl	80014ee <LCD_Init>
  PID_init(&PID);
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <main+0x84>)
 8001688:	f7ff fc0a 	bl	8000ea0 <PID_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  menuDispRoutine();
 800168c:	f000 f92e 	bl	80018ec <menuDispRoutine>
	  HAL_Delay(1000);
 8001690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001694:	f000 fddc 	bl	8002250 <HAL_Delay>
	  menuDispRoutine();
 8001698:	e7f8      	b.n	800168c <main+0x60>
 800169a:	bf00      	nop
 800169c:	20000378 	.word	0x20000378
 80016a0:	20000320 	.word	0x20000320
 80016a4:	200003c4 	.word	0x200003c4
 80016a8:	2000032c 	.word	0x2000032c
 80016ac:	20000018 	.word	0x20000018
 80016b0:	200002f4 	.word	0x200002f4

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b096      	sub	sp, #88	; 0x58
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	2244      	movs	r2, #68	; 0x44
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 fd96 	bl	80081f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016da:	f002 fc39 	bl	8003f50 <HAL_PWREx_ControlVoltageScaling>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016e4:	f000 f8df 	bl	80018a6 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e8:	2302      	movs	r3, #2
 80016ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f2:	2310      	movs	r3, #16
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f6:	2302      	movs	r3, #2
 80016f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016fa:	2302      	movs	r3, #2
 80016fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001702:	230a      	movs	r3, #10
 8001704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001706:	2307      	movs	r3, #7
 8001708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800170a:	2302      	movs	r3, #2
 800170c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800170e:	2302      	movs	r3, #2
 8001710:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fc70 	bl	8003ffc <HAL_RCC_OscConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001722:	f000 f8c0 	bl	80018a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001726:	230f      	movs	r3, #15
 8001728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172a:	2303      	movs	r3, #3
 800172c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	2104      	movs	r1, #4
 800173e:	4618      	mov	r0, r3
 8001740:	f003 f842 	bl	80047c8 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800174a:	f000 f8ac 	bl	80018a6 <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3758      	adds	r7, #88	; 0x58
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b092      	sub	sp, #72	; 0x48
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d12f      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x72>
	{

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)AdcCon,2);
 800176a:	2202      	movs	r2, #2
 800176c:	4919      	ldr	r1, [pc, #100]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800176e:	481a      	ldr	r0, [pc, #104]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001770:	f001 f8be 	bl	80028f0 <HAL_ADC_Start_DMA>
	int e=AdcCon[1]-AdcCon[0];
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001776:	885b      	ldrh	r3, [r3, #2]
 8001778:	b29b      	uxth	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	647b      	str	r3, [r7, #68]	; 0x44
	static int Sendcounter=0;
	if(Sendcounter==0)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x56>
	{
	char buffer[50];
	int n;
	n=sprintf(buffer,"ADC %d\r\n",e);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001794:	4912      	ldr	r1, [pc, #72]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001796:	4618      	mov	r0, r3
 8001798:	f007 f99e 	bl	8008ad8 <siprintf>
 800179c:	6438      	str	r0, [r7, #64]	; 0x40
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, n, 10);
 800179e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	f107 0108 	add.w	r1, r7, #8
 80017a6:	230a      	movs	r3, #10
 80017a8:	480e      	ldr	r0, [pc, #56]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017aa:	f005 f9d9 	bl	8006b60 <HAL_UART_Transmit>
	}
	int u=Regulation(&PID, e);
 80017ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017b6:	f7ff fb8d 	bl	8000ed4 <Regulation>
 80017ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,u);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
	Sendcounter=(Sendcounter+1)%1;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
	}

}
 80017ca:	bf00      	nop
 80017cc:	3748      	adds	r7, #72	; 0x48
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000318 	.word	0x20000318
 80017d8:	20000248 	.word	0x20000248
 80017dc:	20000234 	.word	0x20000234
 80017e0:	0800b8e0 	.word	0x0800b8e0
 80017e4:	200003c4 	.word	0x200003c4
 80017e8:	200002f4 	.word	0x200002f4
 80017ec:	2000032c 	.word	0x2000032c

080017f0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	int LEDnr;
	char LEDduty[3];
	sscanf((char*)UartMsg,"LED%d=%s\n",&LEDnr,LEDduty);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	f107 0210 	add.w	r2, r7, #16
 8001800:	491d      	ldr	r1, [pc, #116]	; (8001878 <HAL_UART_RxCpltCallback+0x88>)
 8001802:	481e      	ldr	r0, [pc, #120]	; (800187c <HAL_UART_RxCpltCallback+0x8c>)
 8001804:	f007 f988 	bl	8008b18 <siscanf>
	int Pulse=atoi(LEDduty)*20000.0f/100.0f;
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fcc3 	bl	8008198 <atoi>
 8001812:	ee07 0a90 	vmov	s15, r0
 8001816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001880 <HAL_UART_RxCpltCallback+0x90>
 800181e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001822:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001884 <HAL_UART_RxCpltCallback+0x94>
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	617b      	str	r3, [r7, #20]
	switch(LEDnr)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d010      	beq.n	800185c <HAL_UART_RxCpltCallback+0x6c>
 800183a:	2b03      	cmp	r3, #3
 800183c:	dc13      	bgt.n	8001866 <HAL_UART_RxCpltCallback+0x76>
 800183e:	2b01      	cmp	r3, #1
 8001840:	d002      	beq.n	8001848 <HAL_UART_RxCpltCallback+0x58>
 8001842:	2b02      	cmp	r3, #2
 8001844:	d005      	beq.n	8001852 <HAL_UART_RxCpltCallback+0x62>
 8001846:	e00e      	b.n	8001866 <HAL_UART_RxCpltCallback+0x76>
	{
	case 1:__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Pulse);break;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_UART_RxCpltCallback+0x98>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
 8001850:	e009      	b.n	8001866 <HAL_UART_RxCpltCallback+0x76>
	case 2:__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,Pulse);break;
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_UART_RxCpltCallback+0x98>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c
 800185a:	e004      	b.n	8001866 <HAL_UART_RxCpltCallback+0x76>
	case 3:__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,Pulse);break;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_UART_RxCpltCallback+0x98>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
 8001864:	bf00      	nop
	}
HAL_UART_Receive_IT(&huart2, (uint8_t*)UartMsg, strlen("LED1=100"));
 8001866:	2208      	movs	r2, #8
 8001868:	4904      	ldr	r1, [pc, #16]	; (800187c <HAL_UART_RxCpltCallback+0x8c>)
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <HAL_UART_RxCpltCallback+0x9c>)
 800186c:	f005 fa0c 	bl	8006c88 <HAL_UART_Receive_IT>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0800b8ec 	.word	0x0800b8ec
 800187c:	20000320 	.word	0x20000320
 8001880:	469c4000 	.word	0x469c4000
 8001884:	42c80000 	.word	0x42c80000
 8001888:	2000032c 	.word	0x2000032c
 800188c:	200003c4 	.word	0x200003c4

08001890 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
	void menubuttons(uint16_t GPIO_Pin);
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018aa:	b672      	cpsid	i
}
 80018ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ae:	e7fe      	b.n	80018ae <Error_Handler+0x8>

080018b0 <add_spaces>:
 * @brief add spaces to string
 * @param[in] *dest pointer to a string to add too
 * @param[in] num_of_spaces number of spaces to add
 * @return none
 */
void add_spaces(char *dest, int num_of_spaces) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
    int len = strlen(dest);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fc88 	bl	80001d0 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]
    memset( dest+len, ' ', num_of_spaces );
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	2120      	movs	r1, #32
 80018ce:	4618      	mov	r0, r3
 80018d0:	f006 fc90 	bl	80081f4 <memset>
    dest[len + num_of_spaces] = '\0';
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <menuDispRoutine>:
/**
 * @brief Display things on LCD
 * @return none
 */
void menuDispRoutine()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	; 0x38
 80018f0:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
 80018f6:	e08c      	b.n	8001a12 <menuDispRoutine+0x126>
	{
		LCD_SetCursor(&hlcd1, i, 0);
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4848      	ldr	r0, [pc, #288]	; (8001a24 <menuDispRoutine+0x138>)
 8001902:	f7ff fe79 	bl	80015f8 <LCD_SetCursor>
		char buffer[17];
		int buf=(state+i)%(NR_OF_STATES);
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <menuDispRoutine+0x13c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	441a      	add	r2, r3
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <menuDispRoutine+0x140>)
 8001910:	fb83 3102 	smull	r3, r1, r3, r2
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
		switch(buf)
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	2b02      	cmp	r3, #2
 8001926:	d051      	beq.n	80019cc <menuDispRoutine+0xe0>
 8001928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192a:	2b02      	cmp	r3, #2
 800192c:	dc6e      	bgt.n	8001a0c <menuDispRoutine+0x120>
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <menuDispRoutine+0x50>
 8001934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001936:	2b01      	cmp	r3, #1
 8001938:	d028      	beq.n	800198c <menuDispRoutine+0xa0>
 800193a:	e067      	b.n	8001a0c <menuDispRoutine+0x120>
		{
			case 0:
			{
				int duty=100*__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1)/20000.0f;
 800193c:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <menuDispRoutine+0x144>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	2264      	movs	r2, #100	; 0x64
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001950:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001a34 <menuDispRoutine+0x148>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
 8001960:	61fb      	str	r3, [r7, #28]
				int n=sprintf(buffer,"LD1 DUTY %d",duty);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	4934      	ldr	r1, [pc, #208]	; (8001a38 <menuDispRoutine+0x14c>)
 8001968:	4618      	mov	r0, r3
 800196a:	f007 f8b5 	bl	8008ad8 <siprintf>
 800196e:	61b8      	str	r0, [r7, #24]
				add_spaces(buffer,16-n);
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f1c3 0210 	rsb	r2, r3, #16
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff98 	bl	80018b0 <add_spaces>
				LCD_printStr(&hlcd1,buffer);
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4827      	ldr	r0, [pc, #156]	; (8001a24 <menuDispRoutine+0x138>)
 8001986:	f7ff fe18 	bl	80015ba <LCD_printStr>
				break;
 800198a:	e03f      	b.n	8001a0c <menuDispRoutine+0x120>
			}
			case 1:
			{
				int duty=100*__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_3)/20000;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <menuDispRoutine+0x144>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001992:	2264      	movs	r2, #100	; 0x64
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <menuDispRoutine+0x150>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0b9b      	lsrs	r3, r3, #14
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
				int n=sprintf(buffer,"LD2 DUTY %d",duty);
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a6:	4926      	ldr	r1, [pc, #152]	; (8001a40 <menuDispRoutine+0x154>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 f895 	bl	8008ad8 <siprintf>
 80019ae:	6238      	str	r0, [r7, #32]
				add_spaces(buffer,16-n);
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f1c3 0210 	rsb	r2, r3, #16
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff78 	bl	80018b0 <add_spaces>
				LCD_printStr(&hlcd1,buffer);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4817      	ldr	r0, [pc, #92]	; (8001a24 <menuDispRoutine+0x138>)
 80019c6:	f7ff fdf8 	bl	80015ba <LCD_printStr>
				break;
 80019ca:	e01f      	b.n	8001a0c <menuDispRoutine+0x120>
			}
			case 2:
			{
				int duty=100*__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_4)/20000;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <menuDispRoutine+0x144>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2264      	movs	r2, #100	; 0x64
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <menuDispRoutine+0x150>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0b9b      	lsrs	r3, r3, #14
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
				int n=sprintf(buffer,"LD3 DUTY %d",duty);
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e6:	4917      	ldr	r1, [pc, #92]	; (8001a44 <menuDispRoutine+0x158>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f007 f875 	bl	8008ad8 <siprintf>
 80019ee:	62b8      	str	r0, [r7, #40]	; 0x28
				add_spaces(buffer,16-n);
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	f1c3 0210 	rsb	r2, r3, #16
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff58 	bl	80018b0 <add_spaces>
				LCD_printStr(&hlcd1,buffer);
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <menuDispRoutine+0x138>)
 8001a06:	f7ff fdd8 	bl	80015ba <LCD_printStr>
				break;
 8001a0a:	bf00      	nop
	for(int i=0;i<2;i++)
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	3301      	adds	r3, #1
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f77f af6f 	ble.w	80018f8 <menuDispRoutine+0xc>
			}

		}
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3738      	adds	r7, #56	; 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000018 	.word	0x20000018
 8001a28:	20000238 	.word	0x20000238
 8001a2c:	55555556 	.word	0x55555556
 8001a30:	2000032c 	.word	0x2000032c
 8001a34:	469c4000 	.word	0x469c4000
 8001a38:	0800b8f8 	.word	0x0800b8f8
 8001a3c:	d1b71759 	.word	0xd1b71759
 8001a40:	0800b904 	.word	0x0800b904
 8001a44:	0800b910 	.word	0x0800b910

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_MspInit+0x44>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_MspInit+0x44>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x44>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x44>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6593      	str	r3, [r2, #88]	; 0x58
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 fb98 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <DMA1_Channel2_IRQHandler+0x10>)
 8001aea:	f001 ff6a 	bl	80039c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200002ac 	.word	0x200002ac

08001af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM2_IRQHandler+0x10>)
 8001afe:	f003 ffe5 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000378 	.word	0x20000378

08001b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <USART2_IRQHandler+0x10>)
 8001b12:	f005 f90f 	bl	8006d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003c4 	.word	0x200003c4

08001b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b28:	f002 f9ec 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b30:	f002 f9e8 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b38:	f002 f9e4 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b40:	f002 f9e0 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b62:	f006 fb1d 	bl	80081a0 <__errno>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2216      	movs	r2, #22
 8001b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_exit>:

void _exit (int status)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffe7 	bl	8001b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b8a:	e7fe      	b.n	8001b8a <_exit+0x12>

08001b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
	}

return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
	}
	return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f006 fa82 	bl	80081a0 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20018000 	.word	0x20018000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	2000023c 	.word	0x2000023c
 8001cd0:	20000460 	.word	0x20000460

08001cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d20:	224f      	movs	r2, #79	; 0x4f
 8001d22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d3c:	4813      	ldr	r0, [pc, #76]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d3e:	f003 fc05 	bl	800554c <HAL_TIM_Base_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d48:	f7ff fdad 	bl	80018a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d5a:	f004 f8eb 	bl	8005f34 <HAL_TIM_ConfigClockSource>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d64:	f7ff fd9f 	bl	80018a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d76:	f004 fdff 	bl	8006978 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d80:	f7ff fd91 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000378 	.word	0x20000378
 8001d90:	0001869f 	.word	0x0001869f

08001d94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db4:	463b      	mov	r3, r7
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001dc8:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <MX_TIM3_Init+0x12c>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001dce:	224f      	movs	r2, #79	; 0x4f
 8001dd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001dda:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001dde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dec:	4833      	ldr	r0, [pc, #204]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001dee:	f003 fbad 	bl	800554c <HAL_TIM_Base_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001df8:	f7ff fd55 	bl	80018a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e06:	4619      	mov	r1, r3
 8001e08:	482c      	ldr	r0, [pc, #176]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001e0a:	f004 f893 	bl	8005f34 <HAL_TIM_ConfigClockSource>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001e14:	f7ff fd47 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e18:	4828      	ldr	r0, [pc, #160]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001e1a:	f003 fcef 	bl	80057fc <HAL_TIM_PWM_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e24:	f7ff fd3f 	bl	80018a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4821      	ldr	r0, [pc, #132]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001e38:	f004 fd9e 	bl	8006978 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e42:	f7ff fd30 	bl	80018a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e46:	2360      	movs	r3, #96	; 0x60
 8001e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4817      	ldr	r0, [pc, #92]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001e5e:	f003 ff55 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e68:	f7ff fd1d 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2204      	movs	r2, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001e74:	f003 ff4a 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001e7e:	f7ff fd12 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e82:	463b      	mov	r3, r7
 8001e84:	2208      	movs	r2, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001e8a:	f003 ff3f 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001e94:	f7ff fd07 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001ea0:	f003 ff34 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001eaa:	f7ff fcfc 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <MX_TIM3_Init+0x128>)
 8001eb0:	f000 f840 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001eb4:	bf00      	nop
 8001eb6:	3738      	adds	r7, #56	; 0x38
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000032c 	.word	0x2000032c
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d114      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	201c      	movs	r0, #28
 8001ef4:	f001 fb97 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ef8:	201c      	movs	r0, #28
 8001efa:	f001 fbb0 	bl	800365e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001efe:	e010      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40000400 	.word	0x40000400

08001f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_TIM_MspPostInit+0x9c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d138      	bne.n	8001fc8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_TIM_MspPostInit+0xa0>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_TIM_MspPostInit+0xa0>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_TIM_MspPostInit+0xa0>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_TIM_MspPostInit+0xa0>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_TIM_MspPostInit+0xa0>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_TIM_MspPostInit+0xa0>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f86:	23c0      	movs	r3, #192	; 0xc0
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f96:	2302      	movs	r3, #2
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa4:	f001 fdec 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_TIM_MspPostInit+0xa4>)
 8001fc4:	f001 fddc 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	48000400 	.word	0x48000400

08001fdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART2_UART_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002020:	f004 fd50 	bl	8006ac4 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f7ff fc3c 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200003c4 	.word	0x200003c4
 8002038:	40004400 	.word	0x40004400

0800203c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0ac      	sub	sp, #176	; 0xb0
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2288      	movs	r2, #136	; 0x88
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f006 f8c9 	bl	80081f4 <memset>
  if(uartHandle->Instance==USART2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_UART_MspInit+0xc0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d143      	bne.n	80020f4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800206c:	2302      	movs	r3, #2
 800206e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002070:	2300      	movs	r3, #0
 8002072:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fdab 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002084:	f7ff fc0f 	bl	80018a6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_UART_MspInit+0xc4>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_UART_MspInit+0xc4>)
 800208e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002092:	6593      	str	r3, [r2, #88]	; 0x58
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_UART_MspInit+0xc4>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_UART_MspInit+0xc4>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_UART_MspInit+0xc4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_UART_MspInit+0xc4>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b8:	230c      	movs	r3, #12
 80020ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d0:	2307      	movs	r3, #7
 80020d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e0:	f001 fd4e 	bl	8003b80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2026      	movs	r0, #38	; 0x26
 80020ea:	f001 fa9c 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ee:	2026      	movs	r0, #38	; 0x26
 80020f0:	f001 fab5 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020f4:	bf00      	nop
 80020f6:	37b0      	adds	r7, #176	; 0xb0
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40004400 	.word	0x40004400
 8002100:	40021000 	.word	0x40021000

08002104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002108:	f7ff fde4 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <LoopForever+0x6>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	; (8002144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <LoopForever+0xe>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	; (8002150 <LoopForever+0x16>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f006 f83b 	bl	80081ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002136:	f7ff fa79 	bl	800162c <main>

0800213a <LoopForever>:

LoopForever:
    b LoopForever
 800213a:	e7fe      	b.n	800213a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800213c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002148:	0800bd80 	.word	0x0800bd80
  ldr r2, =_sbss
 800214c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002150:	2000045c 	.word	0x2000045c

08002154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_2_IRQHandler>
	...

08002158 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_Init+0x3c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_Init+0x3c>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216e:	2003      	movs	r0, #3
 8002170:	f001 fa4e 	bl	8003610 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002174:	2000      	movs	r0, #0
 8002176:	f000 f80f 	bl	8002198 <HAL_InitTick>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	e001      	b.n	800218a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002186:	f7ff fc5f 	bl	8001a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218a:	79fb      	ldrb	r3, [r7, #7]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_InitTick+0x6c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d023      	beq.n	80021f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_InitTick+0x70>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_InitTick+0x6c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fa59 	bl	800367a <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d809      	bhi.n	80021e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f001 fa23 	bl	8003626 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_InitTick+0x74>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e004      	b.n	80021f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e001      	b.n	80021f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000040 	.word	0x20000040
 8002208:	20000038 	.word	0x20000038
 800220c:	2000003c 	.word	0x2000003c

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000040 	.word	0x20000040
 8002234:	20000448 	.word	0x20000448

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000448 	.word	0x20000448

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff ffee 	bl	8002238 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffde 	bl	8002238 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000040 	.word	0x20000040

08002298 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	609a      	str	r2, [r3, #8]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <LL_ADC_SetOffset+0x44>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	4313      	orrs	r3, r2
 8002330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	03fff000 	.word	0x03fff000

08002348 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	461a      	mov	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3360      	adds	r3, #96	; 0x60
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3330      	adds	r3, #48	; 0x30
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	4413      	add	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	211f      	movs	r1, #31
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	f003 011f 	and.w	r1, r3, #31
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	431a      	orrs	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3314      	adds	r3, #20
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	0e5b      	lsrs	r3, r3, #25
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	0d1b      	lsrs	r3, r3, #20
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2107      	movs	r1, #7
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	401a      	ands	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	0d1b      	lsrs	r3, r3, #20
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	431a      	orrs	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	43db      	mvns	r3, r3
 800249a:	401a      	ands	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0318 	and.w	r3, r3, #24
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024a4:	40d9      	lsrs	r1, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	400b      	ands	r3, r1
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	0007ffff 	.word	0x0007ffff

080024c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 031f 	and.w	r3, r3, #31
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6093      	str	r3, [r2, #8]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251c:	d101      	bne.n	8002522 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002544:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256c:	d101      	bne.n	8002572 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <LL_ADC_IsEnabled+0x18>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <LL_ADC_IsEnabled+0x1a>
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d101      	bne.n	800260e <LL_ADC_REG_IsConversionOngoing+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d101      	bne.n	8002634 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e136      	b.n	80028cc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7fe fd1d 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff3f 	bl	8002508 <LL_ADC_IsDeepPowerDownEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff25 	bl	80024e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff5a 	bl	8002558 <LL_ADC_IsInternalRegulatorEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff3e 	bl	8002530 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b4:	4b87      	ldr	r3, [pc, #540]	; (80028d4 <HAL_ADC_Init+0x290>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	4a87      	ldr	r2, [pc, #540]	; (80028d8 <HAL_ADC_Init+0x294>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026c8:	e002      	b.n	80026d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff3c 	bl	8002558 <LL_ADC_IsInternalRegulatorEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff75 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 800270c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80cf 	bne.w	80028ba <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80cb 	bne.w	80028ba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800272c:	f043 0202 	orr.w	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff35 	bl	80025a8 <LL_ADC_IsEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d115      	bne.n	8002770 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	4865      	ldr	r0, [pc, #404]	; (80028dc <HAL_ADC_Init+0x298>)
 8002746:	f7ff ff2f 	bl	80025a8 <LL_ADC_IsEnabled>
 800274a:	4604      	mov	r4, r0
 800274c:	4864      	ldr	r0, [pc, #400]	; (80028e0 <HAL_ADC_Init+0x29c>)
 800274e:	f7ff ff2b 	bl	80025a8 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	431c      	orrs	r4, r3
 8002756:	4863      	ldr	r0, [pc, #396]	; (80028e4 <HAL_ADC_Init+0x2a0>)
 8002758:	f7ff ff26 	bl	80025a8 <LL_ADC_IsEnabled>
 800275c:	4603      	mov	r3, r0
 800275e:	4323      	orrs	r3, r4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4619      	mov	r1, r3
 800276a:	485f      	ldr	r0, [pc, #380]	; (80028e8 <HAL_ADC_Init+0x2a4>)
 800276c:	f7ff fd94 	bl	8002298 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e5b      	ldrb	r3, [r3, #25]
 8002774:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800277a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002780:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002786:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d106      	bne.n	80027ac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	045b      	lsls	r3, r3, #17
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_ADC_Init+0x2a8>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff08 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 80027e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff15 	bl	800261c <LL_ADC_INJ_IsConversionOngoing>
 80027f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d13d      	bne.n	8002876 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d13a      	bne.n	8002876 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002804:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800281c:	f023 0302 	bic.w	r3, r3, #2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	430b      	orrs	r3, r1
 8002828:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002830:	2b01      	cmp	r3, #1
 8002832:	d118      	bne.n	8002866 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002856:	430a      	orrs	r2, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	e007      	b.n	8002876 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10c      	bne.n	8002898 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f023 010f 	bic.w	r1, r3, #15
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
 8002896:	e007      	b.n	80028a8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 020f 	bic.w	r2, r2, #15
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f023 0303 	bic.w	r3, r3, #3
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
 80028b8:	e007      	b.n	80028ca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 0210 	orr.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3724      	adds	r7, #36	; 0x24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}
 80028d4:	20000038 	.word	0x20000038
 80028d8:	053e2d63 	.word	0x053e2d63
 80028dc:	50040000 	.word	0x50040000
 80028e0:	50040100 	.word	0x50040100
 80028e4:	50040200 	.word	0x50040200
 80028e8:	50040300 	.word	0x50040300
 80028ec:	fff0c007 	.word	0xfff0c007

080028f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028fc:	4853      	ldr	r0, [pc, #332]	; (8002a4c <HAL_ADC_Start_DMA+0x15c>)
 80028fe:	f7ff fde3 	bl	80024c8 <LL_ADC_GetMultimode>
 8002902:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe74 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 8093 	bne.w	8002a3c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ADC_Start_DMA+0x34>
 8002920:	2302      	movs	r3, #2
 8002922:	e08e      	b.n	8002a42 <HAL_ADC_Start_DMA+0x152>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a47      	ldr	r2, [pc, #284]	; (8002a50 <HAL_ADC_Start_DMA+0x160>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d008      	beq.n	8002948 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d002      	beq.n	8002948 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b09      	cmp	r3, #9
 8002946:	d172      	bne.n	8002a2e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fc9b 	bl	8003284 <ADC_Enable>
 800294e:	4603      	mov	r3, r0
 8002950:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d165      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_ADC_Start_DMA+0x164>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d002      	beq.n	800297c <HAL_ADC_Start_DMA+0x8c>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e000      	b.n	800297e <HAL_ADC_Start_DMA+0x8e>
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_ADC_Start_DMA+0x168>)
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4293      	cmp	r3, r2
 8002984:	d002      	beq.n	800298c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f023 0206 	bic.w	r2, r3, #6
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58
 80029b0:	e002      	b.n	80029b8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_ADC_Start_DMA+0x16c>)
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c4:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <HAL_ADC_Start_DMA+0x170>)
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HAL_ADC_Start_DMA+0x174>)
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	221c      	movs	r2, #28
 80029d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0210 	orr.w	r2, r2, #16
 80029ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f000 fef8 	bl	8003804 <HAL_DMA_Start_IT>
 8002a14:	4603      	mov	r3, r0
 8002a16:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fdd6 	bl	80025ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a22:	e00d      	b.n	8002a40 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002a2c:	e008      	b.n	8002a40 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a3a:	e001      	b.n	8002a40 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	50040300 	.word	0x50040300
 8002a50:	50040200 	.word	0x50040200
 8002a54:	50040100 	.word	0x50040100
 8002a58:	50040000 	.word	0x50040000
 8002a5c:	08003349 	.word	0x08003349
 8002a60:	08003421 	.word	0x08003421
 8002a64:	0800343d 	.word	0x0800343d

08002a68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0b6      	sub	sp, #216	; 0xd8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x22>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e3c7      	b.n	8003256 <HAL_ADC_ConfigChannel+0x7b2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fd8f 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 83a8 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d824      	bhi.n	8002b32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	3b02      	subs	r3, #2
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d81b      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x86>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <HAL_ADC_ConfigChannel+0x54>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b11 	.word	0x08002b11
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b21 	.word	0x08002b21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	605a      	str	r2, [r3, #4]
          break;
 8002b0e:	e011      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2212      	movs	r2, #18
 8002b14:	605a      	str	r2, [r3, #4]
          break;
 8002b16:	e00d      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	605a      	str	r2, [r3, #4]
          break;
 8002b1e:	e009      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b26:	605a      	str	r2, [r3, #4]
          break;
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	605a      	str	r2, [r3, #4]
          break;
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f7ff fc45 	bl	80023d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fd53 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 8002b50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fd5f 	bl	800261c <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 81a6 	bne.w	8002eb8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 81a1 	bne.w	8002eb8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7ff fc50 	bl	8002428 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bba:	f7ff fba1 	bl	8002300 <LL_ADC_SetOffset>
 8002bbe:	e17b      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fbbe 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x148>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fbb3 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	f003 021f 	and.w	r2, r3, #31
 8002bea:	e01e      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x186>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fba8 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e004      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x19e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	e018      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x1d0>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c66:	2320      	movs	r3, #32
 8002c68:	e004      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d106      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fb77 	bl	8002374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fb5b 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x20e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fb50 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	e01e      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x24c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fb45 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x264>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	e018      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x296>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e004      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fb14 	bl	8002374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff faf8 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x2d4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff faed 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	e01e      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x312>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fae2 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002da6:	2320      	movs	r3, #32
 8002da8:	e004      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x32a>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	e016      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x358>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002dee:	2320      	movs	r3, #32
 8002df0:	e004      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2102      	movs	r1, #2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fab3 	bl	8002374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2103      	movs	r1, #3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fa97 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x396>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fa8c 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	0e9b      	lsrs	r3, r3, #26
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	e017      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x3c6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2103      	movs	r1, #3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fa81 	bl	8002348 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x3de>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	e011      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x402>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d106      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fa5e 	bl	8002374 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fb73 	bl	80025a8 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 813f 	bne.w	8003148 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f7ff fad2 	bl	8002480 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	; (800311c <HAL_ADC_ConfigChannel+0x678>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f040 8130 	bne.w	8003148 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x46c>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e019      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x4a0>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	bf94      	ite	ls
 8002f3e:	2301      	movls	r3, #1
 8002f40:	2300      	movhi	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d079      	beq.n	800303c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x4c0>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0e9b      	lsrs	r3, r3, #26
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	069b      	lsls	r3, r3, #26
 8002f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f62:	e015      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x4ec>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	069b      	lsls	r3, r3, #26
 8002f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x50c>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	e017      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x53c>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	ea42 0103 	orr.w	r1, r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x562>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	e018      	b.n	8003038 <HAL_ADC_ConfigChannel+0x594>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e003      	b.n	800302a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	430b      	orrs	r3, r1
 800303a:	e080      	b.n	800313e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5b4>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003056:	e015      	b.n	8003084 <HAL_ADC_ConfigChannel+0x5e0>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e003      	b.n	800307c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	069b      	lsls	r3, r3, #26
 8003080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x600>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	3301      	adds	r3, #1
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	e017      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x630>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	61fb      	str	r3, [r7, #28]
  return result;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80030bc:	2320      	movs	r3, #32
 80030be:	e003      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x65c>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	3b1e      	subs	r3, #30
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fe:	e01d      	b.n	800313c <HAL_ADC_ConfigChannel+0x698>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	613b      	str	r3, [r7, #16]
  return result;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e005      	b.n	8003128 <HAL_ADC_ConfigChannel+0x684>
 800311c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	051b      	lsls	r3, r3, #20
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313c:	430b      	orrs	r3, r1
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6892      	ldr	r2, [r2, #8]
 8003142:	4619      	mov	r1, r3
 8003144:	f7ff f970 	bl	8002428 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b44      	ldr	r3, [pc, #272]	; (8003260 <HAL_ADC_ConfigChannel+0x7bc>)
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d07a      	beq.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003154:	4843      	ldr	r0, [pc, #268]	; (8003264 <HAL_ADC_ConfigChannel+0x7c0>)
 8003156:	f7ff f8c5 	bl	80022e4 <LL_ADC_GetCommonPathInternalCh>
 800315a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a41      	ldr	r2, [pc, #260]	; (8003268 <HAL_ADC_ConfigChannel+0x7c4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d12c      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800316c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d126      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3c      	ldr	r2, [pc, #240]	; (800326c <HAL_ADC_ConfigChannel+0x7c8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x6e4>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a3b      	ldr	r2, [pc, #236]	; (8003270 <HAL_ADC_ConfigChannel+0x7cc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d15d      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800318c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003190:	4619      	mov	r1, r3
 8003192:	4834      	ldr	r0, [pc, #208]	; (8003264 <HAL_ADC_ConfigChannel+0x7c0>)
 8003194:	f7ff f893 	bl	80022be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_ADC_ConfigChannel+0x7d0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	4a36      	ldr	r2, [pc, #216]	; (8003278 <HAL_ADC_ConfigChannel+0x7d4>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031b2:	e002      	b.n	80031ba <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c0:	e040      	b.n	8003244 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2d      	ldr	r2, [pc, #180]	; (800327c <HAL_ADC_ConfigChannel+0x7d8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d118      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x75a>
 80031cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d112      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a23      	ldr	r2, [pc, #140]	; (800326c <HAL_ADC_ConfigChannel+0x7c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x748>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_ADC_ConfigChannel+0x7cc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d12d      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f4:	4619      	mov	r1, r3
 80031f6:	481b      	ldr	r0, [pc, #108]	; (8003264 <HAL_ADC_ConfigChannel+0x7c0>)
 80031f8:	f7ff f861 	bl	80022be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031fc:	e024      	b.n	8003248 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d120      	bne.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800320c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11a      	bne.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_ADC_ConfigChannel+0x7c8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d115      	bne.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800321e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003226:	4619      	mov	r1, r3
 8003228:	480e      	ldr	r0, [pc, #56]	; (8003264 <HAL_ADC_ConfigChannel+0x7c0>)
 800322a:	f7ff f848 	bl	80022be <LL_ADC_SetCommonPathInternalCh>
 800322e:	e00c      	b.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003242:	e002      	b.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003248:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003252:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003256:	4618      	mov	r0, r3
 8003258:	37d8      	adds	r7, #216	; 0xd8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	80080000 	.word	0x80080000
 8003264:	50040300 	.word	0x50040300
 8003268:	c7520000 	.word	0xc7520000
 800326c:	50040000 	.word	0x50040000
 8003270:	50040200 	.word	0x50040200
 8003274:	20000038 	.word	0x20000038
 8003278:	053e2d63 	.word	0x053e2d63
 800327c:	cb840000 	.word	0xcb840000
 8003280:	80000001 	.word	0x80000001

08003284 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f989 	bl	80025a8 <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d14d      	bne.n	8003338 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <ADC_Enable+0xc0>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e039      	b.n	800333a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f958 	bl	8002580 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032d0:	f7fe ffb2 	bl	8002238 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d6:	e028      	b.n	800332a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff f963 	bl	80025a8 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff f947 	bl	8002580 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f2:	f7fe ffa1 	bl	8002238 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d914      	bls.n	800332a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d00d      	beq.n	800332a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d1cf      	bne.n	80032d8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	8000003f 	.word	0x8000003f

08003348 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800335e:	2b00      	cmp	r3, #0
 8003360:	d14b      	bne.n	80033fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d021      	beq.n	80033c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f812 	bl	80023aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d032      	beq.n	80033f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12b      	bne.n	80033f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11f      	bne.n	80033f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
 80033be:	e018      	b.n	80033f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d111      	bne.n	80033f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fb38 	bl	8002a68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033f8:	e00e      	b.n	8003418 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff fb42 	bl	8002a90 <HAL_ADC_ErrorCallback>
}
 800340c:	e004      	b.n	8003418 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fb24 	bl	8002a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff fb14 	bl	8002a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
         );
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d301      	bcc.n	80035e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035de:	2301      	movs	r3, #1
 80035e0:	e00f      	b.n	8003602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <SysTick_Config+0x40>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ea:	210f      	movs	r1, #15
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	f7ff ff8e 	bl	8003510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <SysTick_Config+0x40>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <SysTick_Config+0x40>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000e010 	.word	0xe000e010

08003610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff29 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003638:	f7ff ff3e 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 800363c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7ff ff8e 	bl	8003564 <NVIC_EncodePriority>
 8003648:	4602      	mov	r2, r0
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5d 	bl	8003510 <__NVIC_SetPriority>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff31 	bl	80034d4 <__NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffa2 	bl	80035cc <SysTick_Config>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e098      	b.n	80037d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <HAL_DMA_Init+0x150>)
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d80f      	bhi.n	80036d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_DMA_Init+0x154>)
 80036ba:	4413      	add	r3, r2
 80036bc:	4a4b      	ldr	r2, [pc, #300]	; (80037ec <HAL_DMA_Init+0x158>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	009a      	lsls	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a48      	ldr	r2, [pc, #288]	; (80037f0 <HAL_DMA_Init+0x15c>)
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
 80036d0:	e00e      	b.n	80036f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_DMA_Init+0x160>)
 80036da:	4413      	add	r3, r2
 80036dc:	4a43      	ldr	r2, [pc, #268]	; (80037ec <HAL_DMA_Init+0x158>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	009a      	lsls	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a42      	ldr	r2, [pc, #264]	; (80037f8 <HAL_DMA_Init+0x164>)
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374a:	d039      	beq.n	80037c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4a27      	ldr	r2, [pc, #156]	; (80037f0 <HAL_DMA_Init+0x15c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d11a      	bne.n	800378c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <HAL_DMA_Init+0x168>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f003 031c 	and.w	r3, r3, #28
 8003762:	210f      	movs	r1, #15
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	4924      	ldr	r1, [pc, #144]	; (80037fc <HAL_DMA_Init+0x168>)
 800376c:	4013      	ands	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_DMA_Init+0x168>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	f003 031c 	and.w	r3, r3, #28
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	491d      	ldr	r1, [pc, #116]	; (80037fc <HAL_DMA_Init+0x168>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
 800378a:	e019      	b.n	80037c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800378c:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_DMA_Init+0x16c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f003 031c 	and.w	r3, r3, #28
 8003798:	210f      	movs	r1, #15
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	4917      	ldr	r1, [pc, #92]	; (8003800 <HAL_DMA_Init+0x16c>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_DMA_Init+0x16c>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 031c 	and.w	r3, r3, #28
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	4911      	ldr	r1, [pc, #68]	; (8003800 <HAL_DMA_Init+0x16c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40020407 	.word	0x40020407
 80037e8:	bffdfff8 	.word	0xbffdfff8
 80037ec:	cccccccd 	.word	0xcccccccd
 80037f0:	40020000 	.word	0x40020000
 80037f4:	bffdfbf8 	.word	0xbffdfbf8
 80037f8:	40020400 	.word	0x40020400
 80037fc:	400200a8 	.word	0x400200a8
 8003800:	400204a8 	.word	0x400204a8

08003804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_DMA_Start_IT+0x20>
 8003820:	2302      	movs	r3, #2
 8003822:	e04b      	b.n	80038bc <HAL_DMA_Start_IT+0xb8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d13a      	bne.n	80038ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f95f 	bl	8003b20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 020e 	orr.w	r2, r2, #14
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00f      	b.n	800389c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 020a 	orr.w	r2, r2, #10
 800389a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e005      	b.n	80038ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d008      	beq.n	80038ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 020e 	bic.w	r2, r2, #14
 80038fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f003 021c 	and.w	r2, r3, #28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d005      	beq.n	8003964 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e029      	b.n	80039b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 020e 	bic.w	r2, r2, #14
 8003972:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f003 021c 	and.w	r2, r3, #28
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f202 	lsl.w	r2, r1, r2
 8003996:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
    }
  }
  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 031c 	and.w	r3, r3, #28
 80039e2:	2204      	movs	r2, #4
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d026      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x7a>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d021      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0204 	bic.w	r2, r2, #4
 8003a14:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f003 021c 	and.w	r2, r3, #28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2104      	movs	r1, #4
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d071      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a3a:	e06c      	b.n	8003b16 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f003 031c 	and.w	r3, r3, #28
 8003a44:	2202      	movs	r2, #2
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d02e      	beq.n	8003aae <HAL_DMA_IRQHandler+0xec>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d029      	beq.n	8003aae <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020a 	bic.w	r2, r2, #10
 8003a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 021c 	and.w	r2, r3, #28
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d038      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003aac:	e033      	b.n	8003b16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f003 031c 	and.w	r3, r3, #28
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02a      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x156>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d025      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 020e 	bic.w	r2, r2, #14
 8003ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f003 021c 	and.w	r2, r3, #28
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
}
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f003 021c 	and.w	r2, r3, #28
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d108      	bne.n	8003b64 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b62:	e007      	b.n	8003b74 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8e:	e17f      	b.n	8003e90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8171 	beq.w	8003e8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d005      	beq.n	8003bc0 <HAL_GPIO_Init+0x40>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d130      	bne.n	8003c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0201 	and.w	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d118      	bne.n	8003c60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c34:	2201      	movs	r2, #1
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	08db      	lsrs	r3, r3, #3
 8003c4a:	f003 0201 	and.w	r2, r3, #1
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d017      	beq.n	8003c9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d123      	bne.n	8003cf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	08da      	lsrs	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3208      	adds	r2, #8
 8003cea:	6939      	ldr	r1, [r7, #16]
 8003cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80ac 	beq.w	8003e8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d32:	4b5f      	ldr	r3, [pc, #380]	; (8003eb0 <HAL_GPIO_Init+0x330>)
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	4a5e      	ldr	r2, [pc, #376]	; (8003eb0 <HAL_GPIO_Init+0x330>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <HAL_GPIO_Init+0x330>)
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d4a:	4a5a      	ldr	r2, [pc, #360]	; (8003eb4 <HAL_GPIO_Init+0x334>)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d74:	d025      	beq.n	8003dc2 <HAL_GPIO_Init+0x242>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4f      	ldr	r2, [pc, #316]	; (8003eb8 <HAL_GPIO_Init+0x338>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <HAL_GPIO_Init+0x23e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4e      	ldr	r2, [pc, #312]	; (8003ebc <HAL_GPIO_Init+0x33c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d019      	beq.n	8003dba <HAL_GPIO_Init+0x23a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4d      	ldr	r2, [pc, #308]	; (8003ec0 <HAL_GPIO_Init+0x340>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_GPIO_Init+0x236>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4c      	ldr	r2, [pc, #304]	; (8003ec4 <HAL_GPIO_Init+0x344>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00d      	beq.n	8003db2 <HAL_GPIO_Init+0x232>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_GPIO_Init+0x348>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x22e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <HAL_GPIO_Init+0x34c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_GPIO_Init+0x22a>
 8003da6:	2306      	movs	r3, #6
 8003da8:	e00c      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003daa:	2307      	movs	r3, #7
 8003dac:	e00a      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003dae:	2305      	movs	r3, #5
 8003db0:	e008      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e006      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e004      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e002      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x244>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	f002 0203 	and.w	r2, r2, #3
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4093      	lsls	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dd4:	4937      	ldr	r1, [pc, #220]	; (8003eb4 <HAL_GPIO_Init+0x334>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e06:	4a32      	ldr	r2, [pc, #200]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <HAL_GPIO_Init+0x350>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f47f ae78 	bne.w	8003b90 <HAL_GPIO_Init+0x10>
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	48000400 	.word	0x48000400
 8003ebc:	48000800 	.word	0x48000800
 8003ec0:	48000c00 	.word	0x48000c00
 8003ec4:	48001000 	.word	0x48001000
 8003ec8:	48001400 	.word	0x48001400
 8003ecc:	48001800 	.word	0x48001800
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef0:	e002      	b.n	8003ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fcb4 	bl	8001890 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40010400 	.word	0x40010400

08003f34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40007000 	.word	0x40007000

08003f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d130      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6c:	d038      	beq.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2232      	movs	r2, #50	; 0x32
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	0c9b      	lsrs	r3, r3, #18
 8003f90:	3301      	adds	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f94:	e002      	b.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	d102      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f2      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbc:	d110      	bne.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d007      	beq.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd8:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	20000038 	.word	0x20000038
 8003ff8:	431bde83 	.word	0x431bde83

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e3d4      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400e:	4ba1      	ldr	r3, [pc, #644]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004018:	4b9e      	ldr	r3, [pc, #632]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80e4 	beq.w	80041f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_RCC_OscConfig+0x4a>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	f040 808b 	bne.w	8004154 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b01      	cmp	r3, #1
 8004042:	f040 8087 	bne.w	8004154 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004046:	4b93      	ldr	r3, [pc, #588]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x62>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e3ac      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	4b8c      	ldr	r3, [pc, #560]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <HAL_RCC_OscConfig+0x7c>
 800406e:	4b89      	ldr	r3, [pc, #548]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004076:	e005      	b.n	8004084 <HAL_RCC_OscConfig+0x88>
 8004078:	4b86      	ldr	r3, [pc, #536]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	4293      	cmp	r3, r2
 8004086:	d223      	bcs.n	80040d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fd41 	bl	8004b14 <RCC_SetFlashLatencyFromMSIRange>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e38d      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409c:	4b7d      	ldr	r3, [pc, #500]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a7c      	ldr	r2, [pc, #496]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040a2:	f043 0308 	orr.w	r3, r3, #8
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	4b7a      	ldr	r3, [pc, #488]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4977      	ldr	r1, [pc, #476]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ba:	4b76      	ldr	r3, [pc, #472]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	4972      	ldr	r1, [pc, #456]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
 80040ce:	e025      	b.n	800411c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d0:	4b70      	ldr	r3, [pc, #448]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6f      	ldr	r2, [pc, #444]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	496a      	ldr	r1, [pc, #424]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ee:	4b69      	ldr	r3, [pc, #420]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	4965      	ldr	r1, [pc, #404]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fd01 	bl	8004b14 <RCC_SetFlashLatencyFromMSIRange>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e34d      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411c:	f000 fc36 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	495a      	ldr	r1, [pc, #360]	; (8004298 <HAL_RCC_OscConfig+0x29c>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	4a58      	ldr	r2, [pc, #352]	; (800429c <HAL_RCC_OscConfig+0x2a0>)
 800413a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800413c:	4b58      	ldr	r3, [pc, #352]	; (80042a0 <HAL_RCC_OscConfig+0x2a4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f829 	bl	8002198 <HAL_InitTick>
 8004146:	4603      	mov	r3, r0
 8004148:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d052      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	e331      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d032      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800415c:	4b4d      	ldr	r3, [pc, #308]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a4c      	ldr	r2, [pc, #304]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004168:	f7fe f866 	bl	8002238 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004170:	f7fe f862 	bl	8002238 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e31a      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004182:	4b44      	ldr	r3, [pc, #272]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418e:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a40      	ldr	r2, [pc, #256]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	493b      	ldr	r1, [pc, #236]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ac:	4b39      	ldr	r3, [pc, #228]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	4936      	ldr	r1, [pc, #216]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e01a      	b.n	80041f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041c2:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a33      	ldr	r2, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ce:	f7fe f833 	bl	8002238 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d6:	f7fe f82f 	bl	8002238 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e2e7      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e8:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x1da>
 80041f4:	e000      	b.n	80041f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d074      	beq.n	80042ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b08      	cmp	r3, #8
 8004208:	d005      	beq.n	8004216 <HAL_RCC_OscConfig+0x21a>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d10e      	bne.n	800422e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d10b      	bne.n	800422e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004216:	4b1f      	ldr	r3, [pc, #124]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d064      	beq.n	80042ec <HAL_RCC_OscConfig+0x2f0>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d160      	bne.n	80042ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e2c4      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x24a>
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800423e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e01d      	b.n	8004282 <HAL_RCC_OscConfig+0x286>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x26e>
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0x286>
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a06      	ldr	r2, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x298>)
 800427c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004280:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd ffd5 	bl	8002238 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004290:	e011      	b.n	80042b6 <HAL_RCC_OscConfig+0x2ba>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	0800b92c 	.word	0x0800b92c
 800429c:	20000038 	.word	0x20000038
 80042a0:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd ffc8 	bl	8002238 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e280      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b6:	4baf      	ldr	r3, [pc, #700]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x2a8>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd ffb8 	bl	8002238 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd ffb4 	bl	8002238 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e26c      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042de:	4ba5      	ldr	r3, [pc, #660]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x2d0>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d060      	beq.n	80043bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d005      	beq.n	800430c <HAL_RCC_OscConfig+0x310>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b0c      	cmp	r3, #12
 8004304:	d119      	bne.n	800433a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d116      	bne.n	800433a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800430c:	4b99      	ldr	r3, [pc, #612]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x328>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e249      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b93      	ldr	r3, [pc, #588]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	4990      	ldr	r1, [pc, #576]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004338:	e040      	b.n	80043bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d023      	beq.n	800438a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004342:	4b8c      	ldr	r3, [pc, #560]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a8b      	ldr	r2, [pc, #556]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd ff73 	bl	8002238 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd ff6f 	bl	8002238 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e227      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004368:	4b82      	ldr	r3, [pc, #520]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	497c      	ldr	r1, [pc, #496]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	e018      	b.n	80043bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b7a      	ldr	r3, [pc, #488]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a79      	ldr	r2, [pc, #484]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fd ff4f 	bl	8002238 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439e:	f7fd ff4b 	bl	8002238 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e203      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b0:	4b70      	ldr	r3, [pc, #448]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d03c      	beq.n	8004442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01c      	beq.n	800440a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d0:	4b68      	ldr	r3, [pc, #416]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	4a67      	ldr	r2, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd ff2a 	bl	8002238 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fd ff26 	bl	8002238 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1de      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fa:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCC_OscConfig+0x3ec>
 8004408:	e01b      	b.n	8004442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440a:	4b5a      	ldr	r3, [pc, #360]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd ff0d 	bl	8002238 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004422:	f7fd ff09 	bl	8002238 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1c1      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004434:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ef      	bne.n	8004422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80a6 	beq.w	800459c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004454:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b44      	ldr	r3, [pc, #272]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	4a43      	ldr	r2, [pc, #268]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	; 0x58
 800446c:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <HAL_RCC_OscConfig+0x57c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d118      	bne.n	80044ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <HAL_RCC_OscConfig+0x57c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3a      	ldr	r2, [pc, #232]	; (8004578 <HAL_RCC_OscConfig+0x57c>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fd fed0 	bl	8002238 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fd fecc 	bl	8002238 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e184      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_RCC_OscConfig+0x57c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d108      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4d8>
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d2:	e024      	b.n	800451e <HAL_RCC_OscConfig+0x522>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d110      	bne.n	80044fe <HAL_RCC_OscConfig+0x502>
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a24      	ldr	r2, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	4a20      	ldr	r2, [pc, #128]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044fc:	e00f      	b.n	800451e <HAL_RCC_OscConfig+0x522>
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800450e:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004516:	f023 0304 	bic.w	r3, r3, #4
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fd fe87 	bl	8002238 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd fe83 	bl	8002238 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e139      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x578>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ed      	beq.n	800452e <HAL_RCC_OscConfig+0x532>
 8004552:	e01a      	b.n	800458a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd fe70 	bl	8002238 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455a:	e00f      	b.n	800457c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fd fe6c 	bl	8002238 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d906      	bls.n	800457c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e122      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800457c:	4b90      	ldr	r3, [pc, #576]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e8      	bne.n	800455c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458a:	7ffb      	ldrb	r3, [r7, #31]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	4a8a      	ldr	r2, [pc, #552]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8108 	beq.w	80047b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	f040 80d0 	bne.w	8004750 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045b0:	4b83      	ldr	r3, [pc, #524]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d130      	bne.n	8004626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	3b01      	subs	r3, #1
 80045d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d127      	bne.n	8004626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d11f      	bne.n	8004626 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f0:	2a07      	cmp	r2, #7
 80045f2:	bf14      	ite	ne
 80045f4:	2201      	movne	r2, #1
 80045f6:	2200      	moveq	r2, #0
 80045f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d113      	bne.n	8004626 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	3b01      	subs	r3, #1
 800460c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d109      	bne.n	8004626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	3b01      	subs	r3, #1
 8004620:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d06e      	beq.n	8004704 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d069      	beq.n	8004700 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800462c:	4b64      	ldr	r3, [pc, #400]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0b7      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004648:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a5c      	ldr	r2, [pc, #368]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800464e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004652:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004654:	f7fd fdf0 	bl	8002238 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465c:	f7fd fdec 	bl	8002238 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0a4      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466e:	4b54      	ldr	r3, [pc, #336]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467a:	4b51      	ldr	r3, [pc, #324]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <HAL_RCC_OscConfig+0x7c8>)
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800468a:	3a01      	subs	r2, #1
 800468c:	0112      	lsls	r2, r2, #4
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004694:	0212      	lsls	r2, r2, #8
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800469c:	0852      	lsrs	r2, r2, #1
 800469e:	3a01      	subs	r2, #1
 80046a0:	0552      	lsls	r2, r2, #21
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046a8:	0852      	lsrs	r2, r2, #1
 80046aa:	3a01      	subs	r2, #1
 80046ac:	0652      	lsls	r2, r2, #25
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b4:	0912      	lsrs	r2, r2, #4
 80046b6:	0452      	lsls	r2, r2, #17
 80046b8:	430a      	orrs	r2, r1
 80046ba:	4941      	ldr	r1, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046c0:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3e      	ldr	r2, [pc, #248]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80046c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046cc:	4b3c      	ldr	r3, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80046d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046d8:	f7fd fdae 	bl	8002238 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd fdaa 	bl	8002238 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e062      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f2:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046fe:	e05a      	b.n	80047b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e059      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004704:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d152      	bne.n	80047b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a27      	ldr	r2, [pc, #156]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004728:	f7fd fd86 	bl	8002238 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd fd82 	bl	8002238 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e03a      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x734>
 800474e:	e032      	b.n	80047b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d02d      	beq.n	80047b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800475c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004760:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d105      	bne.n	800477a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800476e:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004774:	f023 0303 	bic.w	r3, r3, #3
 8004778:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800477a:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 8004780:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004788:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fd fd55 	bl	8002238 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7fd fd51 	bl	8002238 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e009      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_OscConfig+0x7c4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x796>
 80047b0:	e001      	b.n	80047b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	f99d808c 	.word	0xf99d808c

080047c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0c8      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b66      	ldr	r3, [pc, #408]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d910      	bls.n	800480c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b63      	ldr	r3, [pc, #396]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	4961      	ldr	r1, [pc, #388]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0b0      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d04c      	beq.n	80048b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d107      	bne.n	8004830 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004820:	4b56      	ldr	r3, [pc, #344]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d121      	bne.n	8004870 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e09e      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d107      	bne.n	8004848 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004838:	4b50      	ldr	r3, [pc, #320]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d115      	bne.n	8004870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e092      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004850:	4b4a      	ldr	r3, [pc, #296]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e086      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004860:	4b46      	ldr	r3, [pc, #280]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e07e      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004870:	4b42      	ldr	r3, [pc, #264]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 0203 	bic.w	r2, r3, #3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	493f      	ldr	r1, [pc, #252]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004882:	f7fd fcd9 	bl	8002238 <HAL_GetTick>
 8004886:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004888:	e00a      	b.n	80048a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488a:	f7fd fcd5 	bl	8002238 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e066      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a0:	4b36      	ldr	r3, [pc, #216]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 020c 	and.w	r2, r3, #12
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d1eb      	bne.n	800488a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048be:	4b2f      	ldr	r3, [pc, #188]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	492c      	ldr	r1, [pc, #176]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d210      	bcs.n	8004900 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 0207 	bic.w	r2, r3, #7
 80048e6:	4924      	ldr	r1, [pc, #144]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <HAL_RCC_ClockConfig+0x1b0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e036      	b.n	800496e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4918      	ldr	r1, [pc, #96]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4910      	ldr	r1, [pc, #64]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800493e:	f000 f825 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004942:	4602      	mov	r2, r0
 8004944:	4b0d      	ldr	r3, [pc, #52]	; (800497c <HAL_RCC_ClockConfig+0x1b4>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	490c      	ldr	r1, [pc, #48]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	5ccb      	ldrb	r3, [r1, r3]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd fc18 	bl	8002198 <HAL_InitTick>
 8004968:	4603      	mov	r3, r0
 800496a:	72fb      	strb	r3, [r7, #11]

  return status;
 800496c:	7afb      	ldrb	r3, [r7, #11]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40022000 	.word	0x40022000
 800497c:	40021000 	.word	0x40021000
 8004980:	0800b92c 	.word	0x0800b92c
 8004984:	20000038 	.word	0x20000038
 8004988:	2000003c 	.word	0x2000003c

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800499a:	4b3e      	ldr	r3, [pc, #248]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x34>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	d121      	bne.n	80049fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d11e      	bne.n	80049fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049c0:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049cc:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	e005      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049dc:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049e8:	4a2b      	ldr	r2, [pc, #172]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d102      	bne.n	8004a0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e004      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a10:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d134      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a1a:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d003      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0xac>
 8004a30:	e005      	b.n	8004a3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a34:	617b      	str	r3, [r7, #20]
      break;
 8004a36:	e005      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a3a:	617b      	str	r3, [r7, #20]
      break;
 8004a3c:	e002      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	617b      	str	r3, [r7, #20]
      break;
 8004a42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	3301      	adds	r3, #1
 8004a50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	fb02 f203 	mul.w	r2, r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	0e5b      	lsrs	r3, r3, #25
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	3301      	adds	r3, #1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a84:	69bb      	ldr	r3, [r7, #24]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3724      	adds	r7, #36	; 0x24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
 8004a98:	0800b944 	.word	0x0800b944
 8004a9c:	00f42400 	.word	0x00f42400
 8004aa0:	007a1200 	.word	0x007a1200

08004aa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000038 	.word	0x20000038

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac0:	f7ff fff0 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	0800b93c 	.word	0x0800b93c

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004aec:	f7ff ffda 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0adb      	lsrs	r3, r3, #11
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4904      	ldr	r1, [pc, #16]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	0800b93c 	.word	0x0800b93c

08004b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b20:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b2c:	f7ff fa02 	bl	8003f34 <HAL_PWREx_GetVoltageRange>
 8004b30:	6178      	str	r0, [r7, #20]
 8004b32:	e014      	b.n	8004b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b4c:	f7ff f9f2 	bl	8003f34 <HAL_PWREx_GetVoltageRange>
 8004b50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b64:	d10b      	bne.n	8004b7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d919      	bls.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004b70:	d902      	bls.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b72:	2302      	movs	r3, #2
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e013      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	e010      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d902      	bls.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b84:	2303      	movs	r3, #3
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	e00a      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d102      	bne.n	8004b96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b90:	2302      	movs	r3, #2
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	e004      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b70      	cmp	r3, #112	; 0x70
 8004b9a:	d101      	bne.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 0207 	bic.w	r2, r3, #7
 8004ba8:	4909      	ldr	r1, [pc, #36]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40022000 	.word	0x40022000

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d041      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bf8:	d02a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bfe:	d824      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c04:	d008      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c0a:	d81e      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c14:	d010      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c16:	e018      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c18:	4b86      	ldr	r3, [pc, #536]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a85      	ldr	r2, [pc, #532]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c24:	e015      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fabb 	bl	80051a8 <RCCEx_PLLSAI1_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c36:	e00c      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3320      	adds	r3, #32
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fba6 	bl	8005390 <RCCEx_PLLSAI2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c48:	e003      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c4e:	e000      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c58:	4b76      	ldr	r3, [pc, #472]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c66:	4973      	ldr	r1, [pc, #460]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c6e:	e001      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d041      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c88:	d02a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c8e:	d824      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9a:	d81e      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca4:	d010      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ca6:	e018      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ca8:	4b62      	ldr	r3, [pc, #392]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a61      	ldr	r2, [pc, #388]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fa73 	bl	80051a8 <RCCEx_PLLSAI1_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cc6:	e00c      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3320      	adds	r3, #32
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fb5e 	bl	8005390 <RCCEx_PLLSAI2_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ce8:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf6:	494f      	ldr	r1, [pc, #316]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cfe:	e001      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
 8004d02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a0 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d12:	2300      	movs	r3, #0
 8004d14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	6593      	str	r3, [r2, #88]	; 0x58
 8004d38:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d44:	2301      	movs	r3, #1
 8004d46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d54:	f7fd fa70 	bl	8002238 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d5a:	e009      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5c:	f7fd fa6c 	bl	8002238 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d902      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d6e:	e005      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d70:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ef      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d15c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01f      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d019      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fd fa2b 	bl	8002238 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	e00b      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fd fa27 	bl	8002238 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d902      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ec      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	74bb      	strb	r3, [r7, #18]
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e40:	7c7b      	ldrb	r3, [r7, #17]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4b9e      	ldr	r3, [pc, #632]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4a9d      	ldr	r2, [pc, #628]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5e:	4b98      	ldr	r3, [pc, #608]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f023 0203 	bic.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	4994      	ldr	r1, [pc, #592]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e80:	4b8f      	ldr	r3, [pc, #572]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f023 020c 	bic.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	498c      	ldr	r1, [pc, #560]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ea2:	4b87      	ldr	r3, [pc, #540]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	4983      	ldr	r1, [pc, #524]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec4:	4b7e      	ldr	r3, [pc, #504]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	497b      	ldr	r1, [pc, #492]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	4972      	ldr	r1, [pc, #456]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f08:	4b6d      	ldr	r3, [pc, #436]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	496a      	ldr	r1, [pc, #424]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f2a:	4b65      	ldr	r3, [pc, #404]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	4961      	ldr	r1, [pc, #388]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f4c:	4b5c      	ldr	r3, [pc, #368]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	4959      	ldr	r1, [pc, #356]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f6e:	4b54      	ldr	r3, [pc, #336]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	4950      	ldr	r1, [pc, #320]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f90:	4b4b      	ldr	r3, [pc, #300]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	4948      	ldr	r1, [pc, #288]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fb2:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	493f      	ldr	r1, [pc, #252]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d028      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe2:	4937      	ldr	r1, [pc, #220]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff4:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a31      	ldr	r2, [pc, #196]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffe:	60d3      	str	r3, [r2, #12]
 8005000:	e011      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800500a:	d10c      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f8c8 	bl	80051a8 <RCCEx_PLLSAI1_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	491f      	ldr	r1, [pc, #124]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005050:	d106      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505c:	60d3      	str	r3, [r2, #12]
 800505e:	e011      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005068:	d10c      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2101      	movs	r1, #1
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f899 	bl	80051a8 <RCCEx_PLLSAI1_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	4908      	ldr	r1, [pc, #32]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ae:	d109      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ba:	60d3      	str	r3, [r2, #12]
 80050bc:	e014      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f867 	bl	80051a8 <RCCEx_PLLSAI1_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02f      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005102:	4928      	ldr	r1, [pc, #160]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800510e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005112:	d10d      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	2102      	movs	r1, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f844 	bl	80051a8 <RCCEx_PLLSAI1_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d014      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	74bb      	strb	r3, [r7, #18]
 800512e:	e011      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005138:	d10c      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3320      	adds	r3, #32
 800513e:	2102      	movs	r1, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f925 	bl	8005390 <RCCEx_PLLSAI2_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005160:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	490d      	ldr	r1, [pc, #52]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	4904      	ldr	r1, [pc, #16]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800519a:	7cbb      	ldrb	r3, [r7, #18]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000

080051a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051b6:	4b75      	ldr	r3, [pc, #468]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051c2:	4b72      	ldr	r3, [pc, #456]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0203 	and.w	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d10d      	bne.n	80051ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
       ||
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051da:	4b6c      	ldr	r3, [pc, #432]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
       ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d047      	beq.n	800527e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	e044      	b.n	800527e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d018      	beq.n	800522e <RCCEx_PLLSAI1_Config+0x86>
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d825      	bhi.n	800524c <RCCEx_PLLSAI1_Config+0xa4>
 8005200:	2b01      	cmp	r3, #1
 8005202:	d002      	beq.n	800520a <RCCEx_PLLSAI1_Config+0x62>
 8005204:	2b02      	cmp	r3, #2
 8005206:	d009      	beq.n	800521c <RCCEx_PLLSAI1_Config+0x74>
 8005208:	e020      	b.n	800524c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800520a:	4b60      	ldr	r3, [pc, #384]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11d      	bne.n	8005252 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800521a:	e01a      	b.n	8005252 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800521c:	4b5b      	ldr	r3, [pc, #364]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d116      	bne.n	8005256 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522c:	e013      	b.n	8005256 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800522e:	4b57      	ldr	r3, [pc, #348]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800523a:	4b54      	ldr	r3, [pc, #336]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800524a:	e006      	b.n	800525a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e004      	b.n	800525c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800525a:	bf00      	nop
    }

    if(status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005262:	4b4a      	ldr	r3, [pc, #296]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6819      	ldr	r1, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	430b      	orrs	r3, r1
 8005278:	4944      	ldr	r1, [pc, #272]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d17d      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005284:	4b41      	ldr	r3, [pc, #260]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a40      	ldr	r2, [pc, #256]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800528a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800528e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005290:	f7fc ffd2 	bl	8002238 <HAL_GetTick>
 8005294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005296:	e009      	b.n	80052ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005298:	f7fc ffce 	bl	8002238 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d902      	bls.n	80052ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	73fb      	strb	r3, [r7, #15]
        break;
 80052aa:	e005      	b.n	80052b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052ac:	4b37      	ldr	r3, [pc, #220]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1ef      	bne.n	8005298 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d160      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6892      	ldr	r2, [r2, #8]
 80052d4:	0211      	lsls	r1, r2, #8
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	0912      	lsrs	r2, r2, #4
 80052dc:	0452      	lsls	r2, r2, #17
 80052de:	430a      	orrs	r2, r1
 80052e0:	492a      	ldr	r1, [pc, #168]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	610b      	str	r3, [r1, #16]
 80052e6:	e027      	b.n	8005338 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d112      	bne.n	8005314 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6892      	ldr	r2, [r2, #8]
 80052fe:	0211      	lsls	r1, r2, #8
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6912      	ldr	r2, [r2, #16]
 8005304:	0852      	lsrs	r2, r2, #1
 8005306:	3a01      	subs	r2, #1
 8005308:	0552      	lsls	r2, r2, #21
 800530a:	430a      	orrs	r2, r1
 800530c:	491f      	ldr	r1, [pc, #124]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	610b      	str	r3, [r1, #16]
 8005312:	e011      	b.n	8005338 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005314:	4b1d      	ldr	r3, [pc, #116]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800531c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	0211      	lsls	r1, r2, #8
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6952      	ldr	r2, [r2, #20]
 800532a:	0852      	lsrs	r2, r2, #1
 800532c:	3a01      	subs	r2, #1
 800532e:	0652      	lsls	r2, r2, #25
 8005330:	430a      	orrs	r2, r1
 8005332:	4916      	ldr	r1, [pc, #88]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005334:	4313      	orrs	r3, r2
 8005336:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a13      	ldr	r2, [pc, #76]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800533e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fc ff78 	bl	8002238 <HAL_GetTick>
 8005348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800534a:	e009      	b.n	8005360 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800534c:	f7fc ff74 	bl	8002238 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d902      	bls.n	8005360 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	73fb      	strb	r3, [r7, #15]
          break;
 800535e:	e005      	b.n	800536c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ef      	beq.n	800534c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	4904      	ldr	r1, [pc, #16]	; (800538c <RCCEx_PLLSAI1_Config+0x1e4>)
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000

08005390 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d018      	beq.n	80053dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0203 	and.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d10d      	bne.n	80053d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
       ||
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053c2:	4b61      	ldr	r3, [pc, #388]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
       ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d047      	beq.n	8005466 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e044      	b.n	8005466 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d018      	beq.n	8005416 <RCCEx_PLLSAI2_Config+0x86>
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d825      	bhi.n	8005434 <RCCEx_PLLSAI2_Config+0xa4>
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d002      	beq.n	80053f2 <RCCEx_PLLSAI2_Config+0x62>
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d009      	beq.n	8005404 <RCCEx_PLLSAI2_Config+0x74>
 80053f0:	e020      	b.n	8005434 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053f2:	4b55      	ldr	r3, [pc, #340]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d11d      	bne.n	800543a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005402:	e01a      	b.n	800543a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005404:	4b50      	ldr	r3, [pc, #320]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d116      	bne.n	800543e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005414:	e013      	b.n	800543e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005416:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10f      	bne.n	8005442 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005422:	4b49      	ldr	r3, [pc, #292]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005432:	e006      	b.n	8005442 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      break;
 8005438:	e004      	b.n	8005444 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005442:	bf00      	nop
    }

    if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800544a:	4b3f      	ldr	r3, [pc, #252]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	3b01      	subs	r3, #1
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	430b      	orrs	r3, r1
 8005460:	4939      	ldr	r1, [pc, #228]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005462:	4313      	orrs	r3, r2
 8005464:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d167      	bne.n	800553c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800546c:	4b36      	ldr	r3, [pc, #216]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a35      	ldr	r2, [pc, #212]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fc fede 	bl	8002238 <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800547e:	e009      	b.n	8005494 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005480:	f7fc feda 	bl	8002238 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	73fb      	strb	r3, [r7, #15]
        break;
 8005492:	e005      	b.n	80054a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005494:	4b2c      	ldr	r3, [pc, #176]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ef      	bne.n	8005480 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d14a      	bne.n	800553c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054ac:	4b26      	ldr	r3, [pc, #152]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6892      	ldr	r2, [r2, #8]
 80054bc:	0211      	lsls	r1, r2, #8
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	0912      	lsrs	r2, r2, #4
 80054c4:	0452      	lsls	r2, r2, #17
 80054c6:	430a      	orrs	r2, r1
 80054c8:	491f      	ldr	r1, [pc, #124]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	614b      	str	r3, [r1, #20]
 80054ce:	e011      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6892      	ldr	r2, [r2, #8]
 80054e0:	0211      	lsls	r1, r2, #8
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6912      	ldr	r2, [r2, #16]
 80054e6:	0852      	lsrs	r2, r2, #1
 80054e8:	3a01      	subs	r2, #1
 80054ea:	0652      	lsls	r2, r2, #25
 80054ec:	430a      	orrs	r2, r1
 80054ee:	4916      	ldr	r1, [pc, #88]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a13      	ldr	r2, [pc, #76]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fc fe9a 	bl	8002238 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005506:	e009      	b.n	800551c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005508:	f7fc fe96 	bl	8002238 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	73fb      	strb	r3, [r7, #15]
          break;
 800551a:	e005      	b.n	8005528 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ef      	beq.n	8005508 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005530:	695a      	ldr	r2, [r3, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4904      	ldr	r1, [pc, #16]	; (8005548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005538:	4313      	orrs	r3, r2
 800553a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000

0800554c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e049      	b.n	80055f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fca6 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fdc4 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d001      	beq.n	8005614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e047      	b.n	80056a4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <HAL_TIM_Base_Start+0xb4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_TIM_Base_Start+0x66>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d018      	beq.n	8005662 <HAL_TIM_Base_Start+0x66>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_TIM_Base_Start+0xb8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIM_Base_Start+0x66>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <HAL_TIM_Base_Start+0xbc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIM_Base_Start+0x66>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_TIM_Base_Start+0xc0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_Base_Start+0x66>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_TIM_Base_Start+0xc4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_Base_Start+0x66>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_TIM_Base_Start+0xc8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d115      	bne.n	800568e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <HAL_TIM_Base_Start+0xcc>)
 800566a:	4013      	ands	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d015      	beq.n	80056a0 <HAL_TIM_Base_Start+0xa4>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567a:	d011      	beq.n	80056a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	e008      	b.n	80056a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e000      	b.n	80056a2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	00010007 	.word	0x00010007

080056cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	f241 1311 	movw	r3, #4369	; 0x1111
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10f      	bne.n	8005704 <HAL_TIM_Base_Stop+0x38>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f240 4344 	movw	r3, #1092	; 0x444
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_Base_Stop+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d001      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e04f      	b.n	80057d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a23      	ldr	r2, [pc, #140]	; (80057e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <HAL_TIM_Base_Start_IT+0x76>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d018      	beq.n	8005792 <HAL_TIM_Base_Start_IT+0x76>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_TIM_Base_Start_IT+0x76>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_TIM_Base_Start_IT+0x76>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_TIM_Base_Start_IT+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_TIM_Base_Start_IT+0x76>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIM_Base_Start_IT+0x76>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d115      	bne.n	80057be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800579a:	4013      	ands	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d015      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0xb4>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057aa:	d011      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057bc:	e008      	b.n	80057d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e000      	b.n	80057d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	00010007 	.word	0x00010007

080057fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e049      	b.n	80058a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f841 	bl	80058aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f000 fc6c 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <HAL_TIM_PWM_Start+0x24>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e03c      	b.n	800595e <HAL_TIM_PWM_Start+0x9e>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d109      	bne.n	80058fe <HAL_TIM_PWM_Start+0x3e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	bf14      	ite	ne
 80058f6:	2301      	movne	r3, #1
 80058f8:	2300      	moveq	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	e02f      	b.n	800595e <HAL_TIM_PWM_Start+0x9e>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d109      	bne.n	8005918 <HAL_TIM_PWM_Start+0x58>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	e022      	b.n	800595e <HAL_TIM_PWM_Start+0x9e>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b0c      	cmp	r3, #12
 800591c:	d109      	bne.n	8005932 <HAL_TIM_PWM_Start+0x72>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	bf14      	ite	ne
 800592a:	2301      	movne	r3, #1
 800592c:	2300      	moveq	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e015      	b.n	800595e <HAL_TIM_PWM_Start+0x9e>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b10      	cmp	r3, #16
 8005936:	d109      	bne.n	800594c <HAL_TIM_PWM_Start+0x8c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e008      	b.n	800595e <HAL_TIM_PWM_Start+0x9e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e09c      	b.n	8005aa0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <HAL_TIM_PWM_Start+0xb6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005974:	e023      	b.n	80059be <HAL_TIM_PWM_Start+0xfe>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b04      	cmp	r3, #4
 800597a:	d104      	bne.n	8005986 <HAL_TIM_PWM_Start+0xc6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005984:	e01b      	b.n	80059be <HAL_TIM_PWM_Start+0xfe>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Start+0xd6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005994:	e013      	b.n	80059be <HAL_TIM_PWM_Start+0xfe>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b0c      	cmp	r3, #12
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Start+0xe6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059a4:	e00b      	b.n	80059be <HAL_TIM_PWM_Start+0xfe>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Start+0xf6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059b4:	e003      	b.n	80059be <HAL_TIM_PWM_Start+0xfe>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 ffb0 	bl	800692c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a35      	ldr	r2, [pc, #212]	; (8005aa8 <HAL_TIM_PWM_Start+0x1e8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_TIM_PWM_Start+0x13e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a34      	ldr	r2, [pc, #208]	; (8005aac <HAL_TIM_PWM_Start+0x1ec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIM_PWM_Start+0x13e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a32      	ldr	r2, [pc, #200]	; (8005ab0 <HAL_TIM_PWM_Start+0x1f0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIM_PWM_Start+0x13e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a31      	ldr	r2, [pc, #196]	; (8005ab4 <HAL_TIM_PWM_Start+0x1f4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIM_PWM_Start+0x13e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <HAL_TIM_PWM_Start+0x1f8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_PWM_Start+0x142>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <HAL_TIM_PWM_Start+0x144>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_TIM_PWM_Start+0x1e8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01d      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x19e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2a:	d018      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x19e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a22      	ldr	r2, [pc, #136]	; (8005abc <HAL_TIM_PWM_Start+0x1fc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x19e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <HAL_TIM_PWM_Start+0x200>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x19e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <HAL_TIM_PWM_Start+0x204>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x19e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_TIM_PWM_Start+0x1ec>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x19e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_TIM_PWM_Start+0x1f0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d115      	bne.n	8005a8a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <HAL_TIM_PWM_Start+0x208>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b06      	cmp	r3, #6
 8005a6e:	d015      	beq.n	8005a9c <HAL_TIM_PWM_Start+0x1dc>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a76:	d011      	beq.n	8005a9c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a88:	e008      	b.n	8005a9c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0201 	orr.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e000      	b.n	8005a9e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	00010007 	.word	0x00010007

08005acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d122      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d11b      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0202 	mvn.w	r2, #2
 8005af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fae3 	bl	80060da <HAL_TIM_IC_CaptureCallback>
 8005b14:	e005      	b.n	8005b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fad5 	bl	80060c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fae6 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d122      	bne.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0204 	mvn.w	r2, #4
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fab9 	bl	80060da <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 faab 	bl	80060c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fabc 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0208 	mvn.w	r2, #8
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa8f 	bl	80060da <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa81 	bl	80060c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa92 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0210 	mvn.w	r2, #16
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa65 	bl	80060da <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa57 	bl	80060c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fa68 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0201 	mvn.w	r2, #1
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb fd84 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d10e      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d107      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 ff10 	bl	8006a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8a:	d10e      	bne.n	8005caa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d107      	bne.n	8005caa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 ff03 	bl	8006ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	d10e      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d107      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fa16 	bl	8006102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d10e      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d107      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0220 	mvn.w	r2, #32
 8005cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fec3 	bl	8006a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e0ff      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b14      	cmp	r3, #20
 8005d36:	f200 80f0 	bhi.w	8005f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005f1b 	.word	0x08005f1b
 8005d48:	08005f1b 	.word	0x08005f1b
 8005d4c:	08005f1b 	.word	0x08005f1b
 8005d50:	08005dd5 	.word	0x08005dd5
 8005d54:	08005f1b 	.word	0x08005f1b
 8005d58:	08005f1b 	.word	0x08005f1b
 8005d5c:	08005f1b 	.word	0x08005f1b
 8005d60:	08005e17 	.word	0x08005e17
 8005d64:	08005f1b 	.word	0x08005f1b
 8005d68:	08005f1b 	.word	0x08005f1b
 8005d6c:	08005f1b 	.word	0x08005f1b
 8005d70:	08005e57 	.word	0x08005e57
 8005d74:	08005f1b 	.word	0x08005f1b
 8005d78:	08005f1b 	.word	0x08005f1b
 8005d7c:	08005f1b 	.word	0x08005f1b
 8005d80:	08005e99 	.word	0x08005e99
 8005d84:	08005f1b 	.word	0x08005f1b
 8005d88:	08005f1b 	.word	0x08005f1b
 8005d8c:	08005f1b 	.word	0x08005f1b
 8005d90:	08005ed9 	.word	0x08005ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fa56 	bl	800624c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0208 	orr.w	r2, r2, #8
 8005dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	619a      	str	r2, [r3, #24]
      break;
 8005dd2:	e0a5      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fac6 	bl	800636c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	021a      	lsls	r2, r3, #8
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
      break;
 8005e14:	e084      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fb2f 	bl	8006480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0208 	orr.w	r2, r2, #8
 8005e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0204 	bic.w	r2, r2, #4
 8005e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69d9      	ldr	r1, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	61da      	str	r2, [r3, #28]
      break;
 8005e54:	e064      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fb97 	bl	8006590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	021a      	lsls	r2, r3, #8
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	61da      	str	r2, [r3, #28]
      break;
 8005e96:	e043      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fbe0 	bl	8006664 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0208 	orr.w	r2, r2, #8
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0204 	bic.w	r2, r2, #4
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ed6:	e023      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc24 	bl	800672c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f18:	e002      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop

08005f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIM_ConfigClockSource+0x1c>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e0b6      	b.n	80060be <HAL_TIM_ConfigClockSource+0x18a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8c:	d03e      	beq.n	800600c <HAL_TIM_ConfigClockSource+0xd8>
 8005f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f92:	f200 8087 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9a:	f000 8086 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x176>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d87f      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fa4:	2b70      	cmp	r3, #112	; 0x70
 8005fa6:	d01a      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0xaa>
 8005fa8:	2b70      	cmp	r3, #112	; 0x70
 8005faa:	d87b      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fac:	2b60      	cmp	r3, #96	; 0x60
 8005fae:	d050      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x11e>
 8005fb0:	2b60      	cmp	r3, #96	; 0x60
 8005fb2:	d877      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fb4:	2b50      	cmp	r3, #80	; 0x50
 8005fb6:	d03c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0xfe>
 8005fb8:	2b50      	cmp	r3, #80	; 0x50
 8005fba:	d873      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fbc:	2b40      	cmp	r3, #64	; 0x40
 8005fbe:	d058      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x13e>
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d86f      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b30      	cmp	r3, #48	; 0x30
 8005fc6:	d064      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15e>
 8005fc8:	2b30      	cmp	r3, #48	; 0x30
 8005fca:	d86b      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d060      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15e>
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d867      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05c      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15e>
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d05a      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15e>
 8005fdc:	e062      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f000 fc7d 	bl	80068ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	609a      	str	r2, [r3, #8]
      break;
 800600a:	e04f      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6899      	ldr	r1, [r3, #8]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f000 fc66 	bl	80068ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800602e:	609a      	str	r2, [r3, #8]
      break;
 8006030:	e03c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	f000 fbda 	bl	80067f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2150      	movs	r1, #80	; 0x50
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fc33 	bl	80068b6 <TIM_ITRx_SetConfig>
      break;
 8006050:	e02c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fbf9 	bl	8006856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2160      	movs	r1, #96	; 0x60
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc23 	bl	80068b6 <TIM_ITRx_SetConfig>
      break;
 8006070:	e01c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	461a      	mov	r2, r3
 8006080:	f000 fbba 	bl	80067f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fc13 	bl	80068b6 <TIM_ITRx_SetConfig>
      break;
 8006090:	e00c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f000 fc0a 	bl	80068b6 <TIM_ITRx_SetConfig>
      break;
 80060a2:	e003      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
      break;
 80060a8:	e000      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a40      	ldr	r2, [pc, #256]	; (800622c <TIM_Base_SetConfig+0x114>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006136:	d00f      	beq.n	8006158 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a3d      	ldr	r2, [pc, #244]	; (8006230 <TIM_Base_SetConfig+0x118>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00b      	beq.n	8006158 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a3c      	ldr	r2, [pc, #240]	; (8006234 <TIM_Base_SetConfig+0x11c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d007      	beq.n	8006158 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a3b      	ldr	r2, [pc, #236]	; (8006238 <TIM_Base_SetConfig+0x120>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3a      	ldr	r2, [pc, #232]	; (800623c <TIM_Base_SetConfig+0x124>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d108      	bne.n	800616a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2f      	ldr	r2, [pc, #188]	; (800622c <TIM_Base_SetConfig+0x114>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01f      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006178:	d01b      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <TIM_Base_SetConfig+0x118>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d017      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <TIM_Base_SetConfig+0x11c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2a      	ldr	r2, [pc, #168]	; (8006238 <TIM_Base_SetConfig+0x120>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00f      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a29      	ldr	r2, [pc, #164]	; (800623c <TIM_Base_SetConfig+0x124>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00b      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a28      	ldr	r2, [pc, #160]	; (8006240 <TIM_Base_SetConfig+0x128>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a27      	ldr	r2, [pc, #156]	; (8006244 <TIM_Base_SetConfig+0x12c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_Base_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a26      	ldr	r2, [pc, #152]	; (8006248 <TIM_Base_SetConfig+0x130>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d108      	bne.n	80061c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a10      	ldr	r2, [pc, #64]	; (800622c <TIM_Base_SetConfig+0x114>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0xf8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a12      	ldr	r2, [pc, #72]	; (800623c <TIM_Base_SetConfig+0x124>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0xf8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a11      	ldr	r2, [pc, #68]	; (8006240 <TIM_Base_SetConfig+0x128>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0xf8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a10      	ldr	r2, [pc, #64]	; (8006244 <TIM_Base_SetConfig+0x12c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0xf8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a0f      	ldr	r2, [pc, #60]	; (8006248 <TIM_Base_SetConfig+0x130>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d103      	bne.n	8006218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	615a      	str	r2, [r3, #20]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800
 8006238:	40000c00 	.word	0x40000c00
 800623c:	40013400 	.word	0x40013400
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800

0800624c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f023 0201 	bic.w	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f023 0302 	bic.w	r3, r3, #2
 8006298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <TIM_OC1_SetConfig+0x10c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00f      	beq.n	80062cc <TIM_OC1_SetConfig+0x80>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a2b      	ldr	r2, [pc, #172]	; (800635c <TIM_OC1_SetConfig+0x110>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00b      	beq.n	80062cc <TIM_OC1_SetConfig+0x80>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <TIM_OC1_SetConfig+0x114>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d007      	beq.n	80062cc <TIM_OC1_SetConfig+0x80>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a29      	ldr	r2, [pc, #164]	; (8006364 <TIM_OC1_SetConfig+0x118>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_OC1_SetConfig+0x80>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a28      	ldr	r2, [pc, #160]	; (8006368 <TIM_OC1_SetConfig+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10c      	bne.n	80062e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0308 	bic.w	r3, r3, #8
 80062d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1b      	ldr	r2, [pc, #108]	; (8006358 <TIM_OC1_SetConfig+0x10c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00f      	beq.n	800630e <TIM_OC1_SetConfig+0xc2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1a      	ldr	r2, [pc, #104]	; (800635c <TIM_OC1_SetConfig+0x110>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_OC1_SetConfig+0xc2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a19      	ldr	r2, [pc, #100]	; (8006360 <TIM_OC1_SetConfig+0x114>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_OC1_SetConfig+0xc2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <TIM_OC1_SetConfig+0x118>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC1_SetConfig+0xc2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a17      	ldr	r2, [pc, #92]	; (8006368 <TIM_OC1_SetConfig+0x11c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d111      	bne.n	8006332 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40013400 	.word	0x40013400
 8006360:	40014000 	.word	0x40014000
 8006364:	40014400 	.word	0x40014400
 8006368:	40014800 	.word	0x40014800

0800636c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f023 0210 	bic.w	r2, r3, #16
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0320 	bic.w	r3, r3, #32
 80063ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a28      	ldr	r2, [pc, #160]	; (800646c <TIM_OC2_SetConfig+0x100>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_OC2_SetConfig+0x6c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a27      	ldr	r2, [pc, #156]	; (8006470 <TIM_OC2_SetConfig+0x104>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d10d      	bne.n	80063f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a1d      	ldr	r2, [pc, #116]	; (800646c <TIM_OC2_SetConfig+0x100>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00f      	beq.n	800641c <TIM_OC2_SetConfig+0xb0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a1c      	ldr	r2, [pc, #112]	; (8006470 <TIM_OC2_SetConfig+0x104>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_OC2_SetConfig+0xb0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <TIM_OC2_SetConfig+0x108>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_OC2_SetConfig+0xb0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a1a      	ldr	r2, [pc, #104]	; (8006478 <TIM_OC2_SetConfig+0x10c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC2_SetConfig+0xb0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <TIM_OC2_SetConfig+0x110>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d113      	bne.n	8006444 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40014000 	.word	0x40014000
 8006478:	40014400 	.word	0x40014400
 800647c:	40014800 	.word	0x40014800

08006480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a27      	ldr	r2, [pc, #156]	; (800657c <TIM_OC3_SetConfig+0xfc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_OC3_SetConfig+0x6a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <TIM_OC3_SetConfig+0x100>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10d      	bne.n	8006506 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1c      	ldr	r2, [pc, #112]	; (800657c <TIM_OC3_SetConfig+0xfc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <TIM_OC3_SetConfig+0xae>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <TIM_OC3_SetConfig+0x100>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_OC3_SetConfig+0xae>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <TIM_OC3_SetConfig+0x104>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_OC3_SetConfig+0xae>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a19      	ldr	r2, [pc, #100]	; (8006588 <TIM_OC3_SetConfig+0x108>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_OC3_SetConfig+0xae>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a18      	ldr	r2, [pc, #96]	; (800658c <TIM_OC3_SetConfig+0x10c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d113      	bne.n	8006556 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a18      	ldr	r2, [pc, #96]	; (8006650 <TIM_OC4_SetConfig+0xc0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00f      	beq.n	8006614 <TIM_OC4_SetConfig+0x84>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <TIM_OC4_SetConfig+0xc4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00b      	beq.n	8006614 <TIM_OC4_SetConfig+0x84>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a16      	ldr	r2, [pc, #88]	; (8006658 <TIM_OC4_SetConfig+0xc8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_OC4_SetConfig+0x84>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a15      	ldr	r2, [pc, #84]	; (800665c <TIM_OC4_SetConfig+0xcc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC4_SetConfig+0x84>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a14      	ldr	r2, [pc, #80]	; (8006660 <TIM_OC4_SetConfig+0xd0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d109      	bne.n	8006628 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800661a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	019b      	lsls	r3, r3, #6
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40014000 	.word	0x40014000
 800665c:	40014400 	.word	0x40014400
 8006660:	40014800 	.word	0x40014800

08006664 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <TIM_OC5_SetConfig+0xb4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00f      	beq.n	80066de <TIM_OC5_SetConfig+0x7a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a16      	ldr	r2, [pc, #88]	; (800671c <TIM_OC5_SetConfig+0xb8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00b      	beq.n	80066de <TIM_OC5_SetConfig+0x7a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <TIM_OC5_SetConfig+0xbc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_OC5_SetConfig+0x7a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a14      	ldr	r2, [pc, #80]	; (8006724 <TIM_OC5_SetConfig+0xc0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC5_SetConfig+0x7a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a13      	ldr	r2, [pc, #76]	; (8006728 <TIM_OC5_SetConfig+0xc4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d109      	bne.n	80066f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	621a      	str	r2, [r3, #32]
}
 800670c:	bf00      	nop
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800

0800672c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	051b      	lsls	r3, r3, #20
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <TIM_OC6_SetConfig+0xb8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00f      	beq.n	80067a8 <TIM_OC6_SetConfig+0x7c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <TIM_OC6_SetConfig+0xbc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00b      	beq.n	80067a8 <TIM_OC6_SetConfig+0x7c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a16      	ldr	r2, [pc, #88]	; (80067ec <TIM_OC6_SetConfig+0xc0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d007      	beq.n	80067a8 <TIM_OC6_SetConfig+0x7c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <TIM_OC6_SetConfig+0xc4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_OC6_SetConfig+0x7c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <TIM_OC6_SetConfig+0xc8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d109      	bne.n	80067bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40013400 	.word	0x40013400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800

080067f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 030a 	bic.w	r3, r3, #10
 8006834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	621a      	str	r2, [r3, #32]
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006856:	b480      	push	{r7}
 8006858:	b087      	sub	sp, #28
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0210 	bic.w	r2, r3, #16
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f043 0307 	orr.w	r3, r3, #7
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	609a      	str	r2, [r3, #8]
}
 80068e0:	bf00      	nop
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	021a      	lsls	r2, r3, #8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	431a      	orrs	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4313      	orrs	r3, r2
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	2201      	movs	r2, #1
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1a      	ldr	r2, [r3, #32]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	43db      	mvns	r3, r3
 800694e:	401a      	ands	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1a      	ldr	r2, [r3, #32]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800698c:	2302      	movs	r3, #2
 800698e:	e068      	b.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a2e      	ldr	r2, [pc, #184]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2d      	ldr	r2, [pc, #180]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d108      	bne.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01d      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d018      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00e      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a14      	ldr	r2, [pc, #80]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d10c      	bne.n	8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40014000 	.word	0x40014000

08006a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e040      	b.n	8006b58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fb faa8 	bl	800203c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2224      	movs	r2, #36	; 0x24
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0201 	bic.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fc18 	bl	8007338 <UART_SetConfig>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e022      	b.n	8006b58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fe96 	bl	800784c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 ff1d 	bl	8007990 <UART_CheckIdleState>
 8006b56:	4603      	mov	r3, r0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	f040 8082 	bne.w	8006c7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_UART_Transmit+0x26>
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e07a      	b.n	8006c80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_UART_Transmit+0x38>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e073      	b.n	8006c80 <HAL_UART_Transmit+0x120>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2221      	movs	r2, #33	; 0x21
 8006bac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bae:	f7fb fb43 	bl	8002238 <HAL_GetTick>
 8006bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	88fa      	ldrh	r2, [r7, #6]
 8006bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bcc:	d108      	bne.n	8006be0 <HAL_UART_Transmit+0x80>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e003      	b.n	8006be8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006bf0:	e02d      	b.n	8006c4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 ff10 	bl	8007a22 <UART_WaitOnFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e039      	b.n	8006c80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	881a      	ldrh	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c1e:	b292      	uxth	r2, r2
 8006c20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	3302      	adds	r3, #2
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	e008      	b.n	8006c3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	781a      	ldrb	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b292      	uxth	r2, r2
 8006c34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1cb      	bne.n	8006bf2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2140      	movs	r1, #64	; 0x40
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fedc 	bl	8007a22 <UART_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e005      	b.n	8006c80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e000      	b.n	8006c80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006c7e:	2302      	movs	r3, #2
  }
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d142      	bne.n	8006d24 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <HAL_UART_Receive_IT+0x22>
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e03b      	b.n	8006d26 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Receive_IT+0x34>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e034      	b.n	8006d26 <HAL_UART_Receive_IT+0x9e>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <HAL_UART_Receive_IT+0xa8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01f      	beq.n	8006d14 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d018      	beq.n	8006d14 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69f9      	ldr	r1, [r7, #28]
 8006d06:	6a3a      	ldr	r2, [r7, #32]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	461a      	mov	r2, r3
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 ff46 	bl	8007bac <UART_Start_Receive_IT>
 8006d20:	4603      	mov	r3, r0
 8006d22:	e000      	b.n	8006d26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3728      	adds	r7, #40	; 0x28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40008000 	.word	0x40008000

08006d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b0ba      	sub	sp, #232	; 0xe8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d62:	4013      	ands	r3, r2
 8006d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d115      	bne.n	8006d9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00f      	beq.n	8006d9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 82a6 	beq.w	80072de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
      }
      return;
 8006d9a:	e2a0      	b.n	80072de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8117 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006db2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006db6:	4b85      	ldr	r3, [pc, #532]	; (8006fcc <HAL_UART_IRQHandler+0x298>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 810a 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <HAL_UART_IRQHandler+0xbc>
 8006dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d011      	beq.n	8006e20 <HAL_UART_IRQHandler+0xec>
 8006dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e16:	f043 0204 	orr.w	r2, r3, #4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d011      	beq.n	8006e50 <HAL_UART_IRQHandler+0x11c>
 8006e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e46:	f043 0202 	orr.w	r2, r3, #2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d017      	beq.n	8006e8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d105      	bne.n	8006e74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2208      	movs	r2, #8
 8006e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e82:	f043 0208 	orr.w	r2, r3, #8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d012      	beq.n	8006ebe <HAL_UART_IRQHandler+0x18a>
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00c      	beq.n	8006ebe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 820c 	beq.w	80072e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04f      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 ff12 	bl	8007d40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d141      	bne.n	8006fae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1d9      	bne.n	8006f2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d013      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	4a13      	ldr	r2, [pc, #76]	; (8006fd0 <HAL_UART_IRQHandler+0x29c>)
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fc fcd8 	bl	8003940 <HAL_DMA_Abort_IT>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	e00f      	b.n	8006fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9b0 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	e00b      	b.n	8006fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9ac 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	e007      	b.n	8006fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f9a8 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006fc4:	e18d      	b.n	80072e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	bf00      	nop
    return;
 8006fc8:	e18b      	b.n	80072e2 <HAL_UART_IRQHandler+0x5ae>
 8006fca:	bf00      	nop
 8006fcc:	04000120 	.word	0x04000120
 8006fd0:	08007e07 	.word	0x08007e07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	f040 8146 	bne.w	800726a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 813f 	beq.w	800726a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8138 	beq.w	800726a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2210      	movs	r2, #16
 8007000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	f040 80b4 	bne.w	800717a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800701e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 815f 	beq.w	80072e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800702e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007032:	429a      	cmp	r2, r3
 8007034:	f080 8157 	bcs.w	80072e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800703e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8085 	bne.w	800715e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800707e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007082:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800708a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1da      	bne.n	8007054 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e1      	bne.n	800709e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800710c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e3      	bne.n	80070da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	f023 0310 	bic.w	r3, r3, #16
 8007132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007140:	65bb      	str	r3, [r7, #88]	; 0x58
 8007142:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800714e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e4      	bne.n	800711e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	4618      	mov	r0, r3
 800715a:	f7fc fbb3 	bl	80038c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800716a:	b29b      	uxth	r3, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f8d4 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007178:	e0b5      	b.n	80072e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007186:	b29b      	uxth	r3, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80a7 	beq.w	80072ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800719c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80a2 	beq.w	80072ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071c8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	623b      	str	r3, [r7, #32]
   return(result);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007200:	633a      	str	r2, [r7, #48]	; 0x30
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60fb      	str	r3, [r7, #12]
   return(result);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	617b      	str	r3, [r7, #20]
   return(result);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800725c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f85c 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007268:	e03f      	b.n	80072ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <HAL_UART_IRQHandler+0x560>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800727a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800728a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 ff5a 	bl	8008146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007292:	e02d      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00e      	beq.n	80072be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
    }
    return;
 80072bc:	e017      	b.n	80072ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d012      	beq.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
 80072ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fdab 	bl	8007e32 <UART_EndTransmit_IT>
    return;
 80072dc:	e008      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072de:	bf00      	nop
 80072e0:	e006      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80072e2:	bf00      	nop
 80072e4:	e004      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80072ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072f0:	37e8      	adds	r7, #232	; 0xe8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop

080072f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	b5b0      	push	{r4, r5, r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	4313      	orrs	r3, r2
 800735a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4bad      	ldr	r3, [pc, #692]	; (8007618 <UART_SetConfig+0x2e0>)
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	69f9      	ldr	r1, [r7, #28]
 800736c:	430b      	orrs	r3, r1
 800736e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4aa2      	ldr	r2, [pc, #648]	; (800761c <UART_SetConfig+0x2e4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	4313      	orrs	r3, r2
 800739e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a99      	ldr	r2, [pc, #612]	; (8007620 <UART_SetConfig+0x2e8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d121      	bne.n	8007402 <UART_SetConfig+0xca>
 80073be:	4b99      	ldr	r3, [pc, #612]	; (8007624 <UART_SetConfig+0x2ec>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d817      	bhi.n	80073fc <UART_SetConfig+0xc4>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x9c>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	080073eb 	.word	0x080073eb
 80073e0:	080073f7 	.word	0x080073f7
 80073e4:	2301      	movs	r3, #1
 80073e6:	76fb      	strb	r3, [r7, #27]
 80073e8:	e0e7      	b.n	80075ba <UART_SetConfig+0x282>
 80073ea:	2302      	movs	r3, #2
 80073ec:	76fb      	strb	r3, [r7, #27]
 80073ee:	e0e4      	b.n	80075ba <UART_SetConfig+0x282>
 80073f0:	2304      	movs	r3, #4
 80073f2:	76fb      	strb	r3, [r7, #27]
 80073f4:	e0e1      	b.n	80075ba <UART_SetConfig+0x282>
 80073f6:	2308      	movs	r3, #8
 80073f8:	76fb      	strb	r3, [r7, #27]
 80073fa:	e0de      	b.n	80075ba <UART_SetConfig+0x282>
 80073fc:	2310      	movs	r3, #16
 80073fe:	76fb      	strb	r3, [r7, #27]
 8007400:	e0db      	b.n	80075ba <UART_SetConfig+0x282>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a88      	ldr	r2, [pc, #544]	; (8007628 <UART_SetConfig+0x2f0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d132      	bne.n	8007472 <UART_SetConfig+0x13a>
 800740c:	4b85      	ldr	r3, [pc, #532]	; (8007624 <UART_SetConfig+0x2ec>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	f003 030c 	and.w	r3, r3, #12
 8007416:	2b0c      	cmp	r3, #12
 8007418:	d828      	bhi.n	800746c <UART_SetConfig+0x134>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0xe8>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007455 	.word	0x08007455
 8007424:	0800746d 	.word	0x0800746d
 8007428:	0800746d 	.word	0x0800746d
 800742c:	0800746d 	.word	0x0800746d
 8007430:	08007461 	.word	0x08007461
 8007434:	0800746d 	.word	0x0800746d
 8007438:	0800746d 	.word	0x0800746d
 800743c:	0800746d 	.word	0x0800746d
 8007440:	0800745b 	.word	0x0800745b
 8007444:	0800746d 	.word	0x0800746d
 8007448:	0800746d 	.word	0x0800746d
 800744c:	0800746d 	.word	0x0800746d
 8007450:	08007467 	.word	0x08007467
 8007454:	2300      	movs	r3, #0
 8007456:	76fb      	strb	r3, [r7, #27]
 8007458:	e0af      	b.n	80075ba <UART_SetConfig+0x282>
 800745a:	2302      	movs	r3, #2
 800745c:	76fb      	strb	r3, [r7, #27]
 800745e:	e0ac      	b.n	80075ba <UART_SetConfig+0x282>
 8007460:	2304      	movs	r3, #4
 8007462:	76fb      	strb	r3, [r7, #27]
 8007464:	e0a9      	b.n	80075ba <UART_SetConfig+0x282>
 8007466:	2308      	movs	r3, #8
 8007468:	76fb      	strb	r3, [r7, #27]
 800746a:	e0a6      	b.n	80075ba <UART_SetConfig+0x282>
 800746c:	2310      	movs	r3, #16
 800746e:	76fb      	strb	r3, [r7, #27]
 8007470:	e0a3      	b.n	80075ba <UART_SetConfig+0x282>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a6d      	ldr	r2, [pc, #436]	; (800762c <UART_SetConfig+0x2f4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d120      	bne.n	80074be <UART_SetConfig+0x186>
 800747c:	4b69      	ldr	r3, [pc, #420]	; (8007624 <UART_SetConfig+0x2ec>)
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007486:	2b30      	cmp	r3, #48	; 0x30
 8007488:	d013      	beq.n	80074b2 <UART_SetConfig+0x17a>
 800748a:	2b30      	cmp	r3, #48	; 0x30
 800748c:	d814      	bhi.n	80074b8 <UART_SetConfig+0x180>
 800748e:	2b20      	cmp	r3, #32
 8007490:	d009      	beq.n	80074a6 <UART_SetConfig+0x16e>
 8007492:	2b20      	cmp	r3, #32
 8007494:	d810      	bhi.n	80074b8 <UART_SetConfig+0x180>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UART_SetConfig+0x168>
 800749a:	2b10      	cmp	r3, #16
 800749c:	d006      	beq.n	80074ac <UART_SetConfig+0x174>
 800749e:	e00b      	b.n	80074b8 <UART_SetConfig+0x180>
 80074a0:	2300      	movs	r3, #0
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	e089      	b.n	80075ba <UART_SetConfig+0x282>
 80074a6:	2302      	movs	r3, #2
 80074a8:	76fb      	strb	r3, [r7, #27]
 80074aa:	e086      	b.n	80075ba <UART_SetConfig+0x282>
 80074ac:	2304      	movs	r3, #4
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	e083      	b.n	80075ba <UART_SetConfig+0x282>
 80074b2:	2308      	movs	r3, #8
 80074b4:	76fb      	strb	r3, [r7, #27]
 80074b6:	e080      	b.n	80075ba <UART_SetConfig+0x282>
 80074b8:	2310      	movs	r3, #16
 80074ba:	76fb      	strb	r3, [r7, #27]
 80074bc:	e07d      	b.n	80075ba <UART_SetConfig+0x282>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a5b      	ldr	r2, [pc, #364]	; (8007630 <UART_SetConfig+0x2f8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d120      	bne.n	800750a <UART_SetConfig+0x1d2>
 80074c8:	4b56      	ldr	r3, [pc, #344]	; (8007624 <UART_SetConfig+0x2ec>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074d2:	2bc0      	cmp	r3, #192	; 0xc0
 80074d4:	d013      	beq.n	80074fe <UART_SetConfig+0x1c6>
 80074d6:	2bc0      	cmp	r3, #192	; 0xc0
 80074d8:	d814      	bhi.n	8007504 <UART_SetConfig+0x1cc>
 80074da:	2b80      	cmp	r3, #128	; 0x80
 80074dc:	d009      	beq.n	80074f2 <UART_SetConfig+0x1ba>
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d810      	bhi.n	8007504 <UART_SetConfig+0x1cc>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <UART_SetConfig+0x1b4>
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d006      	beq.n	80074f8 <UART_SetConfig+0x1c0>
 80074ea:	e00b      	b.n	8007504 <UART_SetConfig+0x1cc>
 80074ec:	2300      	movs	r3, #0
 80074ee:	76fb      	strb	r3, [r7, #27]
 80074f0:	e063      	b.n	80075ba <UART_SetConfig+0x282>
 80074f2:	2302      	movs	r3, #2
 80074f4:	76fb      	strb	r3, [r7, #27]
 80074f6:	e060      	b.n	80075ba <UART_SetConfig+0x282>
 80074f8:	2304      	movs	r3, #4
 80074fa:	76fb      	strb	r3, [r7, #27]
 80074fc:	e05d      	b.n	80075ba <UART_SetConfig+0x282>
 80074fe:	2308      	movs	r3, #8
 8007500:	76fb      	strb	r3, [r7, #27]
 8007502:	e05a      	b.n	80075ba <UART_SetConfig+0x282>
 8007504:	2310      	movs	r3, #16
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e057      	b.n	80075ba <UART_SetConfig+0x282>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a49      	ldr	r2, [pc, #292]	; (8007634 <UART_SetConfig+0x2fc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d125      	bne.n	8007560 <UART_SetConfig+0x228>
 8007514:	4b43      	ldr	r3, [pc, #268]	; (8007624 <UART_SetConfig+0x2ec>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007522:	d017      	beq.n	8007554 <UART_SetConfig+0x21c>
 8007524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007528:	d817      	bhi.n	800755a <UART_SetConfig+0x222>
 800752a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752e:	d00b      	beq.n	8007548 <UART_SetConfig+0x210>
 8007530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007534:	d811      	bhi.n	800755a <UART_SetConfig+0x222>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <UART_SetConfig+0x20a>
 800753a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753e:	d006      	beq.n	800754e <UART_SetConfig+0x216>
 8007540:	e00b      	b.n	800755a <UART_SetConfig+0x222>
 8007542:	2300      	movs	r3, #0
 8007544:	76fb      	strb	r3, [r7, #27]
 8007546:	e038      	b.n	80075ba <UART_SetConfig+0x282>
 8007548:	2302      	movs	r3, #2
 800754a:	76fb      	strb	r3, [r7, #27]
 800754c:	e035      	b.n	80075ba <UART_SetConfig+0x282>
 800754e:	2304      	movs	r3, #4
 8007550:	76fb      	strb	r3, [r7, #27]
 8007552:	e032      	b.n	80075ba <UART_SetConfig+0x282>
 8007554:	2308      	movs	r3, #8
 8007556:	76fb      	strb	r3, [r7, #27]
 8007558:	e02f      	b.n	80075ba <UART_SetConfig+0x282>
 800755a:	2310      	movs	r3, #16
 800755c:	76fb      	strb	r3, [r7, #27]
 800755e:	e02c      	b.n	80075ba <UART_SetConfig+0x282>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a2d      	ldr	r2, [pc, #180]	; (800761c <UART_SetConfig+0x2e4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d125      	bne.n	80075b6 <UART_SetConfig+0x27e>
 800756a:	4b2e      	ldr	r3, [pc, #184]	; (8007624 <UART_SetConfig+0x2ec>)
 800756c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007578:	d017      	beq.n	80075aa <UART_SetConfig+0x272>
 800757a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800757e:	d817      	bhi.n	80075b0 <UART_SetConfig+0x278>
 8007580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007584:	d00b      	beq.n	800759e <UART_SetConfig+0x266>
 8007586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758a:	d811      	bhi.n	80075b0 <UART_SetConfig+0x278>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <UART_SetConfig+0x260>
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007594:	d006      	beq.n	80075a4 <UART_SetConfig+0x26c>
 8007596:	e00b      	b.n	80075b0 <UART_SetConfig+0x278>
 8007598:	2300      	movs	r3, #0
 800759a:	76fb      	strb	r3, [r7, #27]
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x282>
 800759e:	2302      	movs	r3, #2
 80075a0:	76fb      	strb	r3, [r7, #27]
 80075a2:	e00a      	b.n	80075ba <UART_SetConfig+0x282>
 80075a4:	2304      	movs	r3, #4
 80075a6:	76fb      	strb	r3, [r7, #27]
 80075a8:	e007      	b.n	80075ba <UART_SetConfig+0x282>
 80075aa:	2308      	movs	r3, #8
 80075ac:	76fb      	strb	r3, [r7, #27]
 80075ae:	e004      	b.n	80075ba <UART_SetConfig+0x282>
 80075b0:	2310      	movs	r3, #16
 80075b2:	76fb      	strb	r3, [r7, #27]
 80075b4:	e001      	b.n	80075ba <UART_SetConfig+0x282>
 80075b6:	2310      	movs	r3, #16
 80075b8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <UART_SetConfig+0x2e4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	f040 8087 	bne.w	80076d4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075c6:	7efb      	ldrb	r3, [r7, #27]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d837      	bhi.n	800763c <UART_SetConfig+0x304>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <UART_SetConfig+0x29c>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	08007601 	.word	0x08007601
 80075e0:	0800763d 	.word	0x0800763d
 80075e4:	08007607 	.word	0x08007607
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	0800763d 	.word	0x0800763d
 80075f0:	0800763d 	.word	0x0800763d
 80075f4:	0800760f 	.word	0x0800760f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f8:	f7fd fa60 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80075fc:	6178      	str	r0, [r7, #20]
        break;
 80075fe:	e022      	b.n	8007646 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <UART_SetConfig+0x300>)
 8007602:	617b      	str	r3, [r7, #20]
        break;
 8007604:	e01f      	b.n	8007646 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007606:	f7fd f9c1 	bl	800498c <HAL_RCC_GetSysClockFreq>
 800760a:	6178      	str	r0, [r7, #20]
        break;
 800760c:	e01b      	b.n	8007646 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007612:	617b      	str	r3, [r7, #20]
        break;
 8007614:	e017      	b.n	8007646 <UART_SetConfig+0x30e>
 8007616:	bf00      	nop
 8007618:	efff69f3 	.word	0xefff69f3
 800761c:	40008000 	.word	0x40008000
 8007620:	40013800 	.word	0x40013800
 8007624:	40021000 	.word	0x40021000
 8007628:	40004400 	.word	0x40004400
 800762c:	40004800 	.word	0x40004800
 8007630:	40004c00 	.word	0x40004c00
 8007634:	40005000 	.word	0x40005000
 8007638:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	76bb      	strb	r3, [r7, #26]
        break;
 8007644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80f1 	beq.w	8007830 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	429a      	cmp	r2, r3
 800765c:	d305      	bcc.n	800766a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	429a      	cmp	r2, r3
 8007668:	d902      	bls.n	8007670 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	76bb      	strb	r3, [r7, #26]
 800766e:	e0df      	b.n	8007830 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4618      	mov	r0, r3
 8007674:	f04f 0100 	mov.w	r1, #0
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	020b      	lsls	r3, r1, #8
 8007682:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007686:	0202      	lsls	r2, r0, #8
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	6849      	ldr	r1, [r1, #4]
 800768c:	0849      	lsrs	r1, r1, #1
 800768e:	4608      	mov	r0, r1
 8007690:	f04f 0100 	mov.w	r1, #0
 8007694:	1814      	adds	r4, r2, r0
 8007696:	eb43 0501 	adc.w	r5, r3, r1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	461a      	mov	r2, r3
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f9 fa7e 	bl	8000ba8 <__aeabi_uldivmod>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4613      	mov	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ba:	d308      	bcc.n	80076ce <UART_SetConfig+0x396>
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c2:	d204      	bcs.n	80076ce <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	60da      	str	r2, [r3, #12]
 80076cc:	e0b0      	b.n	8007830 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	76bb      	strb	r3, [r7, #26]
 80076d2:	e0ad      	b.n	8007830 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076dc:	d15b      	bne.n	8007796 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80076de:	7efb      	ldrb	r3, [r7, #27]
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d828      	bhi.n	8007736 <UART_SetConfig+0x3fe>
 80076e4:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0x3b4>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007711 	.word	0x08007711
 80076f0:	08007719 	.word	0x08007719
 80076f4:	08007721 	.word	0x08007721
 80076f8:	08007737 	.word	0x08007737
 80076fc:	08007727 	.word	0x08007727
 8007700:	08007737 	.word	0x08007737
 8007704:	08007737 	.word	0x08007737
 8007708:	08007737 	.word	0x08007737
 800770c:	0800772f 	.word	0x0800772f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007710:	f7fd f9d4 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8007714:	6178      	str	r0, [r7, #20]
        break;
 8007716:	e013      	b.n	8007740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007718:	f7fd f9e6 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 800771c:	6178      	str	r0, [r7, #20]
        break;
 800771e:	e00f      	b.n	8007740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007720:	4b49      	ldr	r3, [pc, #292]	; (8007848 <UART_SetConfig+0x510>)
 8007722:	617b      	str	r3, [r7, #20]
        break;
 8007724:	e00c      	b.n	8007740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007726:	f7fd f931 	bl	800498c <HAL_RCC_GetSysClockFreq>
 800772a:	6178      	str	r0, [r7, #20]
        break;
 800772c:	e008      	b.n	8007740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007732:	617b      	str	r3, [r7, #20]
        break;
 8007734:	e004      	b.n	8007740 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	76bb      	strb	r3, [r7, #26]
        break;
 800773e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d074      	beq.n	8007830 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	005a      	lsls	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	441a      	add	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	fbb2 f3f3 	udiv	r3, r2, r3
 800775a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d916      	bls.n	8007790 <UART_SetConfig+0x458>
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d212      	bcs.n	8007790 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	b29b      	uxth	r3, r3
 800776e:	f023 030f 	bic.w	r3, r3, #15
 8007772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	b29a      	uxth	r2, r3
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	4313      	orrs	r3, r2
 8007784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	89fa      	ldrh	r2, [r7, #14]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	e04f      	b.n	8007830 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	76bb      	strb	r3, [r7, #26]
 8007794:	e04c      	b.n	8007830 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007796:	7efb      	ldrb	r3, [r7, #27]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d828      	bhi.n	80077ee <UART_SetConfig+0x4b6>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x46c>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077d1 	.word	0x080077d1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077ef 	.word	0x080077ef
 80077b4:	080077df 	.word	0x080077df
 80077b8:	080077ef 	.word	0x080077ef
 80077bc:	080077ef 	.word	0x080077ef
 80077c0:	080077ef 	.word	0x080077ef
 80077c4:	080077e7 	.word	0x080077e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7fd f978 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 80077cc:	6178      	str	r0, [r7, #20]
        break;
 80077ce:	e013      	b.n	80077f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7fd f98a 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 80077d4:	6178      	str	r0, [r7, #20]
        break;
 80077d6:	e00f      	b.n	80077f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d8:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <UART_SetConfig+0x510>)
 80077da:	617b      	str	r3, [r7, #20]
        break;
 80077dc:	e00c      	b.n	80077f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7fd f8d5 	bl	800498c <HAL_RCC_GetSysClockFreq>
 80077e2:	6178      	str	r0, [r7, #20]
        break;
 80077e4:	e008      	b.n	80077f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ea:	617b      	str	r3, [r7, #20]
        break;
 80077ec:	e004      	b.n	80077f8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	76bb      	strb	r3, [r7, #26]
        break;
 80077f6:	bf00      	nop
    }

    if (pclk != 0U)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	085a      	lsrs	r2, r3, #1
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	441a      	add	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b0f      	cmp	r3, #15
 8007816:	d909      	bls.n	800782c <UART_SetConfig+0x4f4>
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781e:	d205      	bcs.n	800782c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	e001      	b.n	8007830 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800783c:	7ebb      	ldrb	r3, [r7, #26]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3720      	adds	r7, #32
 8007842:	46bd      	mov	sp, r7
 8007844:	bdb0      	pop	{r4, r5, r7, pc}
 8007846:	bf00      	nop
 8007848:	00f42400 	.word	0x00f42400

0800784c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794a:	d10a      	bne.n	8007962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a0:	f7fa fc4a 	bl	8002238 <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d10e      	bne.n	80079d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f82d 	bl	8007a22 <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e023      	b.n	8007a1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d10e      	bne.n	80079fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f817 	bl	8007a22 <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e00d      	b.n	8007a1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b09c      	sub	sp, #112	; 0x70
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	603b      	str	r3, [r7, #0]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a32:	e0a5      	b.n	8007b80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	f000 80a1 	beq.w	8007b80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a3e:	f7fa fbfb 	bl	8002238 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d302      	bcc.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d13e      	bne.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a68:	667b      	str	r3, [r7, #100]	; 0x64
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007aa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e067      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d04f      	beq.n	8007b80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aee:	d147      	bne.n	8007b80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e6      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b4c:	623a      	str	r2, [r7, #32]
 8007b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	69f9      	ldr	r1, [r7, #28]
 8007b52:	6a3a      	ldr	r2, [r7, #32]
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2220      	movs	r2, #32
 8007b64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e010      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69da      	ldr	r2, [r3, #28]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	f43f af4a 	beq.w	8007a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3770      	adds	r7, #112	; 0x70
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b097      	sub	sp, #92	; 0x5c
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	88fa      	ldrh	r2, [r7, #6]
 8007bc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bde:	d10e      	bne.n	8007bfe <UART_Start_Receive_IT+0x52>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d105      	bne.n	8007bf4 <UART_Start_Receive_IT+0x48>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bf2:	e02d      	b.n	8007c50 <UART_Start_Receive_IT+0xa4>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	22ff      	movs	r2, #255	; 0xff
 8007bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bfc:	e028      	b.n	8007c50 <UART_Start_Receive_IT+0xa4>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <UART_Start_Receive_IT+0x76>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <UART_Start_Receive_IT+0x6c>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	22ff      	movs	r2, #255	; 0xff
 8007c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c16:	e01b      	b.n	8007c50 <UART_Start_Receive_IT+0xa4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	227f      	movs	r2, #127	; 0x7f
 8007c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c20:	e016      	b.n	8007c50 <UART_Start_Receive_IT+0xa4>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c2a:	d10d      	bne.n	8007c48 <UART_Start_Receive_IT+0x9c>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <UART_Start_Receive_IT+0x92>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	227f      	movs	r2, #127	; 0x7f
 8007c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c3c:	e008      	b.n	8007c50 <UART_Start_Receive_IT+0xa4>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	223f      	movs	r2, #63	; 0x3f
 8007c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c46:	e003      	b.n	8007c50 <UART_Start_Receive_IT+0xa4>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2222      	movs	r2, #34	; 0x22
 8007c5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	657b      	str	r3, [r7, #84]	; 0x54
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e5      	bne.n	8007c5e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9a:	d107      	bne.n	8007cac <UART_Start_Receive_IT+0x100>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a24      	ldr	r2, [pc, #144]	; (8007d38 <UART_Start_Receive_IT+0x18c>)
 8007ca8:	665a      	str	r2, [r3, #100]	; 0x64
 8007caa:	e002      	b.n	8007cb2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4a23      	ldr	r2, [pc, #140]	; (8007d3c <UART_Start_Receive_IT+0x190>)
 8007cb0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d019      	beq.n	8007cf6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e6      	bne.n	8007cc2 <UART_Start_Receive_IT+0x116>
 8007cf4:	e018      	b.n	8007d28 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	613b      	str	r3, [r7, #16]
   return(result);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f043 0320 	orr.w	r3, r3, #32
 8007d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	69f9      	ldr	r1, [r7, #28]
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	375c      	adds	r7, #92	; 0x5c
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	08007fe7 	.word	0x08007fe7
 8007d3c:	08007e87 	.word	0x08007e87

08007d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b095      	sub	sp, #84	; 0x54
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	643b      	str	r3, [r7, #64]	; 0x40
 8007d68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e5      	bne.n	8007d7a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d118      	bne.n	8007de8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f023 0310 	bic.w	r3, r3, #16
 8007dca:	647b      	str	r3, [r7, #68]	; 0x44
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6979      	ldr	r1, [r7, #20]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	613b      	str	r3, [r7, #16]
   return(result);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e6      	bne.n	8007db6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007dfa:	bf00      	nop
 8007dfc:	3754      	adds	r7, #84	; 0x54
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fa71 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b088      	sub	sp, #32
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	613b      	str	r3, [r7, #16]
   return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e6      	bne.n	8007e3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fa3d 	bl	80072f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e7e:	bf00      	nop
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b096      	sub	sp, #88	; 0x58
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9c:	2b22      	cmp	r3, #34	; 0x22
 8007e9e:	f040 8094 	bne.w	8007fca <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ea8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007eb0:	b2d9      	uxtb	r1, r3
 8007eb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebc:	400a      	ands	r2, r1
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d179      	bne.n	8007fde <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007efe:	653b      	str	r3, [r7, #80]	; 0x50
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f08:	647b      	str	r3, [r7, #68]	; 0x44
 8007f0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e6      	bne.n	8007eea <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3308      	adds	r3, #8
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	e853 3f00 	ldrex	r3, [r3]
 8007f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3308      	adds	r3, #8
 8007f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f3c:	633a      	str	r2, [r7, #48]	; 0x30
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e5      	bne.n	8007f1c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d12e      	bne.n	8007fc2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0310 	bic.w	r3, r3, #16
 8007f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	69b9      	ldr	r1, [r7, #24]
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	617b      	str	r3, [r7, #20]
   return(result);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e6      	bne.n	8007f6a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f003 0310 	and.w	r3, r3, #16
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d103      	bne.n	8007fb2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff f9b0 	bl	8007320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fc0:	e00d      	b.n	8007fde <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7f9 fc14 	bl	80017f0 <HAL_UART_RxCpltCallback>
}
 8007fc8:	e009      	b.n	8007fde <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	8b1b      	ldrh	r3, [r3, #24]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0208 	orr.w	r2, r2, #8
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	831a      	strh	r2, [r3, #24]
}
 8007fde:	bf00      	nop
 8007fe0:	3758      	adds	r7, #88	; 0x58
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b096      	sub	sp, #88	; 0x58
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ff4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffc:	2b22      	cmp	r3, #34	; 0x22
 8007ffe:	f040 8094 	bne.w	800812a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008008:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008010:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008012:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008016:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800801a:	4013      	ands	r3, r2
 800801c:	b29a      	uxth	r2, r3
 800801e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008020:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008026:	1c9a      	adds	r2, r3, #2
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d179      	bne.n	800813e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800805e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008068:	643b      	str	r3, [r7, #64]	; 0x40
 800806a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800806e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3308      	adds	r3, #8
 8008082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	61fb      	str	r3, [r7, #28]
   return(result);
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	64bb      	str	r3, [r7, #72]	; 0x48
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3308      	adds	r3, #8
 800809a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e5      	bne.n	800807c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d12e      	bne.n	8008122 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	647b      	str	r3, [r7, #68]	; 0x44
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6979      	ldr	r1, [r7, #20]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	613b      	str	r3, [r7, #16]
   return(result);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b10      	cmp	r3, #16
 8008108:	d103      	bne.n	8008112 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2210      	movs	r2, #16
 8008110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff f900 	bl	8007320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008120:	e00d      	b.n	800813e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7f9 fb64 	bl	80017f0 <HAL_UART_RxCpltCallback>
}
 8008128:	e009      	b.n	800813e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	8b1b      	ldrh	r3, [r3, #24]
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0208 	orr.w	r2, r2, #8
 800813a:	b292      	uxth	r2, r2
 800813c:	831a      	strh	r2, [r3, #24]
}
 800813e:	bf00      	nop
 8008140:	3758      	adds	r7, #88	; 0x58
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <arm_pid_init_f32>:
 800815c:	edd0 6a08 	vldr	s13, [r0, #32]
 8008160:	edd0 7a06 	vldr	s15, [r0, #24]
 8008164:	ed90 7a07 	vldr	s14, [r0, #28]
 8008168:	edc0 6a02 	vstr	s13, [r0, #8]
 800816c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008170:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8008174:	eef1 7a67 	vneg.f32	s15, s15
 8008178:	ee37 7a26 	vadd.f32	s14, s14, s13
 800817c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008180:	ed80 7a00 	vstr	s14, [r0]
 8008184:	edc0 7a01 	vstr	s15, [r0, #4]
 8008188:	b901      	cbnz	r1, 800818c <arm_pid_init_f32+0x30>
 800818a:	4770      	bx	lr
 800818c:	2300      	movs	r3, #0
 800818e:	60c3      	str	r3, [r0, #12]
 8008190:	6103      	str	r3, [r0, #16]
 8008192:	6143      	str	r3, [r0, #20]
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop

08008198 <atoi>:
 8008198:	220a      	movs	r2, #10
 800819a:	2100      	movs	r1, #0
 800819c:	f000 bdb4 	b.w	8008d08 <strtol>

080081a0 <__errno>:
 80081a0:	4b01      	ldr	r3, [pc, #4]	; (80081a8 <__errno+0x8>)
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000044 	.word	0x20000044

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4d0d      	ldr	r5, [pc, #52]	; (80081e4 <__libc_init_array+0x38>)
 80081b0:	4c0d      	ldr	r4, [pc, #52]	; (80081e8 <__libc_init_array+0x3c>)
 80081b2:	1b64      	subs	r4, r4, r5
 80081b4:	10a4      	asrs	r4, r4, #2
 80081b6:	2600      	movs	r6, #0
 80081b8:	42a6      	cmp	r6, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	4d0b      	ldr	r5, [pc, #44]	; (80081ec <__libc_init_array+0x40>)
 80081be:	4c0c      	ldr	r4, [pc, #48]	; (80081f0 <__libc_init_array+0x44>)
 80081c0:	f003 fb82 	bl	800b8c8 <_init>
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	2600      	movs	r6, #0
 80081ca:	42a6      	cmp	r6, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d4:	4798      	blx	r3
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	f855 3b04 	ldr.w	r3, [r5], #4
 80081de:	4798      	blx	r3
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	0800bd78 	.word	0x0800bd78
 80081e8:	0800bd78 	.word	0x0800bd78
 80081ec:	0800bd78 	.word	0x0800bd78
 80081f0:	0800bd7c 	.word	0x0800bd7c

080081f4 <memset>:
 80081f4:	4402      	add	r2, r0
 80081f6:	4603      	mov	r3, r0
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d100      	bne.n	80081fe <memset+0xa>
 80081fc:	4770      	bx	lr
 80081fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008202:	e7f9      	b.n	80081f8 <memset+0x4>

08008204 <__cvt>:
 8008204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	ec55 4b10 	vmov	r4, r5, d0
 800820c:	2d00      	cmp	r5, #0
 800820e:	460e      	mov	r6, r1
 8008210:	4619      	mov	r1, r3
 8008212:	462b      	mov	r3, r5
 8008214:	bfbb      	ittet	lt
 8008216:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800821a:	461d      	movlt	r5, r3
 800821c:	2300      	movge	r3, #0
 800821e:	232d      	movlt	r3, #45	; 0x2d
 8008220:	700b      	strb	r3, [r1, #0]
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008228:	4691      	mov	r9, r2
 800822a:	f023 0820 	bic.w	r8, r3, #32
 800822e:	bfbc      	itt	lt
 8008230:	4622      	movlt	r2, r4
 8008232:	4614      	movlt	r4, r2
 8008234:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008238:	d005      	beq.n	8008246 <__cvt+0x42>
 800823a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800823e:	d100      	bne.n	8008242 <__cvt+0x3e>
 8008240:	3601      	adds	r6, #1
 8008242:	2102      	movs	r1, #2
 8008244:	e000      	b.n	8008248 <__cvt+0x44>
 8008246:	2103      	movs	r1, #3
 8008248:	ab03      	add	r3, sp, #12
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	ab02      	add	r3, sp, #8
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	ec45 4b10 	vmov	d0, r4, r5
 8008254:	4653      	mov	r3, sl
 8008256:	4632      	mov	r2, r6
 8008258:	f000 fe0e 	bl	8008e78 <_dtoa_r>
 800825c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008260:	4607      	mov	r7, r0
 8008262:	d102      	bne.n	800826a <__cvt+0x66>
 8008264:	f019 0f01 	tst.w	r9, #1
 8008268:	d022      	beq.n	80082b0 <__cvt+0xac>
 800826a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800826e:	eb07 0906 	add.w	r9, r7, r6
 8008272:	d110      	bne.n	8008296 <__cvt+0x92>
 8008274:	783b      	ldrb	r3, [r7, #0]
 8008276:	2b30      	cmp	r3, #48	; 0x30
 8008278:	d10a      	bne.n	8008290 <__cvt+0x8c>
 800827a:	2200      	movs	r2, #0
 800827c:	2300      	movs	r3, #0
 800827e:	4620      	mov	r0, r4
 8008280:	4629      	mov	r1, r5
 8008282:	f7f8 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8008286:	b918      	cbnz	r0, 8008290 <__cvt+0x8c>
 8008288:	f1c6 0601 	rsb	r6, r6, #1
 800828c:	f8ca 6000 	str.w	r6, [sl]
 8008290:	f8da 3000 	ldr.w	r3, [sl]
 8008294:	4499      	add	r9, r3
 8008296:	2200      	movs	r2, #0
 8008298:	2300      	movs	r3, #0
 800829a:	4620      	mov	r0, r4
 800829c:	4629      	mov	r1, r5
 800829e:	f7f8 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a2:	b108      	cbz	r0, 80082a8 <__cvt+0xa4>
 80082a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80082a8:	2230      	movs	r2, #48	; 0x30
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	454b      	cmp	r3, r9
 80082ae:	d307      	bcc.n	80082c0 <__cvt+0xbc>
 80082b0:	9b03      	ldr	r3, [sp, #12]
 80082b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082b4:	1bdb      	subs	r3, r3, r7
 80082b6:	4638      	mov	r0, r7
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	b004      	add	sp, #16
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	1c59      	adds	r1, r3, #1
 80082c2:	9103      	str	r1, [sp, #12]
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	e7f0      	b.n	80082aa <__cvt+0xa6>

080082c8 <__exponent>:
 80082c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ca:	4603      	mov	r3, r0
 80082cc:	2900      	cmp	r1, #0
 80082ce:	bfb8      	it	lt
 80082d0:	4249      	neglt	r1, r1
 80082d2:	f803 2b02 	strb.w	r2, [r3], #2
 80082d6:	bfb4      	ite	lt
 80082d8:	222d      	movlt	r2, #45	; 0x2d
 80082da:	222b      	movge	r2, #43	; 0x2b
 80082dc:	2909      	cmp	r1, #9
 80082de:	7042      	strb	r2, [r0, #1]
 80082e0:	dd2a      	ble.n	8008338 <__exponent+0x70>
 80082e2:	f10d 0407 	add.w	r4, sp, #7
 80082e6:	46a4      	mov	ip, r4
 80082e8:	270a      	movs	r7, #10
 80082ea:	46a6      	mov	lr, r4
 80082ec:	460a      	mov	r2, r1
 80082ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80082f2:	fb07 1516 	mls	r5, r7, r6, r1
 80082f6:	3530      	adds	r5, #48	; 0x30
 80082f8:	2a63      	cmp	r2, #99	; 0x63
 80082fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80082fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008302:	4631      	mov	r1, r6
 8008304:	dcf1      	bgt.n	80082ea <__exponent+0x22>
 8008306:	3130      	adds	r1, #48	; 0x30
 8008308:	f1ae 0502 	sub.w	r5, lr, #2
 800830c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008310:	1c44      	adds	r4, r0, #1
 8008312:	4629      	mov	r1, r5
 8008314:	4561      	cmp	r1, ip
 8008316:	d30a      	bcc.n	800832e <__exponent+0x66>
 8008318:	f10d 0209 	add.w	r2, sp, #9
 800831c:	eba2 020e 	sub.w	r2, r2, lr
 8008320:	4565      	cmp	r5, ip
 8008322:	bf88      	it	hi
 8008324:	2200      	movhi	r2, #0
 8008326:	4413      	add	r3, r2
 8008328:	1a18      	subs	r0, r3, r0
 800832a:	b003      	add	sp, #12
 800832c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008332:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008336:	e7ed      	b.n	8008314 <__exponent+0x4c>
 8008338:	2330      	movs	r3, #48	; 0x30
 800833a:	3130      	adds	r1, #48	; 0x30
 800833c:	7083      	strb	r3, [r0, #2]
 800833e:	70c1      	strb	r1, [r0, #3]
 8008340:	1d03      	adds	r3, r0, #4
 8008342:	e7f1      	b.n	8008328 <__exponent+0x60>

08008344 <_printf_float>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	ed2d 8b02 	vpush	{d8}
 800834c:	b08d      	sub	sp, #52	; 0x34
 800834e:	460c      	mov	r4, r1
 8008350:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008354:	4616      	mov	r6, r2
 8008356:	461f      	mov	r7, r3
 8008358:	4605      	mov	r5, r0
 800835a:	f001 fb79 	bl	8009a50 <_localeconv_r>
 800835e:	f8d0 a000 	ldr.w	sl, [r0]
 8008362:	4650      	mov	r0, sl
 8008364:	f7f7 ff34 	bl	80001d0 <strlen>
 8008368:	2300      	movs	r3, #0
 800836a:	930a      	str	r3, [sp, #40]	; 0x28
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	f8d8 3000 	ldr.w	r3, [r8]
 8008374:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008378:	3307      	adds	r3, #7
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	f103 0208 	add.w	r2, r3, #8
 8008382:	f8c8 2000 	str.w	r2, [r8]
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800838e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008392:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	f8cd 8018 	str.w	r8, [sp, #24]
 800839c:	ee08 0a10 	vmov	s16, r0
 80083a0:	4b9f      	ldr	r3, [pc, #636]	; (8008620 <_printf_float+0x2dc>)
 80083a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	f7f8 fbbf 	bl	8000b2c <__aeabi_dcmpun>
 80083ae:	bb88      	cbnz	r0, 8008414 <_printf_float+0xd0>
 80083b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b4:	4b9a      	ldr	r3, [pc, #616]	; (8008620 <_printf_float+0x2dc>)
 80083b6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ba:	f7f8 fb99 	bl	8000af0 <__aeabi_dcmple>
 80083be:	bb48      	cbnz	r0, 8008414 <_printf_float+0xd0>
 80083c0:	2200      	movs	r2, #0
 80083c2:	2300      	movs	r3, #0
 80083c4:	4640      	mov	r0, r8
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7f8 fb88 	bl	8000adc <__aeabi_dcmplt>
 80083cc:	b110      	cbz	r0, 80083d4 <_printf_float+0x90>
 80083ce:	232d      	movs	r3, #45	; 0x2d
 80083d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d4:	4b93      	ldr	r3, [pc, #588]	; (8008624 <_printf_float+0x2e0>)
 80083d6:	4894      	ldr	r0, [pc, #592]	; (8008628 <_printf_float+0x2e4>)
 80083d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083dc:	bf94      	ite	ls
 80083de:	4698      	movls	r8, r3
 80083e0:	4680      	movhi	r8, r0
 80083e2:	2303      	movs	r3, #3
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	9b05      	ldr	r3, [sp, #20]
 80083e8:	f023 0204 	bic.w	r2, r3, #4
 80083ec:	6022      	str	r2, [r4, #0]
 80083ee:	f04f 0900 	mov.w	r9, #0
 80083f2:	9700      	str	r7, [sp, #0]
 80083f4:	4633      	mov	r3, r6
 80083f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f8:	4621      	mov	r1, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f9d8 	bl	80087b0 <_printf_common>
 8008400:	3001      	adds	r0, #1
 8008402:	f040 8090 	bne.w	8008526 <_printf_float+0x1e2>
 8008406:	f04f 30ff 	mov.w	r0, #4294967295
 800840a:	b00d      	add	sp, #52	; 0x34
 800840c:	ecbd 8b02 	vpop	{d8}
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	f7f8 fb86 	bl	8000b2c <__aeabi_dcmpun>
 8008420:	b140      	cbz	r0, 8008434 <_printf_float+0xf0>
 8008422:	464b      	mov	r3, r9
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfbc      	itt	lt
 8008428:	232d      	movlt	r3, #45	; 0x2d
 800842a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800842e:	487f      	ldr	r0, [pc, #508]	; (800862c <_printf_float+0x2e8>)
 8008430:	4b7f      	ldr	r3, [pc, #508]	; (8008630 <_printf_float+0x2ec>)
 8008432:	e7d1      	b.n	80083d8 <_printf_float+0x94>
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800843a:	9206      	str	r2, [sp, #24]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	d13f      	bne.n	80084c0 <_printf_float+0x17c>
 8008440:	2306      	movs	r3, #6
 8008442:	6063      	str	r3, [r4, #4]
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	6861      	ldr	r1, [r4, #4]
 8008448:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800844c:	2300      	movs	r3, #0
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	ab0a      	add	r3, sp, #40	; 0x28
 8008452:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008456:	ab09      	add	r3, sp, #36	; 0x24
 8008458:	ec49 8b10 	vmov	d0, r8, r9
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff fecd 	bl	8008204 <__cvt>
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800846e:	2b47      	cmp	r3, #71	; 0x47
 8008470:	4680      	mov	r8, r0
 8008472:	d108      	bne.n	8008486 <_printf_float+0x142>
 8008474:	1cc8      	adds	r0, r1, #3
 8008476:	db02      	blt.n	800847e <_printf_float+0x13a>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	4299      	cmp	r1, r3
 800847c:	dd41      	ble.n	8008502 <_printf_float+0x1be>
 800847e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008482:	fa5f fb8b 	uxtb.w	fp, fp
 8008486:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800848a:	d820      	bhi.n	80084ce <_printf_float+0x18a>
 800848c:	3901      	subs	r1, #1
 800848e:	465a      	mov	r2, fp
 8008490:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008494:	9109      	str	r1, [sp, #36]	; 0x24
 8008496:	f7ff ff17 	bl	80082c8 <__exponent>
 800849a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849c:	1813      	adds	r3, r2, r0
 800849e:	2a01      	cmp	r2, #1
 80084a0:	4681      	mov	r9, r0
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	dc02      	bgt.n	80084ac <_printf_float+0x168>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	07d2      	lsls	r2, r2, #31
 80084aa:	d501      	bpl.n	80084b0 <_printf_float+0x16c>
 80084ac:	3301      	adds	r3, #1
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d09c      	beq.n	80083f2 <_printf_float+0xae>
 80084b8:	232d      	movs	r3, #45	; 0x2d
 80084ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084be:	e798      	b.n	80083f2 <_printf_float+0xae>
 80084c0:	9a06      	ldr	r2, [sp, #24]
 80084c2:	2a47      	cmp	r2, #71	; 0x47
 80084c4:	d1be      	bne.n	8008444 <_printf_float+0x100>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1bc      	bne.n	8008444 <_printf_float+0x100>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7b9      	b.n	8008442 <_printf_float+0xfe>
 80084ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084d2:	d118      	bne.n	8008506 <_printf_float+0x1c2>
 80084d4:	2900      	cmp	r1, #0
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	dd0b      	ble.n	80084f2 <_printf_float+0x1ae>
 80084da:	6121      	str	r1, [r4, #16]
 80084dc:	b913      	cbnz	r3, 80084e4 <_printf_float+0x1a0>
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	07d0      	lsls	r0, r2, #31
 80084e2:	d502      	bpl.n	80084ea <_printf_float+0x1a6>
 80084e4:	3301      	adds	r3, #1
 80084e6:	440b      	add	r3, r1
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80084ec:	f04f 0900 	mov.w	r9, #0
 80084f0:	e7de      	b.n	80084b0 <_printf_float+0x16c>
 80084f2:	b913      	cbnz	r3, 80084fa <_printf_float+0x1b6>
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	07d2      	lsls	r2, r2, #31
 80084f8:	d501      	bpl.n	80084fe <_printf_float+0x1ba>
 80084fa:	3302      	adds	r3, #2
 80084fc:	e7f4      	b.n	80084e8 <_printf_float+0x1a4>
 80084fe:	2301      	movs	r3, #1
 8008500:	e7f2      	b.n	80084e8 <_printf_float+0x1a4>
 8008502:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	4299      	cmp	r1, r3
 800850a:	db05      	blt.n	8008518 <_printf_float+0x1d4>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	6121      	str	r1, [r4, #16]
 8008510:	07d8      	lsls	r0, r3, #31
 8008512:	d5ea      	bpl.n	80084ea <_printf_float+0x1a6>
 8008514:	1c4b      	adds	r3, r1, #1
 8008516:	e7e7      	b.n	80084e8 <_printf_float+0x1a4>
 8008518:	2900      	cmp	r1, #0
 800851a:	bfd4      	ite	le
 800851c:	f1c1 0202 	rsble	r2, r1, #2
 8008520:	2201      	movgt	r2, #1
 8008522:	4413      	add	r3, r2
 8008524:	e7e0      	b.n	80084e8 <_printf_float+0x1a4>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	055a      	lsls	r2, r3, #21
 800852a:	d407      	bmi.n	800853c <_printf_float+0x1f8>
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	4642      	mov	r2, r8
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	d12c      	bne.n	8008594 <_printf_float+0x250>
 800853a:	e764      	b.n	8008406 <_printf_float+0xc2>
 800853c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008540:	f240 80e0 	bls.w	8008704 <_printf_float+0x3c0>
 8008544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	f7f8 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008550:	2800      	cmp	r0, #0
 8008552:	d034      	beq.n	80085be <_printf_float+0x27a>
 8008554:	4a37      	ldr	r2, [pc, #220]	; (8008634 <_printf_float+0x2f0>)
 8008556:	2301      	movs	r3, #1
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f af51 	beq.w	8008406 <_printf_float+0xc2>
 8008564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008568:	429a      	cmp	r2, r3
 800856a:	db02      	blt.n	8008572 <_printf_float+0x22e>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07d8      	lsls	r0, r3, #31
 8008570:	d510      	bpl.n	8008594 <_printf_float+0x250>
 8008572:	ee18 3a10 	vmov	r3, s16
 8008576:	4652      	mov	r2, sl
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af41 	beq.w	8008406 <_printf_float+0xc2>
 8008584:	f04f 0800 	mov.w	r8, #0
 8008588:	f104 091a 	add.w	r9, r4, #26
 800858c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858e:	3b01      	subs	r3, #1
 8008590:	4543      	cmp	r3, r8
 8008592:	dc09      	bgt.n	80085a8 <_printf_float+0x264>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	079b      	lsls	r3, r3, #30
 8008598:	f100 8105 	bmi.w	80087a6 <_printf_float+0x462>
 800859c:	68e0      	ldr	r0, [r4, #12]
 800859e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a0:	4298      	cmp	r0, r3
 80085a2:	bfb8      	it	lt
 80085a4:	4618      	movlt	r0, r3
 80085a6:	e730      	b.n	800840a <_printf_float+0xc6>
 80085a8:	2301      	movs	r3, #1
 80085aa:	464a      	mov	r2, r9
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f af27 	beq.w	8008406 <_printf_float+0xc2>
 80085b8:	f108 0801 	add.w	r8, r8, #1
 80085bc:	e7e6      	b.n	800858c <_printf_float+0x248>
 80085be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc39      	bgt.n	8008638 <_printf_float+0x2f4>
 80085c4:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <_printf_float+0x2f0>)
 80085c6:	2301      	movs	r3, #1
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f af19 	beq.w	8008406 <_printf_float+0xc2>
 80085d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d8:	4313      	orrs	r3, r2
 80085da:	d102      	bne.n	80085e2 <_printf_float+0x29e>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	d5d8      	bpl.n	8008594 <_printf_float+0x250>
 80085e2:	ee18 3a10 	vmov	r3, s16
 80085e6:	4652      	mov	r2, sl
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f af09 	beq.w	8008406 <_printf_float+0xc2>
 80085f4:	f04f 0900 	mov.w	r9, #0
 80085f8:	f104 0a1a 	add.w	sl, r4, #26
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	425b      	negs	r3, r3
 8008600:	454b      	cmp	r3, r9
 8008602:	dc01      	bgt.n	8008608 <_printf_float+0x2c4>
 8008604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008606:	e792      	b.n	800852e <_printf_float+0x1ea>
 8008608:	2301      	movs	r3, #1
 800860a:	4652      	mov	r2, sl
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f aef7 	beq.w	8008406 <_printf_float+0xc2>
 8008618:	f109 0901 	add.w	r9, r9, #1
 800861c:	e7ee      	b.n	80085fc <_printf_float+0x2b8>
 800861e:	bf00      	nop
 8008620:	7fefffff 	.word	0x7fefffff
 8008624:	0800b978 	.word	0x0800b978
 8008628:	0800b97c 	.word	0x0800b97c
 800862c:	0800b984 	.word	0x0800b984
 8008630:	0800b980 	.word	0x0800b980
 8008634:	0800bcb1 	.word	0x0800bcb1
 8008638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800863c:	429a      	cmp	r2, r3
 800863e:	bfa8      	it	ge
 8008640:	461a      	movge	r2, r3
 8008642:	2a00      	cmp	r2, #0
 8008644:	4691      	mov	r9, r2
 8008646:	dc37      	bgt.n	80086b8 <_printf_float+0x374>
 8008648:	f04f 0b00 	mov.w	fp, #0
 800864c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008650:	f104 021a 	add.w	r2, r4, #26
 8008654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	eba3 0309 	sub.w	r3, r3, r9
 800865c:	455b      	cmp	r3, fp
 800865e:	dc33      	bgt.n	80086c8 <_printf_float+0x384>
 8008660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008664:	429a      	cmp	r2, r3
 8008666:	db3b      	blt.n	80086e0 <_printf_float+0x39c>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	07da      	lsls	r2, r3, #31
 800866c:	d438      	bmi.n	80086e0 <_printf_float+0x39c>
 800866e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008670:	9b05      	ldr	r3, [sp, #20]
 8008672:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	eba2 0901 	sub.w	r9, r2, r1
 800867a:	4599      	cmp	r9, r3
 800867c:	bfa8      	it	ge
 800867e:	4699      	movge	r9, r3
 8008680:	f1b9 0f00 	cmp.w	r9, #0
 8008684:	dc35      	bgt.n	80086f2 <_printf_float+0x3ae>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800868e:	f104 0a1a 	add.w	sl, r4, #26
 8008692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008696:	1a9b      	subs	r3, r3, r2
 8008698:	eba3 0309 	sub.w	r3, r3, r9
 800869c:	4543      	cmp	r3, r8
 800869e:	f77f af79 	ble.w	8008594 <_printf_float+0x250>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4652      	mov	r2, sl
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f aeaa 	beq.w	8008406 <_printf_float+0xc2>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	e7ec      	b.n	8008692 <_printf_float+0x34e>
 80086b8:	4613      	mov	r3, r2
 80086ba:	4631      	mov	r1, r6
 80086bc:	4642      	mov	r2, r8
 80086be:	4628      	mov	r0, r5
 80086c0:	47b8      	blx	r7
 80086c2:	3001      	adds	r0, #1
 80086c4:	d1c0      	bne.n	8008648 <_printf_float+0x304>
 80086c6:	e69e      	b.n	8008406 <_printf_float+0xc2>
 80086c8:	2301      	movs	r3, #1
 80086ca:	4631      	mov	r1, r6
 80086cc:	4628      	mov	r0, r5
 80086ce:	9205      	str	r2, [sp, #20]
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	f43f ae97 	beq.w	8008406 <_printf_float+0xc2>
 80086d8:	9a05      	ldr	r2, [sp, #20]
 80086da:	f10b 0b01 	add.w	fp, fp, #1
 80086de:	e7b9      	b.n	8008654 <_printf_float+0x310>
 80086e0:	ee18 3a10 	vmov	r3, s16
 80086e4:	4652      	mov	r2, sl
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1be      	bne.n	800866e <_printf_float+0x32a>
 80086f0:	e689      	b.n	8008406 <_printf_float+0xc2>
 80086f2:	9a05      	ldr	r2, [sp, #20]
 80086f4:	464b      	mov	r3, r9
 80086f6:	4442      	add	r2, r8
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	d1c1      	bne.n	8008686 <_printf_float+0x342>
 8008702:	e680      	b.n	8008406 <_printf_float+0xc2>
 8008704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008706:	2a01      	cmp	r2, #1
 8008708:	dc01      	bgt.n	800870e <_printf_float+0x3ca>
 800870a:	07db      	lsls	r3, r3, #31
 800870c:	d538      	bpl.n	8008780 <_printf_float+0x43c>
 800870e:	2301      	movs	r3, #1
 8008710:	4642      	mov	r2, r8
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	f43f ae74 	beq.w	8008406 <_printf_float+0xc2>
 800871e:	ee18 3a10 	vmov	r3, s16
 8008722:	4652      	mov	r2, sl
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	f43f ae6b 	beq.w	8008406 <_printf_float+0xc2>
 8008730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008734:	2200      	movs	r2, #0
 8008736:	2300      	movs	r3, #0
 8008738:	f7f8 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800873c:	b9d8      	cbnz	r0, 8008776 <_printf_float+0x432>
 800873e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008740:	f108 0201 	add.w	r2, r8, #1
 8008744:	3b01      	subs	r3, #1
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	d10e      	bne.n	800876e <_printf_float+0x42a>
 8008750:	e659      	b.n	8008406 <_printf_float+0xc2>
 8008752:	2301      	movs	r3, #1
 8008754:	4652      	mov	r2, sl
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f ae52 	beq.w	8008406 <_printf_float+0xc2>
 8008762:	f108 0801 	add.w	r8, r8, #1
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	3b01      	subs	r3, #1
 800876a:	4543      	cmp	r3, r8
 800876c:	dcf1      	bgt.n	8008752 <_printf_float+0x40e>
 800876e:	464b      	mov	r3, r9
 8008770:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008774:	e6dc      	b.n	8008530 <_printf_float+0x1ec>
 8008776:	f04f 0800 	mov.w	r8, #0
 800877a:	f104 0a1a 	add.w	sl, r4, #26
 800877e:	e7f2      	b.n	8008766 <_printf_float+0x422>
 8008780:	2301      	movs	r3, #1
 8008782:	4642      	mov	r2, r8
 8008784:	e7df      	b.n	8008746 <_printf_float+0x402>
 8008786:	2301      	movs	r3, #1
 8008788:	464a      	mov	r2, r9
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	f43f ae38 	beq.w	8008406 <_printf_float+0xc2>
 8008796:	f108 0801 	add.w	r8, r8, #1
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800879e:	1a5b      	subs	r3, r3, r1
 80087a0:	4543      	cmp	r3, r8
 80087a2:	dcf0      	bgt.n	8008786 <_printf_float+0x442>
 80087a4:	e6fa      	b.n	800859c <_printf_float+0x258>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	f104 0919 	add.w	r9, r4, #25
 80087ae:	e7f4      	b.n	800879a <_printf_float+0x456>

080087b0 <_printf_common>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	4616      	mov	r6, r2
 80087b6:	4699      	mov	r9, r3
 80087b8:	688a      	ldr	r2, [r1, #8]
 80087ba:	690b      	ldr	r3, [r1, #16]
 80087bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	bfb8      	it	lt
 80087c4:	4613      	movlt	r3, r2
 80087c6:	6033      	str	r3, [r6, #0]
 80087c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087cc:	4607      	mov	r7, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b10a      	cbz	r2, 80087d6 <_printf_common+0x26>
 80087d2:	3301      	adds	r3, #1
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	0699      	lsls	r1, r3, #26
 80087da:	bf42      	ittt	mi
 80087dc:	6833      	ldrmi	r3, [r6, #0]
 80087de:	3302      	addmi	r3, #2
 80087e0:	6033      	strmi	r3, [r6, #0]
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	f015 0506 	ands.w	r5, r5, #6
 80087e8:	d106      	bne.n	80087f8 <_printf_common+0x48>
 80087ea:	f104 0a19 	add.w	sl, r4, #25
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	6832      	ldr	r2, [r6, #0]
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dc26      	bgt.n	8008846 <_printf_common+0x96>
 80087f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087fc:	1e13      	subs	r3, r2, #0
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	bf18      	it	ne
 8008802:	2301      	movne	r3, #1
 8008804:	0692      	lsls	r2, r2, #26
 8008806:	d42b      	bmi.n	8008860 <_printf_common+0xb0>
 8008808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800880c:	4649      	mov	r1, r9
 800880e:	4638      	mov	r0, r7
 8008810:	47c0      	blx	r8
 8008812:	3001      	adds	r0, #1
 8008814:	d01e      	beq.n	8008854 <_printf_common+0xa4>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	68e5      	ldr	r5, [r4, #12]
 800881a:	6832      	ldr	r2, [r6, #0]
 800881c:	f003 0306 	and.w	r3, r3, #6
 8008820:	2b04      	cmp	r3, #4
 8008822:	bf08      	it	eq
 8008824:	1aad      	subeq	r5, r5, r2
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	6922      	ldr	r2, [r4, #16]
 800882a:	bf0c      	ite	eq
 800882c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008830:	2500      	movne	r5, #0
 8008832:	4293      	cmp	r3, r2
 8008834:	bfc4      	itt	gt
 8008836:	1a9b      	subgt	r3, r3, r2
 8008838:	18ed      	addgt	r5, r5, r3
 800883a:	2600      	movs	r6, #0
 800883c:	341a      	adds	r4, #26
 800883e:	42b5      	cmp	r5, r6
 8008840:	d11a      	bne.n	8008878 <_printf_common+0xc8>
 8008842:	2000      	movs	r0, #0
 8008844:	e008      	b.n	8008858 <_printf_common+0xa8>
 8008846:	2301      	movs	r3, #1
 8008848:	4652      	mov	r2, sl
 800884a:	4649      	mov	r1, r9
 800884c:	4638      	mov	r0, r7
 800884e:	47c0      	blx	r8
 8008850:	3001      	adds	r0, #1
 8008852:	d103      	bne.n	800885c <_printf_common+0xac>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	3501      	adds	r5, #1
 800885e:	e7c6      	b.n	80087ee <_printf_common+0x3e>
 8008860:	18e1      	adds	r1, r4, r3
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	2030      	movs	r0, #48	; 0x30
 8008866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800886a:	4422      	add	r2, r4
 800886c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008874:	3302      	adds	r3, #2
 8008876:	e7c7      	b.n	8008808 <_printf_common+0x58>
 8008878:	2301      	movs	r3, #1
 800887a:	4622      	mov	r2, r4
 800887c:	4649      	mov	r1, r9
 800887e:	4638      	mov	r0, r7
 8008880:	47c0      	blx	r8
 8008882:	3001      	adds	r0, #1
 8008884:	d0e6      	beq.n	8008854 <_printf_common+0xa4>
 8008886:	3601      	adds	r6, #1
 8008888:	e7d9      	b.n	800883e <_printf_common+0x8e>
	...

0800888c <_printf_i>:
 800888c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	4691      	mov	r9, r2
 8008894:	7e27      	ldrb	r7, [r4, #24]
 8008896:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008898:	2f78      	cmp	r7, #120	; 0x78
 800889a:	4680      	mov	r8, r0
 800889c:	469a      	mov	sl, r3
 800889e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088a2:	d807      	bhi.n	80088b4 <_printf_i+0x28>
 80088a4:	2f62      	cmp	r7, #98	; 0x62
 80088a6:	d80a      	bhi.n	80088be <_printf_i+0x32>
 80088a8:	2f00      	cmp	r7, #0
 80088aa:	f000 80d8 	beq.w	8008a5e <_printf_i+0x1d2>
 80088ae:	2f58      	cmp	r7, #88	; 0x58
 80088b0:	f000 80a3 	beq.w	80089fa <_printf_i+0x16e>
 80088b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088bc:	e03a      	b.n	8008934 <_printf_i+0xa8>
 80088be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088c2:	2b15      	cmp	r3, #21
 80088c4:	d8f6      	bhi.n	80088b4 <_printf_i+0x28>
 80088c6:	a001      	add	r0, pc, #4	; (adr r0, 80088cc <_printf_i+0x40>)
 80088c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008939 	.word	0x08008939
 80088d4:	080088b5 	.word	0x080088b5
 80088d8:	080088b5 	.word	0x080088b5
 80088dc:	080088b5 	.word	0x080088b5
 80088e0:	080088b5 	.word	0x080088b5
 80088e4:	08008939 	.word	0x08008939
 80088e8:	080088b5 	.word	0x080088b5
 80088ec:	080088b5 	.word	0x080088b5
 80088f0:	080088b5 	.word	0x080088b5
 80088f4:	080088b5 	.word	0x080088b5
 80088f8:	08008a45 	.word	0x08008a45
 80088fc:	08008969 	.word	0x08008969
 8008900:	08008a27 	.word	0x08008a27
 8008904:	080088b5 	.word	0x080088b5
 8008908:	080088b5 	.word	0x080088b5
 800890c:	08008a67 	.word	0x08008a67
 8008910:	080088b5 	.word	0x080088b5
 8008914:	08008969 	.word	0x08008969
 8008918:	080088b5 	.word	0x080088b5
 800891c:	080088b5 	.word	0x080088b5
 8008920:	08008a2f 	.word	0x08008a2f
 8008924:	680b      	ldr	r3, [r1, #0]
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	600a      	str	r2, [r1, #0]
 800892c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008934:	2301      	movs	r3, #1
 8008936:	e0a3      	b.n	8008a80 <_printf_i+0x1f4>
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	6808      	ldr	r0, [r1, #0]
 800893c:	062e      	lsls	r6, r5, #24
 800893e:	f100 0304 	add.w	r3, r0, #4
 8008942:	d50a      	bpl.n	800895a <_printf_i+0xce>
 8008944:	6805      	ldr	r5, [r0, #0]
 8008946:	600b      	str	r3, [r1, #0]
 8008948:	2d00      	cmp	r5, #0
 800894a:	da03      	bge.n	8008954 <_printf_i+0xc8>
 800894c:	232d      	movs	r3, #45	; 0x2d
 800894e:	426d      	negs	r5, r5
 8008950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008954:	485e      	ldr	r0, [pc, #376]	; (8008ad0 <_printf_i+0x244>)
 8008956:	230a      	movs	r3, #10
 8008958:	e019      	b.n	800898e <_printf_i+0x102>
 800895a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800895e:	6805      	ldr	r5, [r0, #0]
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	bf18      	it	ne
 8008964:	b22d      	sxthne	r5, r5
 8008966:	e7ef      	b.n	8008948 <_printf_i+0xbc>
 8008968:	680b      	ldr	r3, [r1, #0]
 800896a:	6825      	ldr	r5, [r4, #0]
 800896c:	1d18      	adds	r0, r3, #4
 800896e:	6008      	str	r0, [r1, #0]
 8008970:	0628      	lsls	r0, r5, #24
 8008972:	d501      	bpl.n	8008978 <_printf_i+0xec>
 8008974:	681d      	ldr	r5, [r3, #0]
 8008976:	e002      	b.n	800897e <_printf_i+0xf2>
 8008978:	0669      	lsls	r1, r5, #25
 800897a:	d5fb      	bpl.n	8008974 <_printf_i+0xe8>
 800897c:	881d      	ldrh	r5, [r3, #0]
 800897e:	4854      	ldr	r0, [pc, #336]	; (8008ad0 <_printf_i+0x244>)
 8008980:	2f6f      	cmp	r7, #111	; 0x6f
 8008982:	bf0c      	ite	eq
 8008984:	2308      	moveq	r3, #8
 8008986:	230a      	movne	r3, #10
 8008988:	2100      	movs	r1, #0
 800898a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800898e:	6866      	ldr	r6, [r4, #4]
 8008990:	60a6      	str	r6, [r4, #8]
 8008992:	2e00      	cmp	r6, #0
 8008994:	bfa2      	ittt	ge
 8008996:	6821      	ldrge	r1, [r4, #0]
 8008998:	f021 0104 	bicge.w	r1, r1, #4
 800899c:	6021      	strge	r1, [r4, #0]
 800899e:	b90d      	cbnz	r5, 80089a4 <_printf_i+0x118>
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	d04d      	beq.n	8008a40 <_printf_i+0x1b4>
 80089a4:	4616      	mov	r6, r2
 80089a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80089aa:	fb03 5711 	mls	r7, r3, r1, r5
 80089ae:	5dc7      	ldrb	r7, [r0, r7]
 80089b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089b4:	462f      	mov	r7, r5
 80089b6:	42bb      	cmp	r3, r7
 80089b8:	460d      	mov	r5, r1
 80089ba:	d9f4      	bls.n	80089a6 <_printf_i+0x11a>
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d10b      	bne.n	80089d8 <_printf_i+0x14c>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	07df      	lsls	r7, r3, #31
 80089c4:	d508      	bpl.n	80089d8 <_printf_i+0x14c>
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	6861      	ldr	r1, [r4, #4]
 80089ca:	4299      	cmp	r1, r3
 80089cc:	bfde      	ittt	le
 80089ce:	2330      	movle	r3, #48	; 0x30
 80089d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089d8:	1b92      	subs	r2, r2, r6
 80089da:	6122      	str	r2, [r4, #16]
 80089dc:	f8cd a000 	str.w	sl, [sp]
 80089e0:	464b      	mov	r3, r9
 80089e2:	aa03      	add	r2, sp, #12
 80089e4:	4621      	mov	r1, r4
 80089e6:	4640      	mov	r0, r8
 80089e8:	f7ff fee2 	bl	80087b0 <_printf_common>
 80089ec:	3001      	adds	r0, #1
 80089ee:	d14c      	bne.n	8008a8a <_printf_i+0x1fe>
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	b004      	add	sp, #16
 80089f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fa:	4835      	ldr	r0, [pc, #212]	; (8008ad0 <_printf_i+0x244>)
 80089fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	680e      	ldr	r6, [r1, #0]
 8008a04:	061f      	lsls	r7, r3, #24
 8008a06:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a0a:	600e      	str	r6, [r1, #0]
 8008a0c:	d514      	bpl.n	8008a38 <_printf_i+0x1ac>
 8008a0e:	07d9      	lsls	r1, r3, #31
 8008a10:	bf44      	itt	mi
 8008a12:	f043 0320 	orrmi.w	r3, r3, #32
 8008a16:	6023      	strmi	r3, [r4, #0]
 8008a18:	b91d      	cbnz	r5, 8008a22 <_printf_i+0x196>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	f023 0320 	bic.w	r3, r3, #32
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	2310      	movs	r3, #16
 8008a24:	e7b0      	b.n	8008988 <_printf_i+0xfc>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	f043 0320 	orr.w	r3, r3, #32
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	2378      	movs	r3, #120	; 0x78
 8008a30:	4828      	ldr	r0, [pc, #160]	; (8008ad4 <_printf_i+0x248>)
 8008a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a36:	e7e3      	b.n	8008a00 <_printf_i+0x174>
 8008a38:	065e      	lsls	r6, r3, #25
 8008a3a:	bf48      	it	mi
 8008a3c:	b2ad      	uxthmi	r5, r5
 8008a3e:	e7e6      	b.n	8008a0e <_printf_i+0x182>
 8008a40:	4616      	mov	r6, r2
 8008a42:	e7bb      	b.n	80089bc <_printf_i+0x130>
 8008a44:	680b      	ldr	r3, [r1, #0]
 8008a46:	6826      	ldr	r6, [r4, #0]
 8008a48:	6960      	ldr	r0, [r4, #20]
 8008a4a:	1d1d      	adds	r5, r3, #4
 8008a4c:	600d      	str	r5, [r1, #0]
 8008a4e:	0635      	lsls	r5, r6, #24
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	d501      	bpl.n	8008a58 <_printf_i+0x1cc>
 8008a54:	6018      	str	r0, [r3, #0]
 8008a56:	e002      	b.n	8008a5e <_printf_i+0x1d2>
 8008a58:	0671      	lsls	r1, r6, #25
 8008a5a:	d5fb      	bpl.n	8008a54 <_printf_i+0x1c8>
 8008a5c:	8018      	strh	r0, [r3, #0]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	4616      	mov	r6, r2
 8008a64:	e7ba      	b.n	80089dc <_printf_i+0x150>
 8008a66:	680b      	ldr	r3, [r1, #0]
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	600a      	str	r2, [r1, #0]
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	6862      	ldr	r2, [r4, #4]
 8008a70:	2100      	movs	r1, #0
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7f7 fbb4 	bl	80001e0 <memchr>
 8008a78:	b108      	cbz	r0, 8008a7e <_printf_i+0x1f2>
 8008a7a:	1b80      	subs	r0, r0, r6
 8008a7c:	6060      	str	r0, [r4, #4]
 8008a7e:	6863      	ldr	r3, [r4, #4]
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	2300      	movs	r3, #0
 8008a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a88:	e7a8      	b.n	80089dc <_printf_i+0x150>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	4649      	mov	r1, r9
 8008a90:	4640      	mov	r0, r8
 8008a92:	47d0      	blx	sl
 8008a94:	3001      	adds	r0, #1
 8008a96:	d0ab      	beq.n	80089f0 <_printf_i+0x164>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	079b      	lsls	r3, r3, #30
 8008a9c:	d413      	bmi.n	8008ac6 <_printf_i+0x23a>
 8008a9e:	68e0      	ldr	r0, [r4, #12]
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	4298      	cmp	r0, r3
 8008aa4:	bfb8      	it	lt
 8008aa6:	4618      	movlt	r0, r3
 8008aa8:	e7a4      	b.n	80089f4 <_printf_i+0x168>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4632      	mov	r2, r6
 8008aae:	4649      	mov	r1, r9
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	47d0      	blx	sl
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d09b      	beq.n	80089f0 <_printf_i+0x164>
 8008ab8:	3501      	adds	r5, #1
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	9903      	ldr	r1, [sp, #12]
 8008abe:	1a5b      	subs	r3, r3, r1
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dcf2      	bgt.n	8008aaa <_printf_i+0x21e>
 8008ac4:	e7eb      	b.n	8008a9e <_printf_i+0x212>
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	f104 0619 	add.w	r6, r4, #25
 8008acc:	e7f5      	b.n	8008aba <_printf_i+0x22e>
 8008ace:	bf00      	nop
 8008ad0:	0800b988 	.word	0x0800b988
 8008ad4:	0800b999 	.word	0x0800b999

08008ad8 <siprintf>:
 8008ad8:	b40e      	push	{r1, r2, r3}
 8008ada:	b500      	push	{lr}
 8008adc:	b09c      	sub	sp, #112	; 0x70
 8008ade:	ab1d      	add	r3, sp, #116	; 0x74
 8008ae0:	9002      	str	r0, [sp, #8]
 8008ae2:	9006      	str	r0, [sp, #24]
 8008ae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ae8:	4809      	ldr	r0, [pc, #36]	; (8008b10 <siprintf+0x38>)
 8008aea:	9107      	str	r1, [sp, #28]
 8008aec:	9104      	str	r1, [sp, #16]
 8008aee:	4909      	ldr	r1, [pc, #36]	; (8008b14 <siprintf+0x3c>)
 8008af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af4:	9105      	str	r1, [sp, #20]
 8008af6:	6800      	ldr	r0, [r0, #0]
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	a902      	add	r1, sp, #8
 8008afc:	f001 fc68 	bl	800a3d0 <_svfiprintf_r>
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]
 8008b06:	b01c      	add	sp, #112	; 0x70
 8008b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b0c:	b003      	add	sp, #12
 8008b0e:	4770      	bx	lr
 8008b10:	20000044 	.word	0x20000044
 8008b14:	ffff0208 	.word	0xffff0208

08008b18 <siscanf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	b09f      	sub	sp, #124	; 0x7c
 8008b1e:	ac21      	add	r4, sp, #132	; 0x84
 8008b20:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008b24:	f854 2b04 	ldr.w	r2, [r4], #4
 8008b28:	9201      	str	r2, [sp, #4]
 8008b2a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008b2e:	9004      	str	r0, [sp, #16]
 8008b30:	9008      	str	r0, [sp, #32]
 8008b32:	f7f7 fb4d 	bl	80001d0 <strlen>
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <siscanf+0x50>)
 8008b38:	9005      	str	r0, [sp, #20]
 8008b3a:	9009      	str	r0, [sp, #36]	; 0x24
 8008b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b3e:	480b      	ldr	r0, [pc, #44]	; (8008b6c <siscanf+0x54>)
 8008b40:	9a01      	ldr	r2, [sp, #4]
 8008b42:	6800      	ldr	r0, [r0, #0]
 8008b44:	9403      	str	r4, [sp, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9311      	str	r3, [sp, #68]	; 0x44
 8008b4a:	9316      	str	r3, [sp, #88]	; 0x58
 8008b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b50:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4623      	mov	r3, r4
 8008b58:	f001 fd94 	bl	800a684 <__ssvfiscanf_r>
 8008b5c:	b01f      	add	sp, #124	; 0x7c
 8008b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b62:	b003      	add	sp, #12
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	08008b93 	.word	0x08008b93
 8008b6c:	20000044 	.word	0x20000044

08008b70 <__sread>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	460c      	mov	r4, r1
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	f002 f848 	bl	800ac0c <_read_r>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	bfab      	itete	ge
 8008b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b82:	89a3      	ldrhlt	r3, [r4, #12]
 8008b84:	181b      	addge	r3, r3, r0
 8008b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b8a:	bfac      	ite	ge
 8008b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b8e:	81a3      	strhlt	r3, [r4, #12]
 8008b90:	bd10      	pop	{r4, pc}

08008b92 <__seofread>:
 8008b92:	2000      	movs	r0, #0
 8008b94:	4770      	bx	lr

08008b96 <__swrite>:
 8008b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	898b      	ldrh	r3, [r1, #12]
 8008b9e:	05db      	lsls	r3, r3, #23
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	d505      	bpl.n	8008bb4 <__swrite+0x1e>
 8008ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bac:	2302      	movs	r3, #2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f000 ff52 	bl	8009a58 <_lseek_r>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bca:	f000 b8a7 	b.w	8008d1c <_write_r>

08008bce <__sseek>:
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd6:	f000 ff3f 	bl	8009a58 <_lseek_r>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	bf15      	itete	ne
 8008be0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008be2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008be6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bea:	81a3      	strheq	r3, [r4, #12]
 8008bec:	bf18      	it	ne
 8008bee:	81a3      	strhne	r3, [r4, #12]
 8008bf0:	bd10      	pop	{r4, pc}

08008bf2 <__sclose>:
 8008bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf6:	f000 b8a3 	b.w	8008d40 <_close_r>
	...

08008bfc <_strtol_l.isra.0>:
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c02:	d001      	beq.n	8008c08 <_strtol_l.isra.0+0xc>
 8008c04:	2b24      	cmp	r3, #36	; 0x24
 8008c06:	d906      	bls.n	8008c16 <_strtol_l.isra.0+0x1a>
 8008c08:	f7ff faca 	bl	80081a0 <__errno>
 8008c0c:	2316      	movs	r3, #22
 8008c0e:	6003      	str	r3, [r0, #0]
 8008c10:	2000      	movs	r0, #0
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	4f3a      	ldr	r7, [pc, #232]	; (8008d00 <_strtol_l.isra.0+0x104>)
 8008c18:	468e      	mov	lr, r1
 8008c1a:	4676      	mov	r6, lr
 8008c1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c20:	5de5      	ldrb	r5, [r4, r7]
 8008c22:	f015 0508 	ands.w	r5, r5, #8
 8008c26:	d1f8      	bne.n	8008c1a <_strtol_l.isra.0+0x1e>
 8008c28:	2c2d      	cmp	r4, #45	; 0x2d
 8008c2a:	d134      	bne.n	8008c96 <_strtol_l.isra.0+0x9a>
 8008c2c:	f89e 4000 	ldrb.w	r4, [lr]
 8008c30:	f04f 0801 	mov.w	r8, #1
 8008c34:	f106 0e02 	add.w	lr, r6, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d05c      	beq.n	8008cf6 <_strtol_l.isra.0+0xfa>
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d10c      	bne.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008c40:	2c30      	cmp	r4, #48	; 0x30
 8008c42:	d10a      	bne.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008c44:	f89e 4000 	ldrb.w	r4, [lr]
 8008c48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c4c:	2c58      	cmp	r4, #88	; 0x58
 8008c4e:	d14d      	bne.n	8008cec <_strtol_l.isra.0+0xf0>
 8008c50:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008c54:	2310      	movs	r3, #16
 8008c56:	f10e 0e02 	add.w	lr, lr, #2
 8008c5a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008c5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c62:	2600      	movs	r6, #0
 8008c64:	fbbc f9f3 	udiv	r9, ip, r3
 8008c68:	4635      	mov	r5, r6
 8008c6a:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c6e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c72:	2f09      	cmp	r7, #9
 8008c74:	d818      	bhi.n	8008ca8 <_strtol_l.isra.0+0xac>
 8008c76:	463c      	mov	r4, r7
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	dd24      	ble.n	8008cc6 <_strtol_l.isra.0+0xca>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	db1f      	blt.n	8008cc0 <_strtol_l.isra.0+0xc4>
 8008c80:	45a9      	cmp	r9, r5
 8008c82:	d31d      	bcc.n	8008cc0 <_strtol_l.isra.0+0xc4>
 8008c84:	d101      	bne.n	8008c8a <_strtol_l.isra.0+0x8e>
 8008c86:	45a2      	cmp	sl, r4
 8008c88:	db1a      	blt.n	8008cc0 <_strtol_l.isra.0+0xc4>
 8008c8a:	fb05 4503 	mla	r5, r5, r3, r4
 8008c8e:	2601      	movs	r6, #1
 8008c90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c94:	e7eb      	b.n	8008c6e <_strtol_l.isra.0+0x72>
 8008c96:	2c2b      	cmp	r4, #43	; 0x2b
 8008c98:	bf08      	it	eq
 8008c9a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008c9e:	46a8      	mov	r8, r5
 8008ca0:	bf08      	it	eq
 8008ca2:	f106 0e02 	addeq.w	lr, r6, #2
 8008ca6:	e7c7      	b.n	8008c38 <_strtol_l.isra.0+0x3c>
 8008ca8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008cac:	2f19      	cmp	r7, #25
 8008cae:	d801      	bhi.n	8008cb4 <_strtol_l.isra.0+0xb8>
 8008cb0:	3c37      	subs	r4, #55	; 0x37
 8008cb2:	e7e1      	b.n	8008c78 <_strtol_l.isra.0+0x7c>
 8008cb4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008cb8:	2f19      	cmp	r7, #25
 8008cba:	d804      	bhi.n	8008cc6 <_strtol_l.isra.0+0xca>
 8008cbc:	3c57      	subs	r4, #87	; 0x57
 8008cbe:	e7db      	b.n	8008c78 <_strtol_l.isra.0+0x7c>
 8008cc0:	f04f 36ff 	mov.w	r6, #4294967295
 8008cc4:	e7e4      	b.n	8008c90 <_strtol_l.isra.0+0x94>
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	da05      	bge.n	8008cd6 <_strtol_l.isra.0+0xda>
 8008cca:	2322      	movs	r3, #34	; 0x22
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	4665      	mov	r5, ip
 8008cd0:	b942      	cbnz	r2, 8008ce4 <_strtol_l.isra.0+0xe8>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	e79d      	b.n	8008c12 <_strtol_l.isra.0+0x16>
 8008cd6:	f1b8 0f00 	cmp.w	r8, #0
 8008cda:	d000      	beq.n	8008cde <_strtol_l.isra.0+0xe2>
 8008cdc:	426d      	negs	r5, r5
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	d0f7      	beq.n	8008cd2 <_strtol_l.isra.0+0xd6>
 8008ce2:	b10e      	cbz	r6, 8008ce8 <_strtol_l.isra.0+0xec>
 8008ce4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	e7f2      	b.n	8008cd2 <_strtol_l.isra.0+0xd6>
 8008cec:	2430      	movs	r4, #48	; 0x30
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1b3      	bne.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	e7b1      	b.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008cf6:	2c30      	cmp	r4, #48	; 0x30
 8008cf8:	d0a4      	beq.n	8008c44 <_strtol_l.isra.0+0x48>
 8008cfa:	230a      	movs	r3, #10
 8008cfc:	e7ad      	b.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008cfe:	bf00      	nop
 8008d00:	0800b9ab 	.word	0x0800b9ab

08008d04 <_strtol_r>:
 8008d04:	f7ff bf7a 	b.w	8008bfc <_strtol_l.isra.0>

08008d08 <strtol>:
 8008d08:	4613      	mov	r3, r2
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4802      	ldr	r0, [pc, #8]	; (8008d18 <strtol+0x10>)
 8008d10:	6800      	ldr	r0, [r0, #0]
 8008d12:	f7ff bf73 	b.w	8008bfc <_strtol_l.isra.0>
 8008d16:	bf00      	nop
 8008d18:	20000044 	.word	0x20000044

08008d1c <_write_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d07      	ldr	r5, [pc, #28]	; (8008d3c <_write_r+0x20>)
 8008d20:	4604      	mov	r4, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	602a      	str	r2, [r5, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f8 ff4b 	bl	8001bc6 <_write>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_write_r+0x1e>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_write_r+0x1e>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	2000044c 	.word	0x2000044c

08008d40 <_close_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d06      	ldr	r5, [pc, #24]	; (8008d5c <_close_r+0x1c>)
 8008d44:	2300      	movs	r3, #0
 8008d46:	4604      	mov	r4, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	602b      	str	r3, [r5, #0]
 8008d4c:	f7f8 ff57 	bl	8001bfe <_close>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_close_r+0x1a>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_close_r+0x1a>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	2000044c 	.word	0x2000044c

08008d60 <quorem>:
 8008d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	6903      	ldr	r3, [r0, #16]
 8008d66:	690c      	ldr	r4, [r1, #16]
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	f2c0 8081 	blt.w	8008e72 <quorem+0x112>
 8008d70:	3c01      	subs	r4, #1
 8008d72:	f101 0814 	add.w	r8, r1, #20
 8008d76:	f100 0514 	add.w	r5, r0, #20
 8008d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d98:	d331      	bcc.n	8008dfe <quorem+0x9e>
 8008d9a:	f04f 0e00 	mov.w	lr, #0
 8008d9e:	4640      	mov	r0, r8
 8008da0:	46ac      	mov	ip, r5
 8008da2:	46f2      	mov	sl, lr
 8008da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008da8:	b293      	uxth	r3, r2
 8008daa:	fb06 e303 	mla	r3, r6, r3, lr
 8008dae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	ebaa 0303 	sub.w	r3, sl, r3
 8008db8:	0c12      	lsrs	r2, r2, #16
 8008dba:	f8dc a000 	ldr.w	sl, [ip]
 8008dbe:	fb06 e202 	mla	r2, r6, r2, lr
 8008dc2:	fa13 f38a 	uxtah	r3, r3, sl
 8008dc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dca:	fa1f fa82 	uxth.w	sl, r2
 8008dce:	f8dc 2000 	ldr.w	r2, [ip]
 8008dd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008dd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de0:	4581      	cmp	r9, r0
 8008de2:	f84c 3b04 	str.w	r3, [ip], #4
 8008de6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008dea:	d2db      	bcs.n	8008da4 <quorem+0x44>
 8008dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8008df0:	b92b      	cbnz	r3, 8008dfe <quorem+0x9e>
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	3b04      	subs	r3, #4
 8008df6:	429d      	cmp	r5, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	d32e      	bcc.n	8008e5a <quorem+0xfa>
 8008dfc:	613c      	str	r4, [r7, #16]
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f001 f8d0 	bl	8009fa4 <__mcmp>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	db24      	blt.n	8008e52 <quorem+0xf2>
 8008e08:	3601      	adds	r6, #1
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f04f 0c00 	mov.w	ip, #0
 8008e10:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e14:	f8d0 e000 	ldr.w	lr, [r0]
 8008e18:	b293      	uxth	r3, r2
 8008e1a:	ebac 0303 	sub.w	r3, ip, r3
 8008e1e:	0c12      	lsrs	r2, r2, #16
 8008e20:	fa13 f38e 	uxtah	r3, r3, lr
 8008e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e32:	45c1      	cmp	r9, r8
 8008e34:	f840 3b04 	str.w	r3, [r0], #4
 8008e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e3c:	d2e8      	bcs.n	8008e10 <quorem+0xb0>
 8008e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e46:	b922      	cbnz	r2, 8008e52 <quorem+0xf2>
 8008e48:	3b04      	subs	r3, #4
 8008e4a:	429d      	cmp	r5, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	d30a      	bcc.n	8008e66 <quorem+0x106>
 8008e50:	613c      	str	r4, [r7, #16]
 8008e52:	4630      	mov	r0, r6
 8008e54:	b003      	add	sp, #12
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	3b04      	subs	r3, #4
 8008e5e:	2a00      	cmp	r2, #0
 8008e60:	d1cc      	bne.n	8008dfc <quorem+0x9c>
 8008e62:	3c01      	subs	r4, #1
 8008e64:	e7c7      	b.n	8008df6 <quorem+0x96>
 8008e66:	6812      	ldr	r2, [r2, #0]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	d1f0      	bne.n	8008e50 <quorem+0xf0>
 8008e6e:	3c01      	subs	r4, #1
 8008e70:	e7eb      	b.n	8008e4a <quorem+0xea>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e7ee      	b.n	8008e54 <quorem+0xf4>
	...

08008e78 <_dtoa_r>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	ed2d 8b02 	vpush	{d8}
 8008e80:	ec57 6b10 	vmov	r6, r7, d0
 8008e84:	b095      	sub	sp, #84	; 0x54
 8008e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e8c:	9105      	str	r1, [sp, #20]
 8008e8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008e92:	4604      	mov	r4, r0
 8008e94:	9209      	str	r2, [sp, #36]	; 0x24
 8008e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e98:	b975      	cbnz	r5, 8008eb8 <_dtoa_r+0x40>
 8008e9a:	2010      	movs	r0, #16
 8008e9c:	f000 fdee 	bl	8009a7c <malloc>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ea4:	b920      	cbnz	r0, 8008eb0 <_dtoa_r+0x38>
 8008ea6:	4bb2      	ldr	r3, [pc, #712]	; (8009170 <_dtoa_r+0x2f8>)
 8008ea8:	21ea      	movs	r1, #234	; 0xea
 8008eaa:	48b2      	ldr	r0, [pc, #712]	; (8009174 <_dtoa_r+0x2fc>)
 8008eac:	f001 ffc2 	bl	800ae34 <__assert_func>
 8008eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008eb4:	6005      	str	r5, [r0, #0]
 8008eb6:	60c5      	str	r5, [r0, #12]
 8008eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eba:	6819      	ldr	r1, [r3, #0]
 8008ebc:	b151      	cbz	r1, 8008ed4 <_dtoa_r+0x5c>
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	604a      	str	r2, [r1, #4]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4093      	lsls	r3, r2
 8008ec6:	608b      	str	r3, [r1, #8]
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fe2d 	bl	8009b28 <_Bfree>
 8008ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	1e3b      	subs	r3, r7, #0
 8008ed6:	bfb9      	ittee	lt
 8008ed8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008edc:	9303      	strlt	r3, [sp, #12]
 8008ede:	2300      	movge	r3, #0
 8008ee0:	f8c8 3000 	strge.w	r3, [r8]
 8008ee4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ee8:	4ba3      	ldr	r3, [pc, #652]	; (8009178 <_dtoa_r+0x300>)
 8008eea:	bfbc      	itt	lt
 8008eec:	2201      	movlt	r2, #1
 8008eee:	f8c8 2000 	strlt.w	r2, [r8]
 8008ef2:	ea33 0309 	bics.w	r3, r3, r9
 8008ef6:	d11b      	bne.n	8008f30 <_dtoa_r+0xb8>
 8008ef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008efa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f04:	4333      	orrs	r3, r6
 8008f06:	f000 857a 	beq.w	80099fe <_dtoa_r+0xb86>
 8008f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f0c:	b963      	cbnz	r3, 8008f28 <_dtoa_r+0xb0>
 8008f0e:	4b9b      	ldr	r3, [pc, #620]	; (800917c <_dtoa_r+0x304>)
 8008f10:	e024      	b.n	8008f5c <_dtoa_r+0xe4>
 8008f12:	4b9b      	ldr	r3, [pc, #620]	; (8009180 <_dtoa_r+0x308>)
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	9800      	ldr	r0, [sp, #0]
 8008f1e:	b015      	add	sp, #84	; 0x54
 8008f20:	ecbd 8b02 	vpop	{d8}
 8008f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f28:	4b94      	ldr	r3, [pc, #592]	; (800917c <_dtoa_r+0x304>)
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	3303      	adds	r3, #3
 8008f2e:	e7f3      	b.n	8008f18 <_dtoa_r+0xa0>
 8008f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	ec51 0b17 	vmov	r0, r1, d7
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008f40:	f7f7 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f44:	4680      	mov	r8, r0
 8008f46:	b158      	cbz	r0, 8008f60 <_dtoa_r+0xe8>
 8008f48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 8551 	beq.w	80099f8 <_dtoa_r+0xb80>
 8008f56:	488b      	ldr	r0, [pc, #556]	; (8009184 <_dtoa_r+0x30c>)
 8008f58:	6018      	str	r0, [r3, #0]
 8008f5a:	1e43      	subs	r3, r0, #1
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	e7dd      	b.n	8008f1c <_dtoa_r+0xa4>
 8008f60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008f64:	aa12      	add	r2, sp, #72	; 0x48
 8008f66:	a913      	add	r1, sp, #76	; 0x4c
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f001 f8bf 	bl	800a0ec <__d2b>
 8008f6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f72:	4683      	mov	fp, r0
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	d07c      	beq.n	8009072 <_dtoa_r+0x1fa>
 8008f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008f86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f92:	4b7d      	ldr	r3, [pc, #500]	; (8009188 <_dtoa_r+0x310>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	f7f7 f975 	bl	8000288 <__aeabi_dsub>
 8008f9e:	a36e      	add	r3, pc, #440	; (adr r3, 8009158 <_dtoa_r+0x2e0>)
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	a36d      	add	r3, pc, #436	; (adr r3, 8009160 <_dtoa_r+0x2e8>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 f96d 	bl	800028c <__adddf3>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	f7f7 fab4 	bl	8000524 <__aeabi_i2d>
 8008fbc:	a36a      	add	r3, pc, #424	; (adr r3, 8009168 <_dtoa_r+0x2f0>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 fb19 	bl	80005f8 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 f95d 	bl	800028c <__adddf3>
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	f7f7 fdbf 	bl	8000b58 <__aeabi_d2iz>
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4682      	mov	sl, r0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 fd7a 	bl	8000adc <__aeabi_dcmplt>
 8008fe8:	b148      	cbz	r0, 8008ffe <_dtoa_r+0x186>
 8008fea:	4650      	mov	r0, sl
 8008fec:	f7f7 fa9a 	bl	8000524 <__aeabi_i2d>
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	f7f7 fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff8:	b908      	cbnz	r0, 8008ffe <_dtoa_r+0x186>
 8008ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ffe:	f1ba 0f16 	cmp.w	sl, #22
 8009002:	d854      	bhi.n	80090ae <_dtoa_r+0x236>
 8009004:	4b61      	ldr	r3, [pc, #388]	; (800918c <_dtoa_r+0x314>)
 8009006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009012:	f7f7 fd63 	bl	8000adc <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	d04b      	beq.n	80090b2 <_dtoa_r+0x23a>
 800901a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800901e:	2300      	movs	r3, #0
 8009020:	930e      	str	r3, [sp, #56]	; 0x38
 8009022:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009024:	1b5d      	subs	r5, r3, r5
 8009026:	1e6b      	subs	r3, r5, #1
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	bf43      	ittte	mi
 800902c:	2300      	movmi	r3, #0
 800902e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009032:	9304      	strmi	r3, [sp, #16]
 8009034:	f04f 0800 	movpl.w	r8, #0
 8009038:	f1ba 0f00 	cmp.w	sl, #0
 800903c:	db3b      	blt.n	80090b6 <_dtoa_r+0x23e>
 800903e:	9b04      	ldr	r3, [sp, #16]
 8009040:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009044:	4453      	add	r3, sl
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	2300      	movs	r3, #0
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	9b05      	ldr	r3, [sp, #20]
 800904e:	2b09      	cmp	r3, #9
 8009050:	d869      	bhi.n	8009126 <_dtoa_r+0x2ae>
 8009052:	2b05      	cmp	r3, #5
 8009054:	bfc4      	itt	gt
 8009056:	3b04      	subgt	r3, #4
 8009058:	9305      	strgt	r3, [sp, #20]
 800905a:	9b05      	ldr	r3, [sp, #20]
 800905c:	f1a3 0302 	sub.w	r3, r3, #2
 8009060:	bfcc      	ite	gt
 8009062:	2500      	movgt	r5, #0
 8009064:	2501      	movle	r5, #1
 8009066:	2b03      	cmp	r3, #3
 8009068:	d869      	bhi.n	800913e <_dtoa_r+0x2c6>
 800906a:	e8df f003 	tbb	[pc, r3]
 800906e:	4e2c      	.short	0x4e2c
 8009070:	5a4c      	.short	0x5a4c
 8009072:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009076:	441d      	add	r5, r3
 8009078:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800907c:	2b20      	cmp	r3, #32
 800907e:	bfc1      	itttt	gt
 8009080:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009084:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009088:	fa09 f303 	lslgt.w	r3, r9, r3
 800908c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009090:	bfda      	itte	le
 8009092:	f1c3 0320 	rsble	r3, r3, #32
 8009096:	fa06 f003 	lslle.w	r0, r6, r3
 800909a:	4318      	orrgt	r0, r3
 800909c:	f7f7 fa32 	bl	8000504 <__aeabi_ui2d>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4606      	mov	r6, r0
 80090a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80090a8:	3d01      	subs	r5, #1
 80090aa:	9310      	str	r3, [sp, #64]	; 0x40
 80090ac:	e771      	b.n	8008f92 <_dtoa_r+0x11a>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e7b6      	b.n	8009020 <_dtoa_r+0x1a8>
 80090b2:	900e      	str	r0, [sp, #56]	; 0x38
 80090b4:	e7b5      	b.n	8009022 <_dtoa_r+0x1aa>
 80090b6:	f1ca 0300 	rsb	r3, sl, #0
 80090ba:	9306      	str	r3, [sp, #24]
 80090bc:	2300      	movs	r3, #0
 80090be:	eba8 080a 	sub.w	r8, r8, sl
 80090c2:	930d      	str	r3, [sp, #52]	; 0x34
 80090c4:	e7c2      	b.n	800904c <_dtoa_r+0x1d4>
 80090c6:	2300      	movs	r3, #0
 80090c8:	9308      	str	r3, [sp, #32]
 80090ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dc39      	bgt.n	8009144 <_dtoa_r+0x2cc>
 80090d0:	f04f 0901 	mov.w	r9, #1
 80090d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80090d8:	464b      	mov	r3, r9
 80090da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80090de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090e0:	2200      	movs	r2, #0
 80090e2:	6042      	str	r2, [r0, #4]
 80090e4:	2204      	movs	r2, #4
 80090e6:	f102 0614 	add.w	r6, r2, #20
 80090ea:	429e      	cmp	r6, r3
 80090ec:	6841      	ldr	r1, [r0, #4]
 80090ee:	d92f      	bls.n	8009150 <_dtoa_r+0x2d8>
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fcd9 	bl	8009aa8 <_Balloc>
 80090f6:	9000      	str	r0, [sp, #0]
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d14b      	bne.n	8009194 <_dtoa_r+0x31c>
 80090fc:	4b24      	ldr	r3, [pc, #144]	; (8009190 <_dtoa_r+0x318>)
 80090fe:	4602      	mov	r2, r0
 8009100:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009104:	e6d1      	b.n	8008eaa <_dtoa_r+0x32>
 8009106:	2301      	movs	r3, #1
 8009108:	e7de      	b.n	80090c8 <_dtoa_r+0x250>
 800910a:	2300      	movs	r3, #0
 800910c:	9308      	str	r3, [sp, #32]
 800910e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009110:	eb0a 0903 	add.w	r9, sl, r3
 8009114:	f109 0301 	add.w	r3, r9, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	bfb8      	it	lt
 800911e:	2301      	movlt	r3, #1
 8009120:	e7dd      	b.n	80090de <_dtoa_r+0x266>
 8009122:	2301      	movs	r3, #1
 8009124:	e7f2      	b.n	800910c <_dtoa_r+0x294>
 8009126:	2501      	movs	r5, #1
 8009128:	2300      	movs	r3, #0
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	9508      	str	r5, [sp, #32]
 800912e:	f04f 39ff 	mov.w	r9, #4294967295
 8009132:	2200      	movs	r2, #0
 8009134:	f8cd 9004 	str.w	r9, [sp, #4]
 8009138:	2312      	movs	r3, #18
 800913a:	9209      	str	r2, [sp, #36]	; 0x24
 800913c:	e7cf      	b.n	80090de <_dtoa_r+0x266>
 800913e:	2301      	movs	r3, #1
 8009140:	9308      	str	r3, [sp, #32]
 8009142:	e7f4      	b.n	800912e <_dtoa_r+0x2b6>
 8009144:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009148:	f8cd 9004 	str.w	r9, [sp, #4]
 800914c:	464b      	mov	r3, r9
 800914e:	e7c6      	b.n	80090de <_dtoa_r+0x266>
 8009150:	3101      	adds	r1, #1
 8009152:	6041      	str	r1, [r0, #4]
 8009154:	0052      	lsls	r2, r2, #1
 8009156:	e7c6      	b.n	80090e6 <_dtoa_r+0x26e>
 8009158:	636f4361 	.word	0x636f4361
 800915c:	3fd287a7 	.word	0x3fd287a7
 8009160:	8b60c8b3 	.word	0x8b60c8b3
 8009164:	3fc68a28 	.word	0x3fc68a28
 8009168:	509f79fb 	.word	0x509f79fb
 800916c:	3fd34413 	.word	0x3fd34413
 8009170:	0800bab8 	.word	0x0800bab8
 8009174:	0800bacf 	.word	0x0800bacf
 8009178:	7ff00000 	.word	0x7ff00000
 800917c:	0800bab4 	.word	0x0800bab4
 8009180:	0800baab 	.word	0x0800baab
 8009184:	0800bcb2 	.word	0x0800bcb2
 8009188:	3ff80000 	.word	0x3ff80000
 800918c:	0800bbc8 	.word	0x0800bbc8
 8009190:	0800bb2e 	.word	0x0800bb2e
 8009194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009196:	9a00      	ldr	r2, [sp, #0]
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	2b0e      	cmp	r3, #14
 800919e:	f200 80ad 	bhi.w	80092fc <_dtoa_r+0x484>
 80091a2:	2d00      	cmp	r5, #0
 80091a4:	f000 80aa 	beq.w	80092fc <_dtoa_r+0x484>
 80091a8:	f1ba 0f00 	cmp.w	sl, #0
 80091ac:	dd36      	ble.n	800921c <_dtoa_r+0x3a4>
 80091ae:	4ac3      	ldr	r2, [pc, #780]	; (80094bc <_dtoa_r+0x644>)
 80091b0:	f00a 030f 	and.w	r3, sl, #15
 80091b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091b8:	ed93 7b00 	vldr	d7, [r3]
 80091bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80091c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80091c4:	eeb0 8a47 	vmov.f32	s16, s14
 80091c8:	eef0 8a67 	vmov.f32	s17, s15
 80091cc:	d016      	beq.n	80091fc <_dtoa_r+0x384>
 80091ce:	4bbc      	ldr	r3, [pc, #752]	; (80094c0 <_dtoa_r+0x648>)
 80091d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091d8:	f7f7 fb38 	bl	800084c <__aeabi_ddiv>
 80091dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091e0:	f007 070f 	and.w	r7, r7, #15
 80091e4:	2503      	movs	r5, #3
 80091e6:	4eb6      	ldr	r6, [pc, #728]	; (80094c0 <_dtoa_r+0x648>)
 80091e8:	b957      	cbnz	r7, 8009200 <_dtoa_r+0x388>
 80091ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ee:	ec53 2b18 	vmov	r2, r3, d8
 80091f2:	f7f7 fb2b 	bl	800084c <__aeabi_ddiv>
 80091f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091fa:	e029      	b.n	8009250 <_dtoa_r+0x3d8>
 80091fc:	2502      	movs	r5, #2
 80091fe:	e7f2      	b.n	80091e6 <_dtoa_r+0x36e>
 8009200:	07f9      	lsls	r1, r7, #31
 8009202:	d508      	bpl.n	8009216 <_dtoa_r+0x39e>
 8009204:	ec51 0b18 	vmov	r0, r1, d8
 8009208:	e9d6 2300 	ldrd	r2, r3, [r6]
 800920c:	f7f7 f9f4 	bl	80005f8 <__aeabi_dmul>
 8009210:	ec41 0b18 	vmov	d8, r0, r1
 8009214:	3501      	adds	r5, #1
 8009216:	107f      	asrs	r7, r7, #1
 8009218:	3608      	adds	r6, #8
 800921a:	e7e5      	b.n	80091e8 <_dtoa_r+0x370>
 800921c:	f000 80a6 	beq.w	800936c <_dtoa_r+0x4f4>
 8009220:	f1ca 0600 	rsb	r6, sl, #0
 8009224:	4ba5      	ldr	r3, [pc, #660]	; (80094bc <_dtoa_r+0x644>)
 8009226:	4fa6      	ldr	r7, [pc, #664]	; (80094c0 <_dtoa_r+0x648>)
 8009228:	f006 020f 	and.w	r2, r6, #15
 800922c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009238:	f7f7 f9de 	bl	80005f8 <__aeabi_dmul>
 800923c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009240:	1136      	asrs	r6, r6, #4
 8009242:	2300      	movs	r3, #0
 8009244:	2502      	movs	r5, #2
 8009246:	2e00      	cmp	r6, #0
 8009248:	f040 8085 	bne.w	8009356 <_dtoa_r+0x4de>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1d2      	bne.n	80091f6 <_dtoa_r+0x37e>
 8009250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 808c 	beq.w	8009370 <_dtoa_r+0x4f8>
 8009258:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800925c:	4b99      	ldr	r3, [pc, #612]	; (80094c4 <_dtoa_r+0x64c>)
 800925e:	2200      	movs	r2, #0
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 fc3a 	bl	8000adc <__aeabi_dcmplt>
 8009268:	2800      	cmp	r0, #0
 800926a:	f000 8081 	beq.w	8009370 <_dtoa_r+0x4f8>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d07d      	beq.n	8009370 <_dtoa_r+0x4f8>
 8009274:	f1b9 0f00 	cmp.w	r9, #0
 8009278:	dd3c      	ble.n	80092f4 <_dtoa_r+0x47c>
 800927a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800927e:	9307      	str	r3, [sp, #28]
 8009280:	2200      	movs	r2, #0
 8009282:	4b91      	ldr	r3, [pc, #580]	; (80094c8 <_dtoa_r+0x650>)
 8009284:	4630      	mov	r0, r6
 8009286:	4639      	mov	r1, r7
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009290:	3501      	adds	r5, #1
 8009292:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009296:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800929a:	4628      	mov	r0, r5
 800929c:	f7f7 f942 	bl	8000524 <__aeabi_i2d>
 80092a0:	4632      	mov	r2, r6
 80092a2:	463b      	mov	r3, r7
 80092a4:	f7f7 f9a8 	bl	80005f8 <__aeabi_dmul>
 80092a8:	4b88      	ldr	r3, [pc, #544]	; (80094cc <_dtoa_r+0x654>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7f6 ffee 	bl	800028c <__adddf3>
 80092b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80092b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b8:	9303      	str	r3, [sp, #12]
 80092ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d15c      	bne.n	800937a <_dtoa_r+0x502>
 80092c0:	4b83      	ldr	r3, [pc, #524]	; (80094d0 <_dtoa_r+0x658>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	4630      	mov	r0, r6
 80092c6:	4639      	mov	r1, r7
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092d0:	4606      	mov	r6, r0
 80092d2:	460f      	mov	r7, r1
 80092d4:	f7f7 fc20 	bl	8000b18 <__aeabi_dcmpgt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	f040 8296 	bne.w	800980a <_dtoa_r+0x992>
 80092de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80092e2:	4630      	mov	r0, r6
 80092e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092e8:	4639      	mov	r1, r7
 80092ea:	f7f7 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f040 8288 	bne.w	8009804 <_dtoa_r+0x98c>
 80092f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f2c0 8158 	blt.w	80095b4 <_dtoa_r+0x73c>
 8009304:	f1ba 0f0e 	cmp.w	sl, #14
 8009308:	f300 8154 	bgt.w	80095b4 <_dtoa_r+0x73c>
 800930c:	4b6b      	ldr	r3, [pc, #428]	; (80094bc <_dtoa_r+0x644>)
 800930e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009312:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	f280 80e3 	bge.w	80094e4 <_dtoa_r+0x66c>
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f300 80df 	bgt.w	80094e4 <_dtoa_r+0x66c>
 8009326:	f040 826d 	bne.w	8009804 <_dtoa_r+0x98c>
 800932a:	4b69      	ldr	r3, [pc, #420]	; (80094d0 <_dtoa_r+0x658>)
 800932c:	2200      	movs	r2, #0
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800933a:	f7f7 fbe3 	bl	8000b04 <__aeabi_dcmpge>
 800933e:	9e01      	ldr	r6, [sp, #4]
 8009340:	4637      	mov	r7, r6
 8009342:	2800      	cmp	r0, #0
 8009344:	f040 8243 	bne.w	80097ce <_dtoa_r+0x956>
 8009348:	9d00      	ldr	r5, [sp, #0]
 800934a:	2331      	movs	r3, #49	; 0x31
 800934c:	f805 3b01 	strb.w	r3, [r5], #1
 8009350:	f10a 0a01 	add.w	sl, sl, #1
 8009354:	e23f      	b.n	80097d6 <_dtoa_r+0x95e>
 8009356:	07f2      	lsls	r2, r6, #31
 8009358:	d505      	bpl.n	8009366 <_dtoa_r+0x4ee>
 800935a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935e:	f7f7 f94b 	bl	80005f8 <__aeabi_dmul>
 8009362:	3501      	adds	r5, #1
 8009364:	2301      	movs	r3, #1
 8009366:	1076      	asrs	r6, r6, #1
 8009368:	3708      	adds	r7, #8
 800936a:	e76c      	b.n	8009246 <_dtoa_r+0x3ce>
 800936c:	2502      	movs	r5, #2
 800936e:	e76f      	b.n	8009250 <_dtoa_r+0x3d8>
 8009370:	9b01      	ldr	r3, [sp, #4]
 8009372:	f8cd a01c 	str.w	sl, [sp, #28]
 8009376:	930c      	str	r3, [sp, #48]	; 0x30
 8009378:	e78d      	b.n	8009296 <_dtoa_r+0x41e>
 800937a:	9900      	ldr	r1, [sp, #0]
 800937c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800937e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009380:	4b4e      	ldr	r3, [pc, #312]	; (80094bc <_dtoa_r+0x644>)
 8009382:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009386:	4401      	add	r1, r0
 8009388:	9102      	str	r1, [sp, #8]
 800938a:	9908      	ldr	r1, [sp, #32]
 800938c:	eeb0 8a47 	vmov.f32	s16, s14
 8009390:	eef0 8a67 	vmov.f32	s17, s15
 8009394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800939c:	2900      	cmp	r1, #0
 800939e:	d045      	beq.n	800942c <_dtoa_r+0x5b4>
 80093a0:	494c      	ldr	r1, [pc, #304]	; (80094d4 <_dtoa_r+0x65c>)
 80093a2:	2000      	movs	r0, #0
 80093a4:	f7f7 fa52 	bl	800084c <__aeabi_ddiv>
 80093a8:	ec53 2b18 	vmov	r2, r3, d8
 80093ac:	f7f6 ff6c 	bl	8000288 <__aeabi_dsub>
 80093b0:	9d00      	ldr	r5, [sp, #0]
 80093b2:	ec41 0b18 	vmov	d8, r0, r1
 80093b6:	4639      	mov	r1, r7
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7f7 fbcd 	bl	8000b58 <__aeabi_d2iz>
 80093be:	900c      	str	r0, [sp, #48]	; 0x30
 80093c0:	f7f7 f8b0 	bl	8000524 <__aeabi_i2d>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d2:	3330      	adds	r3, #48	; 0x30
 80093d4:	f805 3b01 	strb.w	r3, [r5], #1
 80093d8:	ec53 2b18 	vmov	r2, r3, d8
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	f7f7 fb7c 	bl	8000adc <__aeabi_dcmplt>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d165      	bne.n	80094b4 <_dtoa_r+0x63c>
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	4935      	ldr	r1, [pc, #212]	; (80094c4 <_dtoa_r+0x64c>)
 80093ee:	2000      	movs	r0, #0
 80093f0:	f7f6 ff4a 	bl	8000288 <__aeabi_dsub>
 80093f4:	ec53 2b18 	vmov	r2, r3, d8
 80093f8:	f7f7 fb70 	bl	8000adc <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f040 80b9 	bne.w	8009574 <_dtoa_r+0x6fc>
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	429d      	cmp	r5, r3
 8009406:	f43f af75 	beq.w	80092f4 <_dtoa_r+0x47c>
 800940a:	4b2f      	ldr	r3, [pc, #188]	; (80094c8 <_dtoa_r+0x650>)
 800940c:	ec51 0b18 	vmov	r0, r1, d8
 8009410:	2200      	movs	r2, #0
 8009412:	f7f7 f8f1 	bl	80005f8 <__aeabi_dmul>
 8009416:	4b2c      	ldr	r3, [pc, #176]	; (80094c8 <_dtoa_r+0x650>)
 8009418:	ec41 0b18 	vmov	d8, r0, r1
 800941c:	2200      	movs	r2, #0
 800941e:	4630      	mov	r0, r6
 8009420:	4639      	mov	r1, r7
 8009422:	f7f7 f8e9 	bl	80005f8 <__aeabi_dmul>
 8009426:	4606      	mov	r6, r0
 8009428:	460f      	mov	r7, r1
 800942a:	e7c4      	b.n	80093b6 <_dtoa_r+0x53e>
 800942c:	ec51 0b17 	vmov	r0, r1, d7
 8009430:	f7f7 f8e2 	bl	80005f8 <__aeabi_dmul>
 8009434:	9b02      	ldr	r3, [sp, #8]
 8009436:	9d00      	ldr	r5, [sp, #0]
 8009438:	930c      	str	r3, [sp, #48]	; 0x30
 800943a:	ec41 0b18 	vmov	d8, r0, r1
 800943e:	4639      	mov	r1, r7
 8009440:	4630      	mov	r0, r6
 8009442:	f7f7 fb89 	bl	8000b58 <__aeabi_d2iz>
 8009446:	9011      	str	r0, [sp, #68]	; 0x44
 8009448:	f7f7 f86c 	bl	8000524 <__aeabi_i2d>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f6 ff18 	bl	8000288 <__aeabi_dsub>
 8009458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800945a:	3330      	adds	r3, #48	; 0x30
 800945c:	f805 3b01 	strb.w	r3, [r5], #1
 8009460:	9b02      	ldr	r3, [sp, #8]
 8009462:	429d      	cmp	r5, r3
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	d134      	bne.n	80094d8 <_dtoa_r+0x660>
 800946e:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <_dtoa_r+0x65c>)
 8009470:	ec51 0b18 	vmov	r0, r1, d8
 8009474:	f7f6 ff0a 	bl	800028c <__adddf3>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 8009484:	2800      	cmp	r0, #0
 8009486:	d175      	bne.n	8009574 <_dtoa_r+0x6fc>
 8009488:	ec53 2b18 	vmov	r2, r3, d8
 800948c:	4911      	ldr	r1, [pc, #68]	; (80094d4 <_dtoa_r+0x65c>)
 800948e:	2000      	movs	r0, #0
 8009490:	f7f6 fefa 	bl	8000288 <__aeabi_dsub>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f7 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f43f af27 	beq.w	80092f4 <_dtoa_r+0x47c>
 80094a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094a8:	1e6b      	subs	r3, r5, #1
 80094aa:	930c      	str	r3, [sp, #48]	; 0x30
 80094ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094b0:	2b30      	cmp	r3, #48	; 0x30
 80094b2:	d0f8      	beq.n	80094a6 <_dtoa_r+0x62e>
 80094b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80094b8:	e04a      	b.n	8009550 <_dtoa_r+0x6d8>
 80094ba:	bf00      	nop
 80094bc:	0800bbc8 	.word	0x0800bbc8
 80094c0:	0800bba0 	.word	0x0800bba0
 80094c4:	3ff00000 	.word	0x3ff00000
 80094c8:	40240000 	.word	0x40240000
 80094cc:	401c0000 	.word	0x401c0000
 80094d0:	40140000 	.word	0x40140000
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	4baf      	ldr	r3, [pc, #700]	; (8009798 <_dtoa_r+0x920>)
 80094da:	f7f7 f88d 	bl	80005f8 <__aeabi_dmul>
 80094de:	4606      	mov	r6, r0
 80094e0:	460f      	mov	r7, r1
 80094e2:	e7ac      	b.n	800943e <_dtoa_r+0x5c6>
 80094e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094e8:	9d00      	ldr	r5, [sp, #0]
 80094ea:	4642      	mov	r2, r8
 80094ec:	464b      	mov	r3, r9
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f7 f9ab 	bl	800084c <__aeabi_ddiv>
 80094f6:	f7f7 fb2f 	bl	8000b58 <__aeabi_d2iz>
 80094fa:	9002      	str	r0, [sp, #8]
 80094fc:	f7f7 f812 	bl	8000524 <__aeabi_i2d>
 8009500:	4642      	mov	r2, r8
 8009502:	464b      	mov	r3, r9
 8009504:	f7f7 f878 	bl	80005f8 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4630      	mov	r0, r6
 800950e:	4639      	mov	r1, r7
 8009510:	f7f6 feba 	bl	8000288 <__aeabi_dsub>
 8009514:	9e02      	ldr	r6, [sp, #8]
 8009516:	9f01      	ldr	r7, [sp, #4]
 8009518:	3630      	adds	r6, #48	; 0x30
 800951a:	f805 6b01 	strb.w	r6, [r5], #1
 800951e:	9e00      	ldr	r6, [sp, #0]
 8009520:	1bae      	subs	r6, r5, r6
 8009522:	42b7      	cmp	r7, r6
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	d137      	bne.n	800959a <_dtoa_r+0x722>
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4642      	mov	r2, r8
 8009530:	464b      	mov	r3, r9
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	f7f7 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800953a:	b9c8      	cbnz	r0, 8009570 <_dtoa_r+0x6f8>
 800953c:	4642      	mov	r2, r8
 800953e:	464b      	mov	r3, r9
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009548:	b110      	cbz	r0, 8009550 <_dtoa_r+0x6d8>
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	07d9      	lsls	r1, r3, #31
 800954e:	d40f      	bmi.n	8009570 <_dtoa_r+0x6f8>
 8009550:	4620      	mov	r0, r4
 8009552:	4659      	mov	r1, fp
 8009554:	f000 fae8 	bl	8009b28 <_Bfree>
 8009558:	2300      	movs	r3, #0
 800955a:	702b      	strb	r3, [r5, #0]
 800955c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800955e:	f10a 0001 	add.w	r0, sl, #1
 8009562:	6018      	str	r0, [r3, #0]
 8009564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009566:	2b00      	cmp	r3, #0
 8009568:	f43f acd8 	beq.w	8008f1c <_dtoa_r+0xa4>
 800956c:	601d      	str	r5, [r3, #0]
 800956e:	e4d5      	b.n	8008f1c <_dtoa_r+0xa4>
 8009570:	f8cd a01c 	str.w	sl, [sp, #28]
 8009574:	462b      	mov	r3, r5
 8009576:	461d      	mov	r5, r3
 8009578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800957c:	2a39      	cmp	r2, #57	; 0x39
 800957e:	d108      	bne.n	8009592 <_dtoa_r+0x71a>
 8009580:	9a00      	ldr	r2, [sp, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d1f7      	bne.n	8009576 <_dtoa_r+0x6fe>
 8009586:	9a07      	ldr	r2, [sp, #28]
 8009588:	9900      	ldr	r1, [sp, #0]
 800958a:	3201      	adds	r2, #1
 800958c:	9207      	str	r2, [sp, #28]
 800958e:	2230      	movs	r2, #48	; 0x30
 8009590:	700a      	strb	r2, [r1, #0]
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	3201      	adds	r2, #1
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e78c      	b.n	80094b4 <_dtoa_r+0x63c>
 800959a:	4b7f      	ldr	r3, [pc, #508]	; (8009798 <_dtoa_r+0x920>)
 800959c:	2200      	movs	r2, #0
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	2200      	movs	r2, #0
 80095a4:	2300      	movs	r3, #0
 80095a6:	4606      	mov	r6, r0
 80095a8:	460f      	mov	r7, r1
 80095aa:	f7f7 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d09b      	beq.n	80094ea <_dtoa_r+0x672>
 80095b2:	e7cd      	b.n	8009550 <_dtoa_r+0x6d8>
 80095b4:	9a08      	ldr	r2, [sp, #32]
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	f000 80c4 	beq.w	8009744 <_dtoa_r+0x8cc>
 80095bc:	9a05      	ldr	r2, [sp, #20]
 80095be:	2a01      	cmp	r2, #1
 80095c0:	f300 80a8 	bgt.w	8009714 <_dtoa_r+0x89c>
 80095c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	f000 80a0 	beq.w	800970c <_dtoa_r+0x894>
 80095cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095d0:	9e06      	ldr	r6, [sp, #24]
 80095d2:	4645      	mov	r5, r8
 80095d4:	9a04      	ldr	r2, [sp, #16]
 80095d6:	2101      	movs	r1, #1
 80095d8:	441a      	add	r2, r3
 80095da:	4620      	mov	r0, r4
 80095dc:	4498      	add	r8, r3
 80095de:	9204      	str	r2, [sp, #16]
 80095e0:	f000 fb5e 	bl	8009ca0 <__i2b>
 80095e4:	4607      	mov	r7, r0
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	dd0b      	ble.n	8009602 <_dtoa_r+0x78a>
 80095ea:	9b04      	ldr	r3, [sp, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dd08      	ble.n	8009602 <_dtoa_r+0x78a>
 80095f0:	42ab      	cmp	r3, r5
 80095f2:	9a04      	ldr	r2, [sp, #16]
 80095f4:	bfa8      	it	ge
 80095f6:	462b      	movge	r3, r5
 80095f8:	eba8 0803 	sub.w	r8, r8, r3
 80095fc:	1aed      	subs	r5, r5, r3
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	9304      	str	r3, [sp, #16]
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	b1fb      	cbz	r3, 8009646 <_dtoa_r+0x7ce>
 8009606:	9b08      	ldr	r3, [sp, #32]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 809f 	beq.w	800974c <_dtoa_r+0x8d4>
 800960e:	2e00      	cmp	r6, #0
 8009610:	dd11      	ble.n	8009636 <_dtoa_r+0x7be>
 8009612:	4639      	mov	r1, r7
 8009614:	4632      	mov	r2, r6
 8009616:	4620      	mov	r0, r4
 8009618:	f000 fbfe 	bl	8009e18 <__pow5mult>
 800961c:	465a      	mov	r2, fp
 800961e:	4601      	mov	r1, r0
 8009620:	4607      	mov	r7, r0
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fb52 	bl	8009ccc <__multiply>
 8009628:	4659      	mov	r1, fp
 800962a:	9007      	str	r0, [sp, #28]
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fa7b 	bl	8009b28 <_Bfree>
 8009632:	9b07      	ldr	r3, [sp, #28]
 8009634:	469b      	mov	fp, r3
 8009636:	9b06      	ldr	r3, [sp, #24]
 8009638:	1b9a      	subs	r2, r3, r6
 800963a:	d004      	beq.n	8009646 <_dtoa_r+0x7ce>
 800963c:	4659      	mov	r1, fp
 800963e:	4620      	mov	r0, r4
 8009640:	f000 fbea 	bl	8009e18 <__pow5mult>
 8009644:	4683      	mov	fp, r0
 8009646:	2101      	movs	r1, #1
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fb29 	bl	8009ca0 <__i2b>
 800964e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009650:	2b00      	cmp	r3, #0
 8009652:	4606      	mov	r6, r0
 8009654:	dd7c      	ble.n	8009750 <_dtoa_r+0x8d8>
 8009656:	461a      	mov	r2, r3
 8009658:	4601      	mov	r1, r0
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fbdc 	bl	8009e18 <__pow5mult>
 8009660:	9b05      	ldr	r3, [sp, #20]
 8009662:	2b01      	cmp	r3, #1
 8009664:	4606      	mov	r6, r0
 8009666:	dd76      	ble.n	8009756 <_dtoa_r+0x8de>
 8009668:	2300      	movs	r3, #0
 800966a:	9306      	str	r3, [sp, #24]
 800966c:	6933      	ldr	r3, [r6, #16]
 800966e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009672:	6918      	ldr	r0, [r3, #16]
 8009674:	f000 fac4 	bl	8009c00 <__hi0bits>
 8009678:	f1c0 0020 	rsb	r0, r0, #32
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	4418      	add	r0, r3
 8009680:	f010 001f 	ands.w	r0, r0, #31
 8009684:	f000 8086 	beq.w	8009794 <_dtoa_r+0x91c>
 8009688:	f1c0 0320 	rsb	r3, r0, #32
 800968c:	2b04      	cmp	r3, #4
 800968e:	dd7f      	ble.n	8009790 <_dtoa_r+0x918>
 8009690:	f1c0 001c 	rsb	r0, r0, #28
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	4403      	add	r3, r0
 8009698:	4480      	add	r8, r0
 800969a:	4405      	add	r5, r0
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	dd05      	ble.n	80096b0 <_dtoa_r+0x838>
 80096a4:	4659      	mov	r1, fp
 80096a6:	4642      	mov	r2, r8
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fc0f 	bl	8009ecc <__lshift>
 80096ae:	4683      	mov	fp, r0
 80096b0:	9b04      	ldr	r3, [sp, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dd05      	ble.n	80096c2 <_dtoa_r+0x84a>
 80096b6:	4631      	mov	r1, r6
 80096b8:	461a      	mov	r2, r3
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 fc06 	bl	8009ecc <__lshift>
 80096c0:	4606      	mov	r6, r0
 80096c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d069      	beq.n	800979c <_dtoa_r+0x924>
 80096c8:	4631      	mov	r1, r6
 80096ca:	4658      	mov	r0, fp
 80096cc:	f000 fc6a 	bl	8009fa4 <__mcmp>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	da63      	bge.n	800979c <_dtoa_r+0x924>
 80096d4:	2300      	movs	r3, #0
 80096d6:	4659      	mov	r1, fp
 80096d8:	220a      	movs	r2, #10
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 fa46 	bl	8009b6c <__multadd>
 80096e0:	9b08      	ldr	r3, [sp, #32]
 80096e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096e6:	4683      	mov	fp, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 818f 	beq.w	8009a0c <_dtoa_r+0xb94>
 80096ee:	4639      	mov	r1, r7
 80096f0:	2300      	movs	r3, #0
 80096f2:	220a      	movs	r2, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 fa39 	bl	8009b6c <__multadd>
 80096fa:	f1b9 0f00 	cmp.w	r9, #0
 80096fe:	4607      	mov	r7, r0
 8009700:	f300 808e 	bgt.w	8009820 <_dtoa_r+0x9a8>
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	2b02      	cmp	r3, #2
 8009708:	dc50      	bgt.n	80097ac <_dtoa_r+0x934>
 800970a:	e089      	b.n	8009820 <_dtoa_r+0x9a8>
 800970c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800970e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009712:	e75d      	b.n	80095d0 <_dtoa_r+0x758>
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	1e5e      	subs	r6, r3, #1
 8009718:	9b06      	ldr	r3, [sp, #24]
 800971a:	42b3      	cmp	r3, r6
 800971c:	bfbf      	itttt	lt
 800971e:	9b06      	ldrlt	r3, [sp, #24]
 8009720:	9606      	strlt	r6, [sp, #24]
 8009722:	1af2      	sublt	r2, r6, r3
 8009724:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009726:	bfb6      	itet	lt
 8009728:	189b      	addlt	r3, r3, r2
 800972a:	1b9e      	subge	r6, r3, r6
 800972c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	bfb8      	it	lt
 8009732:	2600      	movlt	r6, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	bfb5      	itete	lt
 8009738:	eba8 0503 	sublt.w	r5, r8, r3
 800973c:	9b01      	ldrge	r3, [sp, #4]
 800973e:	2300      	movlt	r3, #0
 8009740:	4645      	movge	r5, r8
 8009742:	e747      	b.n	80095d4 <_dtoa_r+0x75c>
 8009744:	9e06      	ldr	r6, [sp, #24]
 8009746:	9f08      	ldr	r7, [sp, #32]
 8009748:	4645      	mov	r5, r8
 800974a:	e74c      	b.n	80095e6 <_dtoa_r+0x76e>
 800974c:	9a06      	ldr	r2, [sp, #24]
 800974e:	e775      	b.n	800963c <_dtoa_r+0x7c4>
 8009750:	9b05      	ldr	r3, [sp, #20]
 8009752:	2b01      	cmp	r3, #1
 8009754:	dc18      	bgt.n	8009788 <_dtoa_r+0x910>
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	b9b3      	cbnz	r3, 8009788 <_dtoa_r+0x910>
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009760:	b9a3      	cbnz	r3, 800978c <_dtoa_r+0x914>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009768:	0d1b      	lsrs	r3, r3, #20
 800976a:	051b      	lsls	r3, r3, #20
 800976c:	b12b      	cbz	r3, 800977a <_dtoa_r+0x902>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	3301      	adds	r3, #1
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	f108 0801 	add.w	r8, r8, #1
 8009778:	2301      	movs	r3, #1
 800977a:	9306      	str	r3, [sp, #24]
 800977c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800977e:	2b00      	cmp	r3, #0
 8009780:	f47f af74 	bne.w	800966c <_dtoa_r+0x7f4>
 8009784:	2001      	movs	r0, #1
 8009786:	e779      	b.n	800967c <_dtoa_r+0x804>
 8009788:	2300      	movs	r3, #0
 800978a:	e7f6      	b.n	800977a <_dtoa_r+0x902>
 800978c:	9b02      	ldr	r3, [sp, #8]
 800978e:	e7f4      	b.n	800977a <_dtoa_r+0x902>
 8009790:	d085      	beq.n	800969e <_dtoa_r+0x826>
 8009792:	4618      	mov	r0, r3
 8009794:	301c      	adds	r0, #28
 8009796:	e77d      	b.n	8009694 <_dtoa_r+0x81c>
 8009798:	40240000 	.word	0x40240000
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dc38      	bgt.n	8009814 <_dtoa_r+0x99c>
 80097a2:	9b05      	ldr	r3, [sp, #20]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	dd35      	ble.n	8009814 <_dtoa_r+0x99c>
 80097a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80097ac:	f1b9 0f00 	cmp.w	r9, #0
 80097b0:	d10d      	bne.n	80097ce <_dtoa_r+0x956>
 80097b2:	4631      	mov	r1, r6
 80097b4:	464b      	mov	r3, r9
 80097b6:	2205      	movs	r2, #5
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 f9d7 	bl	8009b6c <__multadd>
 80097be:	4601      	mov	r1, r0
 80097c0:	4606      	mov	r6, r0
 80097c2:	4658      	mov	r0, fp
 80097c4:	f000 fbee 	bl	8009fa4 <__mcmp>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	f73f adbd 	bgt.w	8009348 <_dtoa_r+0x4d0>
 80097ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d0:	9d00      	ldr	r5, [sp, #0]
 80097d2:	ea6f 0a03 	mvn.w	sl, r3
 80097d6:	f04f 0800 	mov.w	r8, #0
 80097da:	4631      	mov	r1, r6
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 f9a3 	bl	8009b28 <_Bfree>
 80097e2:	2f00      	cmp	r7, #0
 80097e4:	f43f aeb4 	beq.w	8009550 <_dtoa_r+0x6d8>
 80097e8:	f1b8 0f00 	cmp.w	r8, #0
 80097ec:	d005      	beq.n	80097fa <_dtoa_r+0x982>
 80097ee:	45b8      	cmp	r8, r7
 80097f0:	d003      	beq.n	80097fa <_dtoa_r+0x982>
 80097f2:	4641      	mov	r1, r8
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 f997 	bl	8009b28 <_Bfree>
 80097fa:	4639      	mov	r1, r7
 80097fc:	4620      	mov	r0, r4
 80097fe:	f000 f993 	bl	8009b28 <_Bfree>
 8009802:	e6a5      	b.n	8009550 <_dtoa_r+0x6d8>
 8009804:	2600      	movs	r6, #0
 8009806:	4637      	mov	r7, r6
 8009808:	e7e1      	b.n	80097ce <_dtoa_r+0x956>
 800980a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800980c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009810:	4637      	mov	r7, r6
 8009812:	e599      	b.n	8009348 <_dtoa_r+0x4d0>
 8009814:	9b08      	ldr	r3, [sp, #32]
 8009816:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80fd 	beq.w	8009a1a <_dtoa_r+0xba2>
 8009820:	2d00      	cmp	r5, #0
 8009822:	dd05      	ble.n	8009830 <_dtoa_r+0x9b8>
 8009824:	4639      	mov	r1, r7
 8009826:	462a      	mov	r2, r5
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fb4f 	bl	8009ecc <__lshift>
 800982e:	4607      	mov	r7, r0
 8009830:	9b06      	ldr	r3, [sp, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d05c      	beq.n	80098f0 <_dtoa_r+0xa78>
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	4620      	mov	r0, r4
 800983a:	f000 f935 	bl	8009aa8 <_Balloc>
 800983e:	4605      	mov	r5, r0
 8009840:	b928      	cbnz	r0, 800984e <_dtoa_r+0x9d6>
 8009842:	4b80      	ldr	r3, [pc, #512]	; (8009a44 <_dtoa_r+0xbcc>)
 8009844:	4602      	mov	r2, r0
 8009846:	f240 21ea 	movw	r1, #746	; 0x2ea
 800984a:	f7ff bb2e 	b.w	8008eaa <_dtoa_r+0x32>
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	3202      	adds	r2, #2
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	f107 010c 	add.w	r1, r7, #12
 8009858:	300c      	adds	r0, #12
 800985a:	f000 f917 	bl	8009a8c <memcpy>
 800985e:	2201      	movs	r2, #1
 8009860:	4629      	mov	r1, r5
 8009862:	4620      	mov	r0, r4
 8009864:	f000 fb32 	bl	8009ecc <__lshift>
 8009868:	9b00      	ldr	r3, [sp, #0]
 800986a:	3301      	adds	r3, #1
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	444b      	add	r3, r9
 8009872:	9307      	str	r3, [sp, #28]
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	46b8      	mov	r8, r7
 800987c:	9306      	str	r3, [sp, #24]
 800987e:	4607      	mov	r7, r0
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	4631      	mov	r1, r6
 8009884:	3b01      	subs	r3, #1
 8009886:	4658      	mov	r0, fp
 8009888:	9302      	str	r3, [sp, #8]
 800988a:	f7ff fa69 	bl	8008d60 <quorem>
 800988e:	4603      	mov	r3, r0
 8009890:	3330      	adds	r3, #48	; 0x30
 8009892:	9004      	str	r0, [sp, #16]
 8009894:	4641      	mov	r1, r8
 8009896:	4658      	mov	r0, fp
 8009898:	9308      	str	r3, [sp, #32]
 800989a:	f000 fb83 	bl	8009fa4 <__mcmp>
 800989e:	463a      	mov	r2, r7
 80098a0:	4681      	mov	r9, r0
 80098a2:	4631      	mov	r1, r6
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fb99 	bl	8009fdc <__mdiff>
 80098aa:	68c2      	ldr	r2, [r0, #12]
 80098ac:	9b08      	ldr	r3, [sp, #32]
 80098ae:	4605      	mov	r5, r0
 80098b0:	bb02      	cbnz	r2, 80098f4 <_dtoa_r+0xa7c>
 80098b2:	4601      	mov	r1, r0
 80098b4:	4658      	mov	r0, fp
 80098b6:	f000 fb75 	bl	8009fa4 <__mcmp>
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	4602      	mov	r2, r0
 80098be:	4629      	mov	r1, r5
 80098c0:	4620      	mov	r0, r4
 80098c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80098c6:	f000 f92f 	bl	8009b28 <_Bfree>
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ce:	9d01      	ldr	r5, [sp, #4]
 80098d0:	ea43 0102 	orr.w	r1, r3, r2
 80098d4:	9b06      	ldr	r3, [sp, #24]
 80098d6:	430b      	orrs	r3, r1
 80098d8:	9b08      	ldr	r3, [sp, #32]
 80098da:	d10d      	bne.n	80098f8 <_dtoa_r+0xa80>
 80098dc:	2b39      	cmp	r3, #57	; 0x39
 80098de:	d029      	beq.n	8009934 <_dtoa_r+0xabc>
 80098e0:	f1b9 0f00 	cmp.w	r9, #0
 80098e4:	dd01      	ble.n	80098ea <_dtoa_r+0xa72>
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	3331      	adds	r3, #49	; 0x31
 80098ea:	9a02      	ldr	r2, [sp, #8]
 80098ec:	7013      	strb	r3, [r2, #0]
 80098ee:	e774      	b.n	80097da <_dtoa_r+0x962>
 80098f0:	4638      	mov	r0, r7
 80098f2:	e7b9      	b.n	8009868 <_dtoa_r+0x9f0>
 80098f4:	2201      	movs	r2, #1
 80098f6:	e7e2      	b.n	80098be <_dtoa_r+0xa46>
 80098f8:	f1b9 0f00 	cmp.w	r9, #0
 80098fc:	db06      	blt.n	800990c <_dtoa_r+0xa94>
 80098fe:	9905      	ldr	r1, [sp, #20]
 8009900:	ea41 0909 	orr.w	r9, r1, r9
 8009904:	9906      	ldr	r1, [sp, #24]
 8009906:	ea59 0101 	orrs.w	r1, r9, r1
 800990a:	d120      	bne.n	800994e <_dtoa_r+0xad6>
 800990c:	2a00      	cmp	r2, #0
 800990e:	ddec      	ble.n	80098ea <_dtoa_r+0xa72>
 8009910:	4659      	mov	r1, fp
 8009912:	2201      	movs	r2, #1
 8009914:	4620      	mov	r0, r4
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	f000 fad8 	bl	8009ecc <__lshift>
 800991c:	4631      	mov	r1, r6
 800991e:	4683      	mov	fp, r0
 8009920:	f000 fb40 	bl	8009fa4 <__mcmp>
 8009924:	2800      	cmp	r0, #0
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	dc02      	bgt.n	8009930 <_dtoa_r+0xab8>
 800992a:	d1de      	bne.n	80098ea <_dtoa_r+0xa72>
 800992c:	07da      	lsls	r2, r3, #31
 800992e:	d5dc      	bpl.n	80098ea <_dtoa_r+0xa72>
 8009930:	2b39      	cmp	r3, #57	; 0x39
 8009932:	d1d8      	bne.n	80098e6 <_dtoa_r+0xa6e>
 8009934:	9a02      	ldr	r2, [sp, #8]
 8009936:	2339      	movs	r3, #57	; 0x39
 8009938:	7013      	strb	r3, [r2, #0]
 800993a:	462b      	mov	r3, r5
 800993c:	461d      	mov	r5, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009944:	2a39      	cmp	r2, #57	; 0x39
 8009946:	d050      	beq.n	80099ea <_dtoa_r+0xb72>
 8009948:	3201      	adds	r2, #1
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e745      	b.n	80097da <_dtoa_r+0x962>
 800994e:	2a00      	cmp	r2, #0
 8009950:	dd03      	ble.n	800995a <_dtoa_r+0xae2>
 8009952:	2b39      	cmp	r3, #57	; 0x39
 8009954:	d0ee      	beq.n	8009934 <_dtoa_r+0xabc>
 8009956:	3301      	adds	r3, #1
 8009958:	e7c7      	b.n	80098ea <_dtoa_r+0xa72>
 800995a:	9a01      	ldr	r2, [sp, #4]
 800995c:	9907      	ldr	r1, [sp, #28]
 800995e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009962:	428a      	cmp	r2, r1
 8009964:	d02a      	beq.n	80099bc <_dtoa_r+0xb44>
 8009966:	4659      	mov	r1, fp
 8009968:	2300      	movs	r3, #0
 800996a:	220a      	movs	r2, #10
 800996c:	4620      	mov	r0, r4
 800996e:	f000 f8fd 	bl	8009b6c <__multadd>
 8009972:	45b8      	cmp	r8, r7
 8009974:	4683      	mov	fp, r0
 8009976:	f04f 0300 	mov.w	r3, #0
 800997a:	f04f 020a 	mov.w	r2, #10
 800997e:	4641      	mov	r1, r8
 8009980:	4620      	mov	r0, r4
 8009982:	d107      	bne.n	8009994 <_dtoa_r+0xb1c>
 8009984:	f000 f8f2 	bl	8009b6c <__multadd>
 8009988:	4680      	mov	r8, r0
 800998a:	4607      	mov	r7, r0
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	3301      	adds	r3, #1
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	e775      	b.n	8009880 <_dtoa_r+0xa08>
 8009994:	f000 f8ea 	bl	8009b6c <__multadd>
 8009998:	4639      	mov	r1, r7
 800999a:	4680      	mov	r8, r0
 800999c:	2300      	movs	r3, #0
 800999e:	220a      	movs	r2, #10
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 f8e3 	bl	8009b6c <__multadd>
 80099a6:	4607      	mov	r7, r0
 80099a8:	e7f0      	b.n	800998c <_dtoa_r+0xb14>
 80099aa:	f1b9 0f00 	cmp.w	r9, #0
 80099ae:	9a00      	ldr	r2, [sp, #0]
 80099b0:	bfcc      	ite	gt
 80099b2:	464d      	movgt	r5, r9
 80099b4:	2501      	movle	r5, #1
 80099b6:	4415      	add	r5, r2
 80099b8:	f04f 0800 	mov.w	r8, #0
 80099bc:	4659      	mov	r1, fp
 80099be:	2201      	movs	r2, #1
 80099c0:	4620      	mov	r0, r4
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	f000 fa82 	bl	8009ecc <__lshift>
 80099c8:	4631      	mov	r1, r6
 80099ca:	4683      	mov	fp, r0
 80099cc:	f000 faea 	bl	8009fa4 <__mcmp>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	dcb2      	bgt.n	800993a <_dtoa_r+0xac2>
 80099d4:	d102      	bne.n	80099dc <_dtoa_r+0xb64>
 80099d6:	9b01      	ldr	r3, [sp, #4]
 80099d8:	07db      	lsls	r3, r3, #31
 80099da:	d4ae      	bmi.n	800993a <_dtoa_r+0xac2>
 80099dc:	462b      	mov	r3, r5
 80099de:	461d      	mov	r5, r3
 80099e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e4:	2a30      	cmp	r2, #48	; 0x30
 80099e6:	d0fa      	beq.n	80099de <_dtoa_r+0xb66>
 80099e8:	e6f7      	b.n	80097da <_dtoa_r+0x962>
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d1a5      	bne.n	800993c <_dtoa_r+0xac4>
 80099f0:	f10a 0a01 	add.w	sl, sl, #1
 80099f4:	2331      	movs	r3, #49	; 0x31
 80099f6:	e779      	b.n	80098ec <_dtoa_r+0xa74>
 80099f8:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <_dtoa_r+0xbd0>)
 80099fa:	f7ff baaf 	b.w	8008f5c <_dtoa_r+0xe4>
 80099fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f47f aa86 	bne.w	8008f12 <_dtoa_r+0x9a>
 8009a06:	4b11      	ldr	r3, [pc, #68]	; (8009a4c <_dtoa_r+0xbd4>)
 8009a08:	f7ff baa8 	b.w	8008f5c <_dtoa_r+0xe4>
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	dc03      	bgt.n	8009a1a <_dtoa_r+0xba2>
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	f73f aec9 	bgt.w	80097ac <_dtoa_r+0x934>
 8009a1a:	9d00      	ldr	r5, [sp, #0]
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4658      	mov	r0, fp
 8009a20:	f7ff f99e 	bl	8008d60 <quorem>
 8009a24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a28:	f805 3b01 	strb.w	r3, [r5], #1
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	1aaa      	subs	r2, r5, r2
 8009a30:	4591      	cmp	r9, r2
 8009a32:	ddba      	ble.n	80099aa <_dtoa_r+0xb32>
 8009a34:	4659      	mov	r1, fp
 8009a36:	2300      	movs	r3, #0
 8009a38:	220a      	movs	r2, #10
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f896 	bl	8009b6c <__multadd>
 8009a40:	4683      	mov	fp, r0
 8009a42:	e7eb      	b.n	8009a1c <_dtoa_r+0xba4>
 8009a44:	0800bb2e 	.word	0x0800bb2e
 8009a48:	0800bcb1 	.word	0x0800bcb1
 8009a4c:	0800baab 	.word	0x0800baab

08009a50 <_localeconv_r>:
 8009a50:	4800      	ldr	r0, [pc, #0]	; (8009a54 <_localeconv_r+0x4>)
 8009a52:	4770      	bx	lr
 8009a54:	20000198 	.word	0x20000198

08009a58 <_lseek_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_lseek_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f8 f8f0 	bl	8001c4c <_lseek>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_lseek_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_lseek_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	2000044c 	.word	0x2000044c

08009a7c <malloc>:
 8009a7c:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <malloc+0xc>)
 8009a7e:	4601      	mov	r1, r0
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	f000 bbef 	b.w	800a264 <_malloc_r>
 8009a86:	bf00      	nop
 8009a88:	20000044 	.word	0x20000044

08009a8c <memcpy>:
 8009a8c:	440a      	add	r2, r1
 8009a8e:	4291      	cmp	r1, r2
 8009a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a94:	d100      	bne.n	8009a98 <memcpy+0xc>
 8009a96:	4770      	bx	lr
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	d1f9      	bne.n	8009a9a <memcpy+0xe>
 8009aa6:	bd10      	pop	{r4, pc}

08009aa8 <_Balloc>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009aac:	4604      	mov	r4, r0
 8009aae:	460d      	mov	r5, r1
 8009ab0:	b976      	cbnz	r6, 8009ad0 <_Balloc+0x28>
 8009ab2:	2010      	movs	r0, #16
 8009ab4:	f7ff ffe2 	bl	8009a7c <malloc>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6260      	str	r0, [r4, #36]	; 0x24
 8009abc:	b920      	cbnz	r0, 8009ac8 <_Balloc+0x20>
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <_Balloc+0x78>)
 8009ac0:	4818      	ldr	r0, [pc, #96]	; (8009b24 <_Balloc+0x7c>)
 8009ac2:	2166      	movs	r1, #102	; 0x66
 8009ac4:	f001 f9b6 	bl	800ae34 <__assert_func>
 8009ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009acc:	6006      	str	r6, [r0, #0]
 8009ace:	60c6      	str	r6, [r0, #12]
 8009ad0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ad2:	68f3      	ldr	r3, [r6, #12]
 8009ad4:	b183      	cbz	r3, 8009af8 <_Balloc+0x50>
 8009ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ade:	b9b8      	cbnz	r0, 8009b10 <_Balloc+0x68>
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ae6:	1d72      	adds	r2, r6, #5
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 fb5a 	bl	800a1a4 <_calloc_r>
 8009af0:	b160      	cbz	r0, 8009b0c <_Balloc+0x64>
 8009af2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009af6:	e00e      	b.n	8009b16 <_Balloc+0x6e>
 8009af8:	2221      	movs	r2, #33	; 0x21
 8009afa:	2104      	movs	r1, #4
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 fb51 	bl	800a1a4 <_calloc_r>
 8009b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b04:	60f0      	str	r0, [r6, #12]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e4      	bne.n	8009ad6 <_Balloc+0x2e>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	6802      	ldr	r2, [r0, #0]
 8009b12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b16:	2300      	movs	r3, #0
 8009b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b1c:	e7f7      	b.n	8009b0e <_Balloc+0x66>
 8009b1e:	bf00      	nop
 8009b20:	0800bab8 	.word	0x0800bab8
 8009b24:	0800bb3f 	.word	0x0800bb3f

08009b28 <_Bfree>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	b976      	cbnz	r6, 8009b50 <_Bfree+0x28>
 8009b32:	2010      	movs	r0, #16
 8009b34:	f7ff ffa2 	bl	8009a7c <malloc>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6268      	str	r0, [r5, #36]	; 0x24
 8009b3c:	b920      	cbnz	r0, 8009b48 <_Bfree+0x20>
 8009b3e:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <_Bfree+0x3c>)
 8009b40:	4809      	ldr	r0, [pc, #36]	; (8009b68 <_Bfree+0x40>)
 8009b42:	218a      	movs	r1, #138	; 0x8a
 8009b44:	f001 f976 	bl	800ae34 <__assert_func>
 8009b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b4c:	6006      	str	r6, [r0, #0]
 8009b4e:	60c6      	str	r6, [r0, #12]
 8009b50:	b13c      	cbz	r4, 8009b62 <_Bfree+0x3a>
 8009b52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b54:	6862      	ldr	r2, [r4, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b5c:	6021      	str	r1, [r4, #0]
 8009b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	0800bab8 	.word	0x0800bab8
 8009b68:	0800bb3f 	.word	0x0800bb3f

08009b6c <__multadd>:
 8009b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b70:	690e      	ldr	r6, [r1, #16]
 8009b72:	4607      	mov	r7, r0
 8009b74:	4698      	mov	r8, r3
 8009b76:	460c      	mov	r4, r1
 8009b78:	f101 0014 	add.w	r0, r1, #20
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	6805      	ldr	r5, [r0, #0]
 8009b80:	b2a9      	uxth	r1, r5
 8009b82:	fb02 8101 	mla	r1, r2, r1, r8
 8009b86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009b8a:	0c2d      	lsrs	r5, r5, #16
 8009b8c:	fb02 c505 	mla	r5, r2, r5, ip
 8009b90:	b289      	uxth	r1, r1
 8009b92:	3301      	adds	r3, #1
 8009b94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009b98:	429e      	cmp	r6, r3
 8009b9a:	f840 1b04 	str.w	r1, [r0], #4
 8009b9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ba2:	dcec      	bgt.n	8009b7e <__multadd+0x12>
 8009ba4:	f1b8 0f00 	cmp.w	r8, #0
 8009ba8:	d022      	beq.n	8009bf0 <__multadd+0x84>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	42b3      	cmp	r3, r6
 8009bae:	dc19      	bgt.n	8009be4 <__multadd+0x78>
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	3101      	adds	r1, #1
 8009bb6:	f7ff ff77 	bl	8009aa8 <_Balloc>
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b928      	cbnz	r0, 8009bca <__multadd+0x5e>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <__multadd+0x8c>)
 8009bc2:	480e      	ldr	r0, [pc, #56]	; (8009bfc <__multadd+0x90>)
 8009bc4:	21b5      	movs	r1, #181	; 0xb5
 8009bc6:	f001 f935 	bl	800ae34 <__assert_func>
 8009bca:	6922      	ldr	r2, [r4, #16]
 8009bcc:	3202      	adds	r2, #2
 8009bce:	f104 010c 	add.w	r1, r4, #12
 8009bd2:	0092      	lsls	r2, r2, #2
 8009bd4:	300c      	adds	r0, #12
 8009bd6:	f7ff ff59 	bl	8009a8c <memcpy>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7ff ffa3 	bl	8009b28 <_Bfree>
 8009be2:	462c      	mov	r4, r5
 8009be4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009be8:	3601      	adds	r6, #1
 8009bea:	f8c3 8014 	str.w	r8, [r3, #20]
 8009bee:	6126      	str	r6, [r4, #16]
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800bb2e 	.word	0x0800bb2e
 8009bfc:	0800bb3f 	.word	0x0800bb3f

08009c00 <__hi0bits>:
 8009c00:	0c03      	lsrs	r3, r0, #16
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	b9d3      	cbnz	r3, 8009c3c <__hi0bits+0x3c>
 8009c06:	0400      	lsls	r0, r0, #16
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c0e:	bf04      	itt	eq
 8009c10:	0200      	lsleq	r0, r0, #8
 8009c12:	3308      	addeq	r3, #8
 8009c14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c18:	bf04      	itt	eq
 8009c1a:	0100      	lsleq	r0, r0, #4
 8009c1c:	3304      	addeq	r3, #4
 8009c1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c22:	bf04      	itt	eq
 8009c24:	0080      	lsleq	r0, r0, #2
 8009c26:	3302      	addeq	r3, #2
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	db05      	blt.n	8009c38 <__hi0bits+0x38>
 8009c2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c30:	f103 0301 	add.w	r3, r3, #1
 8009c34:	bf08      	it	eq
 8009c36:	2320      	moveq	r3, #32
 8009c38:	4618      	mov	r0, r3
 8009c3a:	4770      	bx	lr
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e7e4      	b.n	8009c0a <__hi0bits+0xa>

08009c40 <__lo0bits>:
 8009c40:	6803      	ldr	r3, [r0, #0]
 8009c42:	f013 0207 	ands.w	r2, r3, #7
 8009c46:	4601      	mov	r1, r0
 8009c48:	d00b      	beq.n	8009c62 <__lo0bits+0x22>
 8009c4a:	07da      	lsls	r2, r3, #31
 8009c4c:	d424      	bmi.n	8009c98 <__lo0bits+0x58>
 8009c4e:	0798      	lsls	r0, r3, #30
 8009c50:	bf49      	itett	mi
 8009c52:	085b      	lsrmi	r3, r3, #1
 8009c54:	089b      	lsrpl	r3, r3, #2
 8009c56:	2001      	movmi	r0, #1
 8009c58:	600b      	strmi	r3, [r1, #0]
 8009c5a:	bf5c      	itt	pl
 8009c5c:	600b      	strpl	r3, [r1, #0]
 8009c5e:	2002      	movpl	r0, #2
 8009c60:	4770      	bx	lr
 8009c62:	b298      	uxth	r0, r3
 8009c64:	b9b0      	cbnz	r0, 8009c94 <__lo0bits+0x54>
 8009c66:	0c1b      	lsrs	r3, r3, #16
 8009c68:	2010      	movs	r0, #16
 8009c6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c6e:	bf04      	itt	eq
 8009c70:	0a1b      	lsreq	r3, r3, #8
 8009c72:	3008      	addeq	r0, #8
 8009c74:	071a      	lsls	r2, r3, #28
 8009c76:	bf04      	itt	eq
 8009c78:	091b      	lsreq	r3, r3, #4
 8009c7a:	3004      	addeq	r0, #4
 8009c7c:	079a      	lsls	r2, r3, #30
 8009c7e:	bf04      	itt	eq
 8009c80:	089b      	lsreq	r3, r3, #2
 8009c82:	3002      	addeq	r0, #2
 8009c84:	07da      	lsls	r2, r3, #31
 8009c86:	d403      	bmi.n	8009c90 <__lo0bits+0x50>
 8009c88:	085b      	lsrs	r3, r3, #1
 8009c8a:	f100 0001 	add.w	r0, r0, #1
 8009c8e:	d005      	beq.n	8009c9c <__lo0bits+0x5c>
 8009c90:	600b      	str	r3, [r1, #0]
 8009c92:	4770      	bx	lr
 8009c94:	4610      	mov	r0, r2
 8009c96:	e7e8      	b.n	8009c6a <__lo0bits+0x2a>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	4770      	bx	lr
 8009c9c:	2020      	movs	r0, #32
 8009c9e:	4770      	bx	lr

08009ca0 <__i2b>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	f7ff feff 	bl	8009aa8 <_Balloc>
 8009caa:	4602      	mov	r2, r0
 8009cac:	b928      	cbnz	r0, 8009cba <__i2b+0x1a>
 8009cae:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <__i2b+0x24>)
 8009cb0:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <__i2b+0x28>)
 8009cb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009cb6:	f001 f8bd 	bl	800ae34 <__assert_func>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	6144      	str	r4, [r0, #20]
 8009cbe:	6103      	str	r3, [r0, #16]
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0800bb2e 	.word	0x0800bb2e
 8009cc8:	0800bb3f 	.word	0x0800bb3f

08009ccc <__multiply>:
 8009ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	690a      	ldr	r2, [r1, #16]
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	bfb8      	it	lt
 8009cda:	460b      	movlt	r3, r1
 8009cdc:	460d      	mov	r5, r1
 8009cde:	bfbc      	itt	lt
 8009ce0:	4625      	movlt	r5, r4
 8009ce2:	461c      	movlt	r4, r3
 8009ce4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009ce8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009cec:	68ab      	ldr	r3, [r5, #8]
 8009cee:	6869      	ldr	r1, [r5, #4]
 8009cf0:	eb0a 0709 	add.w	r7, sl, r9
 8009cf4:	42bb      	cmp	r3, r7
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	bfb8      	it	lt
 8009cfa:	3101      	addlt	r1, #1
 8009cfc:	f7ff fed4 	bl	8009aa8 <_Balloc>
 8009d00:	b930      	cbnz	r0, 8009d10 <__multiply+0x44>
 8009d02:	4602      	mov	r2, r0
 8009d04:	4b42      	ldr	r3, [pc, #264]	; (8009e10 <__multiply+0x144>)
 8009d06:	4843      	ldr	r0, [pc, #268]	; (8009e14 <__multiply+0x148>)
 8009d08:	f240 115d 	movw	r1, #349	; 0x15d
 8009d0c:	f001 f892 	bl	800ae34 <__assert_func>
 8009d10:	f100 0614 	add.w	r6, r0, #20
 8009d14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009d18:	4633      	mov	r3, r6
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4543      	cmp	r3, r8
 8009d1e:	d31e      	bcc.n	8009d5e <__multiply+0x92>
 8009d20:	f105 0c14 	add.w	ip, r5, #20
 8009d24:	f104 0314 	add.w	r3, r4, #20
 8009d28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009d2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009d30:	9202      	str	r2, [sp, #8]
 8009d32:	ebac 0205 	sub.w	r2, ip, r5
 8009d36:	3a15      	subs	r2, #21
 8009d38:	f022 0203 	bic.w	r2, r2, #3
 8009d3c:	3204      	adds	r2, #4
 8009d3e:	f105 0115 	add.w	r1, r5, #21
 8009d42:	458c      	cmp	ip, r1
 8009d44:	bf38      	it	cc
 8009d46:	2204      	movcc	r2, #4
 8009d48:	9201      	str	r2, [sp, #4]
 8009d4a:	9a02      	ldr	r2, [sp, #8]
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d808      	bhi.n	8009d64 <__multiply+0x98>
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	dc55      	bgt.n	8009e02 <__multiply+0x136>
 8009d56:	6107      	str	r7, [r0, #16]
 8009d58:	b005      	add	sp, #20
 8009d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5e:	f843 2b04 	str.w	r2, [r3], #4
 8009d62:	e7db      	b.n	8009d1c <__multiply+0x50>
 8009d64:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d68:	f1ba 0f00 	cmp.w	sl, #0
 8009d6c:	d020      	beq.n	8009db0 <__multiply+0xe4>
 8009d6e:	f105 0e14 	add.w	lr, r5, #20
 8009d72:	46b1      	mov	r9, r6
 8009d74:	2200      	movs	r2, #0
 8009d76:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009d7a:	f8d9 b000 	ldr.w	fp, [r9]
 8009d7e:	b2a1      	uxth	r1, r4
 8009d80:	fa1f fb8b 	uxth.w	fp, fp
 8009d84:	fb0a b101 	mla	r1, sl, r1, fp
 8009d88:	4411      	add	r1, r2
 8009d8a:	f8d9 2000 	ldr.w	r2, [r9]
 8009d8e:	0c24      	lsrs	r4, r4, #16
 8009d90:	0c12      	lsrs	r2, r2, #16
 8009d92:	fb0a 2404 	mla	r4, sl, r4, r2
 8009d96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009d9a:	b289      	uxth	r1, r1
 8009d9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009da0:	45f4      	cmp	ip, lr
 8009da2:	f849 1b04 	str.w	r1, [r9], #4
 8009da6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009daa:	d8e4      	bhi.n	8009d76 <__multiply+0xaa>
 8009dac:	9901      	ldr	r1, [sp, #4]
 8009dae:	5072      	str	r2, [r6, r1]
 8009db0:	9a03      	ldr	r2, [sp, #12]
 8009db2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009db6:	3304      	adds	r3, #4
 8009db8:	f1b9 0f00 	cmp.w	r9, #0
 8009dbc:	d01f      	beq.n	8009dfe <__multiply+0x132>
 8009dbe:	6834      	ldr	r4, [r6, #0]
 8009dc0:	f105 0114 	add.w	r1, r5, #20
 8009dc4:	46b6      	mov	lr, r6
 8009dc6:	f04f 0a00 	mov.w	sl, #0
 8009dca:	880a      	ldrh	r2, [r1, #0]
 8009dcc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009dd0:	fb09 b202 	mla	r2, r9, r2, fp
 8009dd4:	4492      	add	sl, r2
 8009dd6:	b2a4      	uxth	r4, r4
 8009dd8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ddc:	f84e 4b04 	str.w	r4, [lr], #4
 8009de0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009de4:	f8be 2000 	ldrh.w	r2, [lr]
 8009de8:	0c24      	lsrs	r4, r4, #16
 8009dea:	fb09 2404 	mla	r4, r9, r4, r2
 8009dee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009df2:	458c      	cmp	ip, r1
 8009df4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009df8:	d8e7      	bhi.n	8009dca <__multiply+0xfe>
 8009dfa:	9a01      	ldr	r2, [sp, #4]
 8009dfc:	50b4      	str	r4, [r6, r2]
 8009dfe:	3604      	adds	r6, #4
 8009e00:	e7a3      	b.n	8009d4a <__multiply+0x7e>
 8009e02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1a5      	bne.n	8009d56 <__multiply+0x8a>
 8009e0a:	3f01      	subs	r7, #1
 8009e0c:	e7a1      	b.n	8009d52 <__multiply+0x86>
 8009e0e:	bf00      	nop
 8009e10:	0800bb2e 	.word	0x0800bb2e
 8009e14:	0800bb3f 	.word	0x0800bb3f

08009e18 <__pow5mult>:
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	4615      	mov	r5, r2
 8009e1e:	f012 0203 	ands.w	r2, r2, #3
 8009e22:	4606      	mov	r6, r0
 8009e24:	460f      	mov	r7, r1
 8009e26:	d007      	beq.n	8009e38 <__pow5mult+0x20>
 8009e28:	4c25      	ldr	r4, [pc, #148]	; (8009ec0 <__pow5mult+0xa8>)
 8009e2a:	3a01      	subs	r2, #1
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e32:	f7ff fe9b 	bl	8009b6c <__multadd>
 8009e36:	4607      	mov	r7, r0
 8009e38:	10ad      	asrs	r5, r5, #2
 8009e3a:	d03d      	beq.n	8009eb8 <__pow5mult+0xa0>
 8009e3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e3e:	b97c      	cbnz	r4, 8009e60 <__pow5mult+0x48>
 8009e40:	2010      	movs	r0, #16
 8009e42:	f7ff fe1b 	bl	8009a7c <malloc>
 8009e46:	4602      	mov	r2, r0
 8009e48:	6270      	str	r0, [r6, #36]	; 0x24
 8009e4a:	b928      	cbnz	r0, 8009e58 <__pow5mult+0x40>
 8009e4c:	4b1d      	ldr	r3, [pc, #116]	; (8009ec4 <__pow5mult+0xac>)
 8009e4e:	481e      	ldr	r0, [pc, #120]	; (8009ec8 <__pow5mult+0xb0>)
 8009e50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e54:	f000 ffee 	bl	800ae34 <__assert_func>
 8009e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e5c:	6004      	str	r4, [r0, #0]
 8009e5e:	60c4      	str	r4, [r0, #12]
 8009e60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e68:	b94c      	cbnz	r4, 8009e7e <__pow5mult+0x66>
 8009e6a:	f240 2171 	movw	r1, #625	; 0x271
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7ff ff16 	bl	8009ca0 <__i2b>
 8009e74:	2300      	movs	r3, #0
 8009e76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	f04f 0900 	mov.w	r9, #0
 8009e82:	07eb      	lsls	r3, r5, #31
 8009e84:	d50a      	bpl.n	8009e9c <__pow5mult+0x84>
 8009e86:	4639      	mov	r1, r7
 8009e88:	4622      	mov	r2, r4
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f7ff ff1e 	bl	8009ccc <__multiply>
 8009e90:	4639      	mov	r1, r7
 8009e92:	4680      	mov	r8, r0
 8009e94:	4630      	mov	r0, r6
 8009e96:	f7ff fe47 	bl	8009b28 <_Bfree>
 8009e9a:	4647      	mov	r7, r8
 8009e9c:	106d      	asrs	r5, r5, #1
 8009e9e:	d00b      	beq.n	8009eb8 <__pow5mult+0xa0>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	b938      	cbnz	r0, 8009eb4 <__pow5mult+0x9c>
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff ff0f 	bl	8009ccc <__multiply>
 8009eae:	6020      	str	r0, [r4, #0]
 8009eb0:	f8c0 9000 	str.w	r9, [r0]
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	e7e4      	b.n	8009e82 <__pow5mult+0x6a>
 8009eb8:	4638      	mov	r0, r7
 8009eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800bc90 	.word	0x0800bc90
 8009ec4:	0800bab8 	.word	0x0800bab8
 8009ec8:	0800bb3f 	.word	0x0800bb3f

08009ecc <__lshift>:
 8009ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	6849      	ldr	r1, [r1, #4]
 8009ed4:	6923      	ldr	r3, [r4, #16]
 8009ed6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	4607      	mov	r7, r0
 8009ede:	4691      	mov	r9, r2
 8009ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ee4:	f108 0601 	add.w	r6, r8, #1
 8009ee8:	42b3      	cmp	r3, r6
 8009eea:	db0b      	blt.n	8009f04 <__lshift+0x38>
 8009eec:	4638      	mov	r0, r7
 8009eee:	f7ff fddb 	bl	8009aa8 <_Balloc>
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	b948      	cbnz	r0, 8009f0a <__lshift+0x3e>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	4b28      	ldr	r3, [pc, #160]	; (8009f9c <__lshift+0xd0>)
 8009efa:	4829      	ldr	r0, [pc, #164]	; (8009fa0 <__lshift+0xd4>)
 8009efc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f00:	f000 ff98 	bl	800ae34 <__assert_func>
 8009f04:	3101      	adds	r1, #1
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	e7ee      	b.n	8009ee8 <__lshift+0x1c>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f100 0114 	add.w	r1, r0, #20
 8009f10:	f100 0210 	add.w	r2, r0, #16
 8009f14:	4618      	mov	r0, r3
 8009f16:	4553      	cmp	r3, sl
 8009f18:	db33      	blt.n	8009f82 <__lshift+0xb6>
 8009f1a:	6920      	ldr	r0, [r4, #16]
 8009f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f20:	f104 0314 	add.w	r3, r4, #20
 8009f24:	f019 091f 	ands.w	r9, r9, #31
 8009f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f30:	d02b      	beq.n	8009f8a <__lshift+0xbe>
 8009f32:	f1c9 0e20 	rsb	lr, r9, #32
 8009f36:	468a      	mov	sl, r1
 8009f38:	2200      	movs	r2, #0
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f40:	4302      	orrs	r2, r0
 8009f42:	f84a 2b04 	str.w	r2, [sl], #4
 8009f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4a:	459c      	cmp	ip, r3
 8009f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f50:	d8f3      	bhi.n	8009f3a <__lshift+0x6e>
 8009f52:	ebac 0304 	sub.w	r3, ip, r4
 8009f56:	3b15      	subs	r3, #21
 8009f58:	f023 0303 	bic.w	r3, r3, #3
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	f104 0015 	add.w	r0, r4, #21
 8009f62:	4584      	cmp	ip, r0
 8009f64:	bf38      	it	cc
 8009f66:	2304      	movcc	r3, #4
 8009f68:	50ca      	str	r2, [r1, r3]
 8009f6a:	b10a      	cbz	r2, 8009f70 <__lshift+0xa4>
 8009f6c:	f108 0602 	add.w	r6, r8, #2
 8009f70:	3e01      	subs	r6, #1
 8009f72:	4638      	mov	r0, r7
 8009f74:	612e      	str	r6, [r5, #16]
 8009f76:	4621      	mov	r1, r4
 8009f78:	f7ff fdd6 	bl	8009b28 <_Bfree>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f86:	3301      	adds	r3, #1
 8009f88:	e7c5      	b.n	8009f16 <__lshift+0x4a>
 8009f8a:	3904      	subs	r1, #4
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f94:	459c      	cmp	ip, r3
 8009f96:	d8f9      	bhi.n	8009f8c <__lshift+0xc0>
 8009f98:	e7ea      	b.n	8009f70 <__lshift+0xa4>
 8009f9a:	bf00      	nop
 8009f9c:	0800bb2e 	.word	0x0800bb2e
 8009fa0:	0800bb3f 	.word	0x0800bb3f

08009fa4 <__mcmp>:
 8009fa4:	b530      	push	{r4, r5, lr}
 8009fa6:	6902      	ldr	r2, [r0, #16]
 8009fa8:	690c      	ldr	r4, [r1, #16]
 8009faa:	1b12      	subs	r2, r2, r4
 8009fac:	d10e      	bne.n	8009fcc <__mcmp+0x28>
 8009fae:	f100 0314 	add.w	r3, r0, #20
 8009fb2:	3114      	adds	r1, #20
 8009fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fc4:	42a5      	cmp	r5, r4
 8009fc6:	d003      	beq.n	8009fd0 <__mcmp+0x2c>
 8009fc8:	d305      	bcc.n	8009fd6 <__mcmp+0x32>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4610      	mov	r0, r2
 8009fce:	bd30      	pop	{r4, r5, pc}
 8009fd0:	4283      	cmp	r3, r0
 8009fd2:	d3f3      	bcc.n	8009fbc <__mcmp+0x18>
 8009fd4:	e7fa      	b.n	8009fcc <__mcmp+0x28>
 8009fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fda:	e7f7      	b.n	8009fcc <__mcmp+0x28>

08009fdc <__mdiff>:
 8009fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4617      	mov	r7, r2
 8009fea:	f7ff ffdb 	bl	8009fa4 <__mcmp>
 8009fee:	1e05      	subs	r5, r0, #0
 8009ff0:	d110      	bne.n	800a014 <__mdiff+0x38>
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff fd57 	bl	8009aa8 <_Balloc>
 8009ffa:	b930      	cbnz	r0, 800a00a <__mdiff+0x2e>
 8009ffc:	4b39      	ldr	r3, [pc, #228]	; (800a0e4 <__mdiff+0x108>)
 8009ffe:	4602      	mov	r2, r0
 800a000:	f240 2132 	movw	r1, #562	; 0x232
 800a004:	4838      	ldr	r0, [pc, #224]	; (800a0e8 <__mdiff+0x10c>)
 800a006:	f000 ff15 	bl	800ae34 <__assert_func>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	bfa4      	itt	ge
 800a016:	463b      	movge	r3, r7
 800a018:	4627      	movge	r7, r4
 800a01a:	4630      	mov	r0, r6
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	bfa6      	itte	ge
 800a020:	461c      	movge	r4, r3
 800a022:	2500      	movge	r5, #0
 800a024:	2501      	movlt	r5, #1
 800a026:	f7ff fd3f 	bl	8009aa8 <_Balloc>
 800a02a:	b920      	cbnz	r0, 800a036 <__mdiff+0x5a>
 800a02c:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <__mdiff+0x108>)
 800a02e:	4602      	mov	r2, r0
 800a030:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a034:	e7e6      	b.n	800a004 <__mdiff+0x28>
 800a036:	693e      	ldr	r6, [r7, #16]
 800a038:	60c5      	str	r5, [r0, #12]
 800a03a:	6925      	ldr	r5, [r4, #16]
 800a03c:	f107 0114 	add.w	r1, r7, #20
 800a040:	f104 0914 	add.w	r9, r4, #20
 800a044:	f100 0e14 	add.w	lr, r0, #20
 800a048:	f107 0210 	add.w	r2, r7, #16
 800a04c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a050:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a054:	46f2      	mov	sl, lr
 800a056:	2700      	movs	r7, #0
 800a058:	f859 3b04 	ldr.w	r3, [r9], #4
 800a05c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a060:	fa1f f883 	uxth.w	r8, r3
 800a064:	fa17 f78b 	uxtah	r7, r7, fp
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	eba7 0808 	sub.w	r8, r7, r8
 800a06e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a076:	fa1f f888 	uxth.w	r8, r8
 800a07a:	141f      	asrs	r7, r3, #16
 800a07c:	454d      	cmp	r5, r9
 800a07e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a082:	f84a 3b04 	str.w	r3, [sl], #4
 800a086:	d8e7      	bhi.n	800a058 <__mdiff+0x7c>
 800a088:	1b2b      	subs	r3, r5, r4
 800a08a:	3b15      	subs	r3, #21
 800a08c:	f023 0303 	bic.w	r3, r3, #3
 800a090:	3304      	adds	r3, #4
 800a092:	3415      	adds	r4, #21
 800a094:	42a5      	cmp	r5, r4
 800a096:	bf38      	it	cc
 800a098:	2304      	movcc	r3, #4
 800a09a:	4419      	add	r1, r3
 800a09c:	4473      	add	r3, lr
 800a09e:	469e      	mov	lr, r3
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	4565      	cmp	r5, ip
 800a0a4:	d30e      	bcc.n	800a0c4 <__mdiff+0xe8>
 800a0a6:	f10c 0203 	add.w	r2, ip, #3
 800a0aa:	1a52      	subs	r2, r2, r1
 800a0ac:	f022 0203 	bic.w	r2, r2, #3
 800a0b0:	3903      	subs	r1, #3
 800a0b2:	458c      	cmp	ip, r1
 800a0b4:	bf38      	it	cc
 800a0b6:	2200      	movcc	r2, #0
 800a0b8:	441a      	add	r2, r3
 800a0ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0be:	b17b      	cbz	r3, 800a0e0 <__mdiff+0x104>
 800a0c0:	6106      	str	r6, [r0, #16]
 800a0c2:	e7a5      	b.n	800a010 <__mdiff+0x34>
 800a0c4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a0c8:	fa17 f488 	uxtah	r4, r7, r8
 800a0cc:	1422      	asrs	r2, r4, #16
 800a0ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a0d2:	b2a4      	uxth	r4, r4
 800a0d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a0d8:	f84e 4b04 	str.w	r4, [lr], #4
 800a0dc:	1417      	asrs	r7, r2, #16
 800a0de:	e7e0      	b.n	800a0a2 <__mdiff+0xc6>
 800a0e0:	3e01      	subs	r6, #1
 800a0e2:	e7ea      	b.n	800a0ba <__mdiff+0xde>
 800a0e4:	0800bb2e 	.word	0x0800bb2e
 800a0e8:	0800bb3f 	.word	0x0800bb3f

0800a0ec <__d2b>:
 800a0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0f0:	4689      	mov	r9, r1
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	ec57 6b10 	vmov	r6, r7, d0
 800a0f8:	4690      	mov	r8, r2
 800a0fa:	f7ff fcd5 	bl	8009aa8 <_Balloc>
 800a0fe:	4604      	mov	r4, r0
 800a100:	b930      	cbnz	r0, 800a110 <__d2b+0x24>
 800a102:	4602      	mov	r2, r0
 800a104:	4b25      	ldr	r3, [pc, #148]	; (800a19c <__d2b+0xb0>)
 800a106:	4826      	ldr	r0, [pc, #152]	; (800a1a0 <__d2b+0xb4>)
 800a108:	f240 310a 	movw	r1, #778	; 0x30a
 800a10c:	f000 fe92 	bl	800ae34 <__assert_func>
 800a110:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a114:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a118:	bb35      	cbnz	r5, 800a168 <__d2b+0x7c>
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	d028      	beq.n	800a172 <__d2b+0x86>
 800a120:	4668      	mov	r0, sp
 800a122:	9600      	str	r6, [sp, #0]
 800a124:	f7ff fd8c 	bl	8009c40 <__lo0bits>
 800a128:	9900      	ldr	r1, [sp, #0]
 800a12a:	b300      	cbz	r0, 800a16e <__d2b+0x82>
 800a12c:	9a01      	ldr	r2, [sp, #4]
 800a12e:	f1c0 0320 	rsb	r3, r0, #32
 800a132:	fa02 f303 	lsl.w	r3, r2, r3
 800a136:	430b      	orrs	r3, r1
 800a138:	40c2      	lsrs	r2, r0
 800a13a:	6163      	str	r3, [r4, #20]
 800a13c:	9201      	str	r2, [sp, #4]
 800a13e:	9b01      	ldr	r3, [sp, #4]
 800a140:	61a3      	str	r3, [r4, #24]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bf14      	ite	ne
 800a146:	2202      	movne	r2, #2
 800a148:	2201      	moveq	r2, #1
 800a14a:	6122      	str	r2, [r4, #16]
 800a14c:	b1d5      	cbz	r5, 800a184 <__d2b+0x98>
 800a14e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a152:	4405      	add	r5, r0
 800a154:	f8c9 5000 	str.w	r5, [r9]
 800a158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a15c:	f8c8 0000 	str.w	r0, [r8]
 800a160:	4620      	mov	r0, r4
 800a162:	b003      	add	sp, #12
 800a164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a16c:	e7d5      	b.n	800a11a <__d2b+0x2e>
 800a16e:	6161      	str	r1, [r4, #20]
 800a170:	e7e5      	b.n	800a13e <__d2b+0x52>
 800a172:	a801      	add	r0, sp, #4
 800a174:	f7ff fd64 	bl	8009c40 <__lo0bits>
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	6163      	str	r3, [r4, #20]
 800a17c:	2201      	movs	r2, #1
 800a17e:	6122      	str	r2, [r4, #16]
 800a180:	3020      	adds	r0, #32
 800a182:	e7e3      	b.n	800a14c <__d2b+0x60>
 800a184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a18c:	f8c9 0000 	str.w	r0, [r9]
 800a190:	6918      	ldr	r0, [r3, #16]
 800a192:	f7ff fd35 	bl	8009c00 <__hi0bits>
 800a196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a19a:	e7df      	b.n	800a15c <__d2b+0x70>
 800a19c:	0800bb2e 	.word	0x0800bb2e
 800a1a0:	0800bb3f 	.word	0x0800bb3f

0800a1a4 <_calloc_r>:
 800a1a4:	b513      	push	{r0, r1, r4, lr}
 800a1a6:	434a      	muls	r2, r1
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	9201      	str	r2, [sp, #4]
 800a1ac:	f000 f85a 	bl	800a264 <_malloc_r>
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	b118      	cbz	r0, 800a1bc <_calloc_r+0x18>
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	f7fe f81c 	bl	80081f4 <memset>
 800a1bc:	4620      	mov	r0, r4
 800a1be:	b002      	add	sp, #8
 800a1c0:	bd10      	pop	{r4, pc}
	...

0800a1c4 <_free_r>:
 800a1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	d048      	beq.n	800a25c <_free_r+0x98>
 800a1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ce:	9001      	str	r0, [sp, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1d6:	bfb8      	it	lt
 800a1d8:	18e4      	addlt	r4, r4, r3
 800a1da:	f001 f841 	bl	800b260 <__malloc_lock>
 800a1de:	4a20      	ldr	r2, [pc, #128]	; (800a260 <_free_r+0x9c>)
 800a1e0:	9801      	ldr	r0, [sp, #4]
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	4615      	mov	r5, r2
 800a1e6:	b933      	cbnz	r3, 800a1f6 <_free_r+0x32>
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	6014      	str	r4, [r2, #0]
 800a1ec:	b003      	add	sp, #12
 800a1ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1f2:	f001 b83b 	b.w	800b26c <__malloc_unlock>
 800a1f6:	42a3      	cmp	r3, r4
 800a1f8:	d90b      	bls.n	800a212 <_free_r+0x4e>
 800a1fa:	6821      	ldr	r1, [r4, #0]
 800a1fc:	1862      	adds	r2, r4, r1
 800a1fe:	4293      	cmp	r3, r2
 800a200:	bf04      	itt	eq
 800a202:	681a      	ldreq	r2, [r3, #0]
 800a204:	685b      	ldreq	r3, [r3, #4]
 800a206:	6063      	str	r3, [r4, #4]
 800a208:	bf04      	itt	eq
 800a20a:	1852      	addeq	r2, r2, r1
 800a20c:	6022      	streq	r2, [r4, #0]
 800a20e:	602c      	str	r4, [r5, #0]
 800a210:	e7ec      	b.n	800a1ec <_free_r+0x28>
 800a212:	461a      	mov	r2, r3
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	b10b      	cbz	r3, 800a21c <_free_r+0x58>
 800a218:	42a3      	cmp	r3, r4
 800a21a:	d9fa      	bls.n	800a212 <_free_r+0x4e>
 800a21c:	6811      	ldr	r1, [r2, #0]
 800a21e:	1855      	adds	r5, r2, r1
 800a220:	42a5      	cmp	r5, r4
 800a222:	d10b      	bne.n	800a23c <_free_r+0x78>
 800a224:	6824      	ldr	r4, [r4, #0]
 800a226:	4421      	add	r1, r4
 800a228:	1854      	adds	r4, r2, r1
 800a22a:	42a3      	cmp	r3, r4
 800a22c:	6011      	str	r1, [r2, #0]
 800a22e:	d1dd      	bne.n	800a1ec <_free_r+0x28>
 800a230:	681c      	ldr	r4, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	6053      	str	r3, [r2, #4]
 800a236:	4421      	add	r1, r4
 800a238:	6011      	str	r1, [r2, #0]
 800a23a:	e7d7      	b.n	800a1ec <_free_r+0x28>
 800a23c:	d902      	bls.n	800a244 <_free_r+0x80>
 800a23e:	230c      	movs	r3, #12
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	e7d3      	b.n	800a1ec <_free_r+0x28>
 800a244:	6825      	ldr	r5, [r4, #0]
 800a246:	1961      	adds	r1, r4, r5
 800a248:	428b      	cmp	r3, r1
 800a24a:	bf04      	itt	eq
 800a24c:	6819      	ldreq	r1, [r3, #0]
 800a24e:	685b      	ldreq	r3, [r3, #4]
 800a250:	6063      	str	r3, [r4, #4]
 800a252:	bf04      	itt	eq
 800a254:	1949      	addeq	r1, r1, r5
 800a256:	6021      	streq	r1, [r4, #0]
 800a258:	6054      	str	r4, [r2, #4]
 800a25a:	e7c7      	b.n	800a1ec <_free_r+0x28>
 800a25c:	b003      	add	sp, #12
 800a25e:	bd30      	pop	{r4, r5, pc}
 800a260:	20000240 	.word	0x20000240

0800a264 <_malloc_r>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	1ccd      	adds	r5, r1, #3
 800a268:	f025 0503 	bic.w	r5, r5, #3
 800a26c:	3508      	adds	r5, #8
 800a26e:	2d0c      	cmp	r5, #12
 800a270:	bf38      	it	cc
 800a272:	250c      	movcc	r5, #12
 800a274:	2d00      	cmp	r5, #0
 800a276:	4606      	mov	r6, r0
 800a278:	db01      	blt.n	800a27e <_malloc_r+0x1a>
 800a27a:	42a9      	cmp	r1, r5
 800a27c:	d903      	bls.n	800a286 <_malloc_r+0x22>
 800a27e:	230c      	movs	r3, #12
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	2000      	movs	r0, #0
 800a284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a286:	f000 ffeb 	bl	800b260 <__malloc_lock>
 800a28a:	4921      	ldr	r1, [pc, #132]	; (800a310 <_malloc_r+0xac>)
 800a28c:	680a      	ldr	r2, [r1, #0]
 800a28e:	4614      	mov	r4, r2
 800a290:	b99c      	cbnz	r4, 800a2ba <_malloc_r+0x56>
 800a292:	4f20      	ldr	r7, [pc, #128]	; (800a314 <_malloc_r+0xb0>)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	b923      	cbnz	r3, 800a2a2 <_malloc_r+0x3e>
 800a298:	4621      	mov	r1, r4
 800a29a:	4630      	mov	r0, r6
 800a29c:	f000 fcc8 	bl	800ac30 <_sbrk_r>
 800a2a0:	6038      	str	r0, [r7, #0]
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 fcc3 	bl	800ac30 <_sbrk_r>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d123      	bne.n	800a2f6 <_malloc_r+0x92>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	6033      	str	r3, [r6, #0]
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f000 ffda 	bl	800b26c <__malloc_unlock>
 800a2b8:	e7e3      	b.n	800a282 <_malloc_r+0x1e>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	1b5b      	subs	r3, r3, r5
 800a2be:	d417      	bmi.n	800a2f0 <_malloc_r+0x8c>
 800a2c0:	2b0b      	cmp	r3, #11
 800a2c2:	d903      	bls.n	800a2cc <_malloc_r+0x68>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	441c      	add	r4, r3
 800a2c8:	6025      	str	r5, [r4, #0]
 800a2ca:	e004      	b.n	800a2d6 <_malloc_r+0x72>
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	42a2      	cmp	r2, r4
 800a2d0:	bf0c      	ite	eq
 800a2d2:	600b      	streq	r3, [r1, #0]
 800a2d4:	6053      	strne	r3, [r2, #4]
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f000 ffc8 	bl	800b26c <__malloc_unlock>
 800a2dc:	f104 000b 	add.w	r0, r4, #11
 800a2e0:	1d23      	adds	r3, r4, #4
 800a2e2:	f020 0007 	bic.w	r0, r0, #7
 800a2e6:	1ac2      	subs	r2, r0, r3
 800a2e8:	d0cc      	beq.n	800a284 <_malloc_r+0x20>
 800a2ea:	1a1b      	subs	r3, r3, r0
 800a2ec:	50a3      	str	r3, [r4, r2]
 800a2ee:	e7c9      	b.n	800a284 <_malloc_r+0x20>
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	6864      	ldr	r4, [r4, #4]
 800a2f4:	e7cc      	b.n	800a290 <_malloc_r+0x2c>
 800a2f6:	1cc4      	adds	r4, r0, #3
 800a2f8:	f024 0403 	bic.w	r4, r4, #3
 800a2fc:	42a0      	cmp	r0, r4
 800a2fe:	d0e3      	beq.n	800a2c8 <_malloc_r+0x64>
 800a300:	1a21      	subs	r1, r4, r0
 800a302:	4630      	mov	r0, r6
 800a304:	f000 fc94 	bl	800ac30 <_sbrk_r>
 800a308:	3001      	adds	r0, #1
 800a30a:	d1dd      	bne.n	800a2c8 <_malloc_r+0x64>
 800a30c:	e7cf      	b.n	800a2ae <_malloc_r+0x4a>
 800a30e:	bf00      	nop
 800a310:	20000240 	.word	0x20000240
 800a314:	20000244 	.word	0x20000244

0800a318 <__ssputs_r>:
 800a318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	688e      	ldr	r6, [r1, #8]
 800a31e:	429e      	cmp	r6, r3
 800a320:	4682      	mov	sl, r0
 800a322:	460c      	mov	r4, r1
 800a324:	4690      	mov	r8, r2
 800a326:	461f      	mov	r7, r3
 800a328:	d838      	bhi.n	800a39c <__ssputs_r+0x84>
 800a32a:	898a      	ldrh	r2, [r1, #12]
 800a32c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a330:	d032      	beq.n	800a398 <__ssputs_r+0x80>
 800a332:	6825      	ldr	r5, [r4, #0]
 800a334:	6909      	ldr	r1, [r1, #16]
 800a336:	eba5 0901 	sub.w	r9, r5, r1
 800a33a:	6965      	ldr	r5, [r4, #20]
 800a33c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a344:	3301      	adds	r3, #1
 800a346:	444b      	add	r3, r9
 800a348:	106d      	asrs	r5, r5, #1
 800a34a:	429d      	cmp	r5, r3
 800a34c:	bf38      	it	cc
 800a34e:	461d      	movcc	r5, r3
 800a350:	0553      	lsls	r3, r2, #21
 800a352:	d531      	bpl.n	800a3b8 <__ssputs_r+0xa0>
 800a354:	4629      	mov	r1, r5
 800a356:	f7ff ff85 	bl	800a264 <_malloc_r>
 800a35a:	4606      	mov	r6, r0
 800a35c:	b950      	cbnz	r0, 800a374 <__ssputs_r+0x5c>
 800a35e:	230c      	movs	r3, #12
 800a360:	f8ca 3000 	str.w	r3, [sl]
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	6921      	ldr	r1, [r4, #16]
 800a376:	464a      	mov	r2, r9
 800a378:	f7ff fb88 	bl	8009a8c <memcpy>
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a386:	81a3      	strh	r3, [r4, #12]
 800a388:	6126      	str	r6, [r4, #16]
 800a38a:	6165      	str	r5, [r4, #20]
 800a38c:	444e      	add	r6, r9
 800a38e:	eba5 0509 	sub.w	r5, r5, r9
 800a392:	6026      	str	r6, [r4, #0]
 800a394:	60a5      	str	r5, [r4, #8]
 800a396:	463e      	mov	r6, r7
 800a398:	42be      	cmp	r6, r7
 800a39a:	d900      	bls.n	800a39e <__ssputs_r+0x86>
 800a39c:	463e      	mov	r6, r7
 800a39e:	4632      	mov	r2, r6
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	f000 ff42 	bl	800b22c <memmove>
 800a3a8:	68a3      	ldr	r3, [r4, #8]
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	1b9b      	subs	r3, r3, r6
 800a3ae:	4432      	add	r2, r6
 800a3b0:	60a3      	str	r3, [r4, #8]
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e7db      	b.n	800a370 <__ssputs_r+0x58>
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	f000 ff5d 	bl	800b278 <_realloc_r>
 800a3be:	4606      	mov	r6, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d1e1      	bne.n	800a388 <__ssputs_r+0x70>
 800a3c4:	6921      	ldr	r1, [r4, #16]
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	f7ff fefc 	bl	800a1c4 <_free_r>
 800a3cc:	e7c7      	b.n	800a35e <__ssputs_r+0x46>
	...

0800a3d0 <_svfiprintf_r>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	4698      	mov	r8, r3
 800a3d6:	898b      	ldrh	r3, [r1, #12]
 800a3d8:	061b      	lsls	r3, r3, #24
 800a3da:	b09d      	sub	sp, #116	; 0x74
 800a3dc:	4607      	mov	r7, r0
 800a3de:	460d      	mov	r5, r1
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	d50e      	bpl.n	800a402 <_svfiprintf_r+0x32>
 800a3e4:	690b      	ldr	r3, [r1, #16]
 800a3e6:	b963      	cbnz	r3, 800a402 <_svfiprintf_r+0x32>
 800a3e8:	2140      	movs	r1, #64	; 0x40
 800a3ea:	f7ff ff3b 	bl	800a264 <_malloc_r>
 800a3ee:	6028      	str	r0, [r5, #0]
 800a3f0:	6128      	str	r0, [r5, #16]
 800a3f2:	b920      	cbnz	r0, 800a3fe <_svfiprintf_r+0x2e>
 800a3f4:	230c      	movs	r3, #12
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fc:	e0d1      	b.n	800a5a2 <_svfiprintf_r+0x1d2>
 800a3fe:	2340      	movs	r3, #64	; 0x40
 800a400:	616b      	str	r3, [r5, #20]
 800a402:	2300      	movs	r3, #0
 800a404:	9309      	str	r3, [sp, #36]	; 0x24
 800a406:	2320      	movs	r3, #32
 800a408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a410:	2330      	movs	r3, #48	; 0x30
 800a412:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5bc <_svfiprintf_r+0x1ec>
 800a416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a41a:	f04f 0901 	mov.w	r9, #1
 800a41e:	4623      	mov	r3, r4
 800a420:	469a      	mov	sl, r3
 800a422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a426:	b10a      	cbz	r2, 800a42c <_svfiprintf_r+0x5c>
 800a428:	2a25      	cmp	r2, #37	; 0x25
 800a42a:	d1f9      	bne.n	800a420 <_svfiprintf_r+0x50>
 800a42c:	ebba 0b04 	subs.w	fp, sl, r4
 800a430:	d00b      	beq.n	800a44a <_svfiprintf_r+0x7a>
 800a432:	465b      	mov	r3, fp
 800a434:	4622      	mov	r2, r4
 800a436:	4629      	mov	r1, r5
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff ff6d 	bl	800a318 <__ssputs_r>
 800a43e:	3001      	adds	r0, #1
 800a440:	f000 80aa 	beq.w	800a598 <_svfiprintf_r+0x1c8>
 800a444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a446:	445a      	add	r2, fp
 800a448:	9209      	str	r2, [sp, #36]	; 0x24
 800a44a:	f89a 3000 	ldrb.w	r3, [sl]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80a2 	beq.w	800a598 <_svfiprintf_r+0x1c8>
 800a454:	2300      	movs	r3, #0
 800a456:	f04f 32ff 	mov.w	r2, #4294967295
 800a45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a45e:	f10a 0a01 	add.w	sl, sl, #1
 800a462:	9304      	str	r3, [sp, #16]
 800a464:	9307      	str	r3, [sp, #28]
 800a466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a46a:	931a      	str	r3, [sp, #104]	; 0x68
 800a46c:	4654      	mov	r4, sl
 800a46e:	2205      	movs	r2, #5
 800a470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a474:	4851      	ldr	r0, [pc, #324]	; (800a5bc <_svfiprintf_r+0x1ec>)
 800a476:	f7f5 feb3 	bl	80001e0 <memchr>
 800a47a:	9a04      	ldr	r2, [sp, #16]
 800a47c:	b9d8      	cbnz	r0, 800a4b6 <_svfiprintf_r+0xe6>
 800a47e:	06d0      	lsls	r0, r2, #27
 800a480:	bf44      	itt	mi
 800a482:	2320      	movmi	r3, #32
 800a484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a488:	0711      	lsls	r1, r2, #28
 800a48a:	bf44      	itt	mi
 800a48c:	232b      	movmi	r3, #43	; 0x2b
 800a48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a492:	f89a 3000 	ldrb.w	r3, [sl]
 800a496:	2b2a      	cmp	r3, #42	; 0x2a
 800a498:	d015      	beq.n	800a4c6 <_svfiprintf_r+0xf6>
 800a49a:	9a07      	ldr	r2, [sp, #28]
 800a49c:	4654      	mov	r4, sl
 800a49e:	2000      	movs	r0, #0
 800a4a0:	f04f 0c0a 	mov.w	ip, #10
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4aa:	3b30      	subs	r3, #48	; 0x30
 800a4ac:	2b09      	cmp	r3, #9
 800a4ae:	d94e      	bls.n	800a54e <_svfiprintf_r+0x17e>
 800a4b0:	b1b0      	cbz	r0, 800a4e0 <_svfiprintf_r+0x110>
 800a4b2:	9207      	str	r2, [sp, #28]
 800a4b4:	e014      	b.n	800a4e0 <_svfiprintf_r+0x110>
 800a4b6:	eba0 0308 	sub.w	r3, r0, r8
 800a4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	46a2      	mov	sl, r4
 800a4c4:	e7d2      	b.n	800a46c <_svfiprintf_r+0x9c>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	1d19      	adds	r1, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	9103      	str	r1, [sp, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bfbb      	ittet	lt
 800a4d2:	425b      	neglt	r3, r3
 800a4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a4d8:	9307      	strge	r3, [sp, #28]
 800a4da:	9307      	strlt	r3, [sp, #28]
 800a4dc:	bfb8      	it	lt
 800a4de:	9204      	strlt	r2, [sp, #16]
 800a4e0:	7823      	ldrb	r3, [r4, #0]
 800a4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4e4:	d10c      	bne.n	800a500 <_svfiprintf_r+0x130>
 800a4e6:	7863      	ldrb	r3, [r4, #1]
 800a4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ea:	d135      	bne.n	800a558 <_svfiprintf_r+0x188>
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	1d1a      	adds	r2, r3, #4
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	9203      	str	r2, [sp, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bfb8      	it	lt
 800a4f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4fc:	3402      	adds	r4, #2
 800a4fe:	9305      	str	r3, [sp, #20]
 800a500:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5cc <_svfiprintf_r+0x1fc>
 800a504:	7821      	ldrb	r1, [r4, #0]
 800a506:	2203      	movs	r2, #3
 800a508:	4650      	mov	r0, sl
 800a50a:	f7f5 fe69 	bl	80001e0 <memchr>
 800a50e:	b140      	cbz	r0, 800a522 <_svfiprintf_r+0x152>
 800a510:	2340      	movs	r3, #64	; 0x40
 800a512:	eba0 000a 	sub.w	r0, r0, sl
 800a516:	fa03 f000 	lsl.w	r0, r3, r0
 800a51a:	9b04      	ldr	r3, [sp, #16]
 800a51c:	4303      	orrs	r3, r0
 800a51e:	3401      	adds	r4, #1
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a526:	4826      	ldr	r0, [pc, #152]	; (800a5c0 <_svfiprintf_r+0x1f0>)
 800a528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a52c:	2206      	movs	r2, #6
 800a52e:	f7f5 fe57 	bl	80001e0 <memchr>
 800a532:	2800      	cmp	r0, #0
 800a534:	d038      	beq.n	800a5a8 <_svfiprintf_r+0x1d8>
 800a536:	4b23      	ldr	r3, [pc, #140]	; (800a5c4 <_svfiprintf_r+0x1f4>)
 800a538:	bb1b      	cbnz	r3, 800a582 <_svfiprintf_r+0x1b2>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	3307      	adds	r3, #7
 800a53e:	f023 0307 	bic.w	r3, r3, #7
 800a542:	3308      	adds	r3, #8
 800a544:	9303      	str	r3, [sp, #12]
 800a546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a548:	4433      	add	r3, r6
 800a54a:	9309      	str	r3, [sp, #36]	; 0x24
 800a54c:	e767      	b.n	800a41e <_svfiprintf_r+0x4e>
 800a54e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a552:	460c      	mov	r4, r1
 800a554:	2001      	movs	r0, #1
 800a556:	e7a5      	b.n	800a4a4 <_svfiprintf_r+0xd4>
 800a558:	2300      	movs	r3, #0
 800a55a:	3401      	adds	r4, #1
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	4619      	mov	r1, r3
 800a560:	f04f 0c0a 	mov.w	ip, #10
 800a564:	4620      	mov	r0, r4
 800a566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a56a:	3a30      	subs	r2, #48	; 0x30
 800a56c:	2a09      	cmp	r2, #9
 800a56e:	d903      	bls.n	800a578 <_svfiprintf_r+0x1a8>
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0c5      	beq.n	800a500 <_svfiprintf_r+0x130>
 800a574:	9105      	str	r1, [sp, #20]
 800a576:	e7c3      	b.n	800a500 <_svfiprintf_r+0x130>
 800a578:	fb0c 2101 	mla	r1, ip, r1, r2
 800a57c:	4604      	mov	r4, r0
 800a57e:	2301      	movs	r3, #1
 800a580:	e7f0      	b.n	800a564 <_svfiprintf_r+0x194>
 800a582:	ab03      	add	r3, sp, #12
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	462a      	mov	r2, r5
 800a588:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <_svfiprintf_r+0x1f8>)
 800a58a:	a904      	add	r1, sp, #16
 800a58c:	4638      	mov	r0, r7
 800a58e:	f7fd fed9 	bl	8008344 <_printf_float>
 800a592:	1c42      	adds	r2, r0, #1
 800a594:	4606      	mov	r6, r0
 800a596:	d1d6      	bne.n	800a546 <_svfiprintf_r+0x176>
 800a598:	89ab      	ldrh	r3, [r5, #12]
 800a59a:	065b      	lsls	r3, r3, #25
 800a59c:	f53f af2c 	bmi.w	800a3f8 <_svfiprintf_r+0x28>
 800a5a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5a2:	b01d      	add	sp, #116	; 0x74
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	ab03      	add	r3, sp, #12
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	462a      	mov	r2, r5
 800a5ae:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <_svfiprintf_r+0x1f8>)
 800a5b0:	a904      	add	r1, sp, #16
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f7fe f96a 	bl	800888c <_printf_i>
 800a5b8:	e7eb      	b.n	800a592 <_svfiprintf_r+0x1c2>
 800a5ba:	bf00      	nop
 800a5bc:	0800bc9c 	.word	0x0800bc9c
 800a5c0:	0800bca6 	.word	0x0800bca6
 800a5c4:	08008345 	.word	0x08008345
 800a5c8:	0800a319 	.word	0x0800a319
 800a5cc:	0800bca2 	.word	0x0800bca2

0800a5d0 <_sungetc_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	1c4b      	adds	r3, r1, #1
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	d103      	bne.n	800a5e0 <_sungetc_r+0x10>
 800a5d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a5dc:	4628      	mov	r0, r5
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	8993      	ldrh	r3, [r2, #12]
 800a5e2:	f023 0320 	bic.w	r3, r3, #32
 800a5e6:	8193      	strh	r3, [r2, #12]
 800a5e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5ea:	6852      	ldr	r2, [r2, #4]
 800a5ec:	b2cd      	uxtb	r5, r1
 800a5ee:	b18b      	cbz	r3, 800a614 <_sungetc_r+0x44>
 800a5f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	dd08      	ble.n	800a608 <_sungetc_r+0x38>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	6022      	str	r2, [r4, #0]
 800a5fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a600:	6863      	ldr	r3, [r4, #4]
 800a602:	3301      	adds	r3, #1
 800a604:	6063      	str	r3, [r4, #4]
 800a606:	e7e9      	b.n	800a5dc <_sungetc_r+0xc>
 800a608:	4621      	mov	r1, r4
 800a60a:	f000 fbd9 	bl	800adc0 <__submore>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d0f1      	beq.n	800a5f6 <_sungetc_r+0x26>
 800a612:	e7e1      	b.n	800a5d8 <_sungetc_r+0x8>
 800a614:	6921      	ldr	r1, [r4, #16]
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	b151      	cbz	r1, 800a630 <_sungetc_r+0x60>
 800a61a:	4299      	cmp	r1, r3
 800a61c:	d208      	bcs.n	800a630 <_sungetc_r+0x60>
 800a61e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a622:	42a9      	cmp	r1, r5
 800a624:	d104      	bne.n	800a630 <_sungetc_r+0x60>
 800a626:	3b01      	subs	r3, #1
 800a628:	3201      	adds	r2, #1
 800a62a:	6023      	str	r3, [r4, #0]
 800a62c:	6062      	str	r2, [r4, #4]
 800a62e:	e7d5      	b.n	800a5dc <_sungetc_r+0xc>
 800a630:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a638:	6363      	str	r3, [r4, #52]	; 0x34
 800a63a:	2303      	movs	r3, #3
 800a63c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a63e:	4623      	mov	r3, r4
 800a640:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	2301      	movs	r3, #1
 800a648:	e7dc      	b.n	800a604 <_sungetc_r+0x34>

0800a64a <__ssrefill_r>:
 800a64a:	b510      	push	{r4, lr}
 800a64c:	460c      	mov	r4, r1
 800a64e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a650:	b169      	cbz	r1, 800a66e <__ssrefill_r+0x24>
 800a652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a656:	4299      	cmp	r1, r3
 800a658:	d001      	beq.n	800a65e <__ssrefill_r+0x14>
 800a65a:	f7ff fdb3 	bl	800a1c4 <_free_r>
 800a65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a660:	6063      	str	r3, [r4, #4]
 800a662:	2000      	movs	r0, #0
 800a664:	6360      	str	r0, [r4, #52]	; 0x34
 800a666:	b113      	cbz	r3, 800a66e <__ssrefill_r+0x24>
 800a668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a66a:	6023      	str	r3, [r4, #0]
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	2300      	movs	r3, #0
 800a674:	6063      	str	r3, [r4, #4]
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f043 0320 	orr.w	r3, r3, #32
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295
 800a682:	e7f3      	b.n	800a66c <__ssrefill_r+0x22>

0800a684 <__ssvfiscanf_r>:
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a68e:	2100      	movs	r1, #0
 800a690:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a694:	49b2      	ldr	r1, [pc, #712]	; (800a960 <__ssvfiscanf_r+0x2dc>)
 800a696:	91a0      	str	r1, [sp, #640]	; 0x280
 800a698:	f10d 0804 	add.w	r8, sp, #4
 800a69c:	49b1      	ldr	r1, [pc, #708]	; (800a964 <__ssvfiscanf_r+0x2e0>)
 800a69e:	4fb2      	ldr	r7, [pc, #712]	; (800a968 <__ssvfiscanf_r+0x2e4>)
 800a6a0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a96c <__ssvfiscanf_r+0x2e8>
 800a6a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	f892 a000 	ldrb.w	sl, [r2]
 800a6b2:	f1ba 0f00 	cmp.w	sl, #0
 800a6b6:	f000 8151 	beq.w	800a95c <__ssvfiscanf_r+0x2d8>
 800a6ba:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a6be:	f013 0308 	ands.w	r3, r3, #8
 800a6c2:	f102 0501 	add.w	r5, r2, #1
 800a6c6:	d019      	beq.n	800a6fc <__ssvfiscanf_r+0x78>
 800a6c8:	6863      	ldr	r3, [r4, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dd0f      	ble.n	800a6ee <__ssvfiscanf_r+0x6a>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	781a      	ldrb	r2, [r3, #0]
 800a6d2:	5cba      	ldrb	r2, [r7, r2]
 800a6d4:	0712      	lsls	r2, r2, #28
 800a6d6:	d401      	bmi.n	800a6dc <__ssvfiscanf_r+0x58>
 800a6d8:	462a      	mov	r2, r5
 800a6da:	e7e8      	b.n	800a6ae <__ssvfiscanf_r+0x2a>
 800a6dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a6de:	3201      	adds	r2, #1
 800a6e0:	9245      	str	r2, [sp, #276]	; 0x114
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	3a01      	subs	r2, #1
 800a6e8:	6062      	str	r2, [r4, #4]
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	e7ec      	b.n	800a6c8 <__ssvfiscanf_r+0x44>
 800a6ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	4798      	blx	r3
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d0e9      	beq.n	800a6ce <__ssvfiscanf_r+0x4a>
 800a6fa:	e7ed      	b.n	800a6d8 <__ssvfiscanf_r+0x54>
 800a6fc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a700:	f040 8083 	bne.w	800a80a <__ssvfiscanf_r+0x186>
 800a704:	9341      	str	r3, [sp, #260]	; 0x104
 800a706:	9343      	str	r3, [sp, #268]	; 0x10c
 800a708:	7853      	ldrb	r3, [r2, #1]
 800a70a:	2b2a      	cmp	r3, #42	; 0x2a
 800a70c:	bf02      	ittt	eq
 800a70e:	2310      	moveq	r3, #16
 800a710:	1c95      	addeq	r5, r2, #2
 800a712:	9341      	streq	r3, [sp, #260]	; 0x104
 800a714:	220a      	movs	r2, #10
 800a716:	46ab      	mov	fp, r5
 800a718:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a71c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a720:	2b09      	cmp	r3, #9
 800a722:	d91d      	bls.n	800a760 <__ssvfiscanf_r+0xdc>
 800a724:	4891      	ldr	r0, [pc, #580]	; (800a96c <__ssvfiscanf_r+0x2e8>)
 800a726:	2203      	movs	r2, #3
 800a728:	f7f5 fd5a 	bl	80001e0 <memchr>
 800a72c:	b140      	cbz	r0, 800a740 <__ssvfiscanf_r+0xbc>
 800a72e:	2301      	movs	r3, #1
 800a730:	eba0 0009 	sub.w	r0, r0, r9
 800a734:	fa03 f000 	lsl.w	r0, r3, r0
 800a738:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a73a:	4318      	orrs	r0, r3
 800a73c:	9041      	str	r0, [sp, #260]	; 0x104
 800a73e:	465d      	mov	r5, fp
 800a740:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a744:	2b78      	cmp	r3, #120	; 0x78
 800a746:	d806      	bhi.n	800a756 <__ssvfiscanf_r+0xd2>
 800a748:	2b57      	cmp	r3, #87	; 0x57
 800a74a:	d810      	bhi.n	800a76e <__ssvfiscanf_r+0xea>
 800a74c:	2b25      	cmp	r3, #37	; 0x25
 800a74e:	d05c      	beq.n	800a80a <__ssvfiscanf_r+0x186>
 800a750:	d856      	bhi.n	800a800 <__ssvfiscanf_r+0x17c>
 800a752:	2b00      	cmp	r3, #0
 800a754:	d074      	beq.n	800a840 <__ssvfiscanf_r+0x1bc>
 800a756:	2303      	movs	r3, #3
 800a758:	9347      	str	r3, [sp, #284]	; 0x11c
 800a75a:	230a      	movs	r3, #10
 800a75c:	9342      	str	r3, [sp, #264]	; 0x108
 800a75e:	e081      	b.n	800a864 <__ssvfiscanf_r+0x1e0>
 800a760:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a762:	fb02 1303 	mla	r3, r2, r3, r1
 800a766:	3b30      	subs	r3, #48	; 0x30
 800a768:	9343      	str	r3, [sp, #268]	; 0x10c
 800a76a:	465d      	mov	r5, fp
 800a76c:	e7d3      	b.n	800a716 <__ssvfiscanf_r+0x92>
 800a76e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a772:	2a20      	cmp	r2, #32
 800a774:	d8ef      	bhi.n	800a756 <__ssvfiscanf_r+0xd2>
 800a776:	a101      	add	r1, pc, #4	; (adr r1, 800a77c <__ssvfiscanf_r+0xf8>)
 800a778:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a77c:	0800a84f 	.word	0x0800a84f
 800a780:	0800a757 	.word	0x0800a757
 800a784:	0800a757 	.word	0x0800a757
 800a788:	0800a8ad 	.word	0x0800a8ad
 800a78c:	0800a757 	.word	0x0800a757
 800a790:	0800a757 	.word	0x0800a757
 800a794:	0800a757 	.word	0x0800a757
 800a798:	0800a757 	.word	0x0800a757
 800a79c:	0800a757 	.word	0x0800a757
 800a7a0:	0800a757 	.word	0x0800a757
 800a7a4:	0800a757 	.word	0x0800a757
 800a7a8:	0800a8c3 	.word	0x0800a8c3
 800a7ac:	0800a899 	.word	0x0800a899
 800a7b0:	0800a807 	.word	0x0800a807
 800a7b4:	0800a807 	.word	0x0800a807
 800a7b8:	0800a807 	.word	0x0800a807
 800a7bc:	0800a757 	.word	0x0800a757
 800a7c0:	0800a89d 	.word	0x0800a89d
 800a7c4:	0800a757 	.word	0x0800a757
 800a7c8:	0800a757 	.word	0x0800a757
 800a7cc:	0800a757 	.word	0x0800a757
 800a7d0:	0800a757 	.word	0x0800a757
 800a7d4:	0800a8d3 	.word	0x0800a8d3
 800a7d8:	0800a8a5 	.word	0x0800a8a5
 800a7dc:	0800a847 	.word	0x0800a847
 800a7e0:	0800a757 	.word	0x0800a757
 800a7e4:	0800a757 	.word	0x0800a757
 800a7e8:	0800a8cf 	.word	0x0800a8cf
 800a7ec:	0800a757 	.word	0x0800a757
 800a7f0:	0800a899 	.word	0x0800a899
 800a7f4:	0800a757 	.word	0x0800a757
 800a7f8:	0800a757 	.word	0x0800a757
 800a7fc:	0800a84f 	.word	0x0800a84f
 800a800:	3b45      	subs	r3, #69	; 0x45
 800a802:	2b02      	cmp	r3, #2
 800a804:	d8a7      	bhi.n	800a756 <__ssvfiscanf_r+0xd2>
 800a806:	2305      	movs	r3, #5
 800a808:	e02b      	b.n	800a862 <__ssvfiscanf_r+0x1de>
 800a80a:	6863      	ldr	r3, [r4, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dd0d      	ble.n	800a82c <__ssvfiscanf_r+0x1a8>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	781a      	ldrb	r2, [r3, #0]
 800a814:	4552      	cmp	r2, sl
 800a816:	f040 80a1 	bne.w	800a95c <__ssvfiscanf_r+0x2d8>
 800a81a:	3301      	adds	r3, #1
 800a81c:	6862      	ldr	r2, [r4, #4]
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a822:	3a01      	subs	r2, #1
 800a824:	3301      	adds	r3, #1
 800a826:	6062      	str	r2, [r4, #4]
 800a828:	9345      	str	r3, [sp, #276]	; 0x114
 800a82a:	e755      	b.n	800a6d8 <__ssvfiscanf_r+0x54>
 800a82c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a82e:	4621      	mov	r1, r4
 800a830:	4630      	mov	r0, r6
 800a832:	4798      	blx	r3
 800a834:	2800      	cmp	r0, #0
 800a836:	d0eb      	beq.n	800a810 <__ssvfiscanf_r+0x18c>
 800a838:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f040 8084 	bne.w	800a948 <__ssvfiscanf_r+0x2c4>
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e086      	b.n	800a954 <__ssvfiscanf_r+0x2d0>
 800a846:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a848:	f042 0220 	orr.w	r2, r2, #32
 800a84c:	9241      	str	r2, [sp, #260]	; 0x104
 800a84e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a854:	9241      	str	r2, [sp, #260]	; 0x104
 800a856:	2210      	movs	r2, #16
 800a858:	2b6f      	cmp	r3, #111	; 0x6f
 800a85a:	9242      	str	r2, [sp, #264]	; 0x108
 800a85c:	bf34      	ite	cc
 800a85e:	2303      	movcc	r3, #3
 800a860:	2304      	movcs	r3, #4
 800a862:	9347      	str	r3, [sp, #284]	; 0x11c
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dd41      	ble.n	800a8ee <__ssvfiscanf_r+0x26a>
 800a86a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a86c:	0659      	lsls	r1, r3, #25
 800a86e:	d404      	bmi.n	800a87a <__ssvfiscanf_r+0x1f6>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	5cba      	ldrb	r2, [r7, r2]
 800a876:	0712      	lsls	r2, r2, #28
 800a878:	d440      	bmi.n	800a8fc <__ssvfiscanf_r+0x278>
 800a87a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	dc4f      	bgt.n	800a920 <__ssvfiscanf_r+0x29c>
 800a880:	466b      	mov	r3, sp
 800a882:	4622      	mov	r2, r4
 800a884:	a941      	add	r1, sp, #260	; 0x104
 800a886:	4630      	mov	r0, r6
 800a888:	f000 f874 	bl	800a974 <_scanf_chars>
 800a88c:	2801      	cmp	r0, #1
 800a88e:	d065      	beq.n	800a95c <__ssvfiscanf_r+0x2d8>
 800a890:	2802      	cmp	r0, #2
 800a892:	f47f af21 	bne.w	800a6d8 <__ssvfiscanf_r+0x54>
 800a896:	e7cf      	b.n	800a838 <__ssvfiscanf_r+0x1b4>
 800a898:	220a      	movs	r2, #10
 800a89a:	e7dd      	b.n	800a858 <__ssvfiscanf_r+0x1d4>
 800a89c:	2300      	movs	r3, #0
 800a89e:	9342      	str	r3, [sp, #264]	; 0x108
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e7de      	b.n	800a862 <__ssvfiscanf_r+0x1de>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	9342      	str	r3, [sp, #264]	; 0x108
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	e7da      	b.n	800a862 <__ssvfiscanf_r+0x1de>
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	f000 f9ce 	bl	800ac50 <__sccl>
 800a8b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ba:	9341      	str	r3, [sp, #260]	; 0x104
 800a8bc:	4605      	mov	r5, r0
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e7cf      	b.n	800a862 <__ssvfiscanf_r+0x1de>
 800a8c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c8:	9341      	str	r3, [sp, #260]	; 0x104
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e7c9      	b.n	800a862 <__ssvfiscanf_r+0x1de>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e7c7      	b.n	800a862 <__ssvfiscanf_r+0x1de>
 800a8d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a8d4:	06c3      	lsls	r3, r0, #27
 800a8d6:	f53f aeff 	bmi.w	800a6d8 <__ssvfiscanf_r+0x54>
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8de:	1d19      	adds	r1, r3, #4
 800a8e0:	9100      	str	r1, [sp, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	07c0      	lsls	r0, r0, #31
 800a8e6:	bf4c      	ite	mi
 800a8e8:	801a      	strhmi	r2, [r3, #0]
 800a8ea:	601a      	strpl	r2, [r3, #0]
 800a8ec:	e6f4      	b.n	800a6d8 <__ssvfiscanf_r+0x54>
 800a8ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4798      	blx	r3
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d0b7      	beq.n	800a86a <__ssvfiscanf_r+0x1e6>
 800a8fa:	e79d      	b.n	800a838 <__ssvfiscanf_r+0x1b4>
 800a8fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8fe:	3201      	adds	r2, #1
 800a900:	9245      	str	r2, [sp, #276]	; 0x114
 800a902:	6862      	ldr	r2, [r4, #4]
 800a904:	3a01      	subs	r2, #1
 800a906:	2a00      	cmp	r2, #0
 800a908:	6062      	str	r2, [r4, #4]
 800a90a:	dd02      	ble.n	800a912 <__ssvfiscanf_r+0x28e>
 800a90c:	3301      	adds	r3, #1
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	e7ae      	b.n	800a870 <__ssvfiscanf_r+0x1ec>
 800a912:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a914:	4621      	mov	r1, r4
 800a916:	4630      	mov	r0, r6
 800a918:	4798      	blx	r3
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0a8      	beq.n	800a870 <__ssvfiscanf_r+0x1ec>
 800a91e:	e78b      	b.n	800a838 <__ssvfiscanf_r+0x1b4>
 800a920:	2b04      	cmp	r3, #4
 800a922:	dc06      	bgt.n	800a932 <__ssvfiscanf_r+0x2ae>
 800a924:	466b      	mov	r3, sp
 800a926:	4622      	mov	r2, r4
 800a928:	a941      	add	r1, sp, #260	; 0x104
 800a92a:	4630      	mov	r0, r6
 800a92c:	f000 f87a 	bl	800aa24 <_scanf_i>
 800a930:	e7ac      	b.n	800a88c <__ssvfiscanf_r+0x208>
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <__ssvfiscanf_r+0x2ec>)
 800a934:	2b00      	cmp	r3, #0
 800a936:	f43f aecf 	beq.w	800a6d8 <__ssvfiscanf_r+0x54>
 800a93a:	466b      	mov	r3, sp
 800a93c:	4622      	mov	r2, r4
 800a93e:	a941      	add	r1, sp, #260	; 0x104
 800a940:	4630      	mov	r0, r6
 800a942:	f3af 8000 	nop.w
 800a946:	e7a1      	b.n	800a88c <__ssvfiscanf_r+0x208>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a94e:	bf18      	it	ne
 800a950:	f04f 30ff 	movne.w	r0, #4294967295
 800a954:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a95e:	e7f9      	b.n	800a954 <__ssvfiscanf_r+0x2d0>
 800a960:	0800a5d1 	.word	0x0800a5d1
 800a964:	0800a64b 	.word	0x0800a64b
 800a968:	0800b9ab 	.word	0x0800b9ab
 800a96c:	0800bca2 	.word	0x0800bca2
 800a970:	00000000 	.word	0x00000000

0800a974 <_scanf_chars>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	4615      	mov	r5, r2
 800a97a:	688a      	ldr	r2, [r1, #8]
 800a97c:	4680      	mov	r8, r0
 800a97e:	460c      	mov	r4, r1
 800a980:	b932      	cbnz	r2, 800a990 <_scanf_chars+0x1c>
 800a982:	698a      	ldr	r2, [r1, #24]
 800a984:	2a00      	cmp	r2, #0
 800a986:	bf0c      	ite	eq
 800a988:	2201      	moveq	r2, #1
 800a98a:	f04f 32ff 	movne.w	r2, #4294967295
 800a98e:	608a      	str	r2, [r1, #8]
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800aa20 <_scanf_chars+0xac>
 800a996:	06d1      	lsls	r1, r2, #27
 800a998:	bf5f      	itttt	pl
 800a99a:	681a      	ldrpl	r2, [r3, #0]
 800a99c:	1d11      	addpl	r1, r2, #4
 800a99e:	6019      	strpl	r1, [r3, #0]
 800a9a0:	6816      	ldrpl	r6, [r2, #0]
 800a9a2:	2700      	movs	r7, #0
 800a9a4:	69a0      	ldr	r0, [r4, #24]
 800a9a6:	b188      	cbz	r0, 800a9cc <_scanf_chars+0x58>
 800a9a8:	2801      	cmp	r0, #1
 800a9aa:	d107      	bne.n	800a9bc <_scanf_chars+0x48>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	6963      	ldr	r3, [r4, #20]
 800a9b2:	5c9b      	ldrb	r3, [r3, r2]
 800a9b4:	b953      	cbnz	r3, 800a9cc <_scanf_chars+0x58>
 800a9b6:	bb27      	cbnz	r7, 800aa02 <_scanf_chars+0x8e>
 800a9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9bc:	2802      	cmp	r0, #2
 800a9be:	d120      	bne.n	800aa02 <_scanf_chars+0x8e>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a9c8:	071b      	lsls	r3, r3, #28
 800a9ca:	d41a      	bmi.n	800aa02 <_scanf_chars+0x8e>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	06da      	lsls	r2, r3, #27
 800a9d0:	bf5e      	ittt	pl
 800a9d2:	682b      	ldrpl	r3, [r5, #0]
 800a9d4:	781b      	ldrbpl	r3, [r3, #0]
 800a9d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a9da:	682a      	ldr	r2, [r5, #0]
 800a9dc:	686b      	ldr	r3, [r5, #4]
 800a9de:	3201      	adds	r2, #1
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	68a2      	ldr	r2, [r4, #8]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	3a01      	subs	r2, #1
 800a9e8:	606b      	str	r3, [r5, #4]
 800a9ea:	3701      	adds	r7, #1
 800a9ec:	60a2      	str	r2, [r4, #8]
 800a9ee:	b142      	cbz	r2, 800aa02 <_scanf_chars+0x8e>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dcd7      	bgt.n	800a9a4 <_scanf_chars+0x30>
 800a9f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	4798      	blx	r3
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d0d0      	beq.n	800a9a4 <_scanf_chars+0x30>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	f013 0310 	ands.w	r3, r3, #16
 800aa08:	d105      	bne.n	800aa16 <_scanf_chars+0xa2>
 800aa0a:	68e2      	ldr	r2, [r4, #12]
 800aa0c:	3201      	adds	r2, #1
 800aa0e:	60e2      	str	r2, [r4, #12]
 800aa10:	69a2      	ldr	r2, [r4, #24]
 800aa12:	b102      	cbz	r2, 800aa16 <_scanf_chars+0xa2>
 800aa14:	7033      	strb	r3, [r6, #0]
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	441f      	add	r7, r3
 800aa1a:	6127      	str	r7, [r4, #16]
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	e7cb      	b.n	800a9b8 <_scanf_chars+0x44>
 800aa20:	0800b9ab 	.word	0x0800b9ab

0800aa24 <_scanf_i>:
 800aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	4698      	mov	r8, r3
 800aa2a:	4b74      	ldr	r3, [pc, #464]	; (800abfc <_scanf_i+0x1d8>)
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	4682      	mov	sl, r0
 800aa30:	4616      	mov	r6, r2
 800aa32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa36:	b087      	sub	sp, #28
 800aa38:	ab03      	add	r3, sp, #12
 800aa3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa3e:	4b70      	ldr	r3, [pc, #448]	; (800ac00 <_scanf_i+0x1dc>)
 800aa40:	69a1      	ldr	r1, [r4, #24]
 800aa42:	4a70      	ldr	r2, [pc, #448]	; (800ac04 <_scanf_i+0x1e0>)
 800aa44:	2903      	cmp	r1, #3
 800aa46:	bf18      	it	ne
 800aa48:	461a      	movne	r2, r3
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	9201      	str	r2, [sp, #4]
 800aa4e:	1e5a      	subs	r2, r3, #1
 800aa50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa54:	bf88      	it	hi
 800aa56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa5a:	4627      	mov	r7, r4
 800aa5c:	bf82      	ittt	hi
 800aa5e:	eb03 0905 	addhi.w	r9, r3, r5
 800aa62:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa66:	60a3      	strhi	r3, [r4, #8]
 800aa68:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aa6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aa70:	bf98      	it	ls
 800aa72:	f04f 0900 	movls.w	r9, #0
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	463d      	mov	r5, r7
 800aa7a:	f04f 0b00 	mov.w	fp, #0
 800aa7e:	6831      	ldr	r1, [r6, #0]
 800aa80:	ab03      	add	r3, sp, #12
 800aa82:	7809      	ldrb	r1, [r1, #0]
 800aa84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f7f5 fba9 	bl	80001e0 <memchr>
 800aa8e:	b328      	cbz	r0, 800aadc <_scanf_i+0xb8>
 800aa90:	f1bb 0f01 	cmp.w	fp, #1
 800aa94:	d159      	bne.n	800ab4a <_scanf_i+0x126>
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	b92a      	cbnz	r2, 800aaa6 <_scanf_i+0x82>
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	2308      	movs	r3, #8
 800aa9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	6022      	str	r2, [r4, #0]
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	68a2      	ldr	r2, [r4, #8]
 800aab0:	1e51      	subs	r1, r2, #1
 800aab2:	60a1      	str	r1, [r4, #8]
 800aab4:	b192      	cbz	r2, 800aadc <_scanf_i+0xb8>
 800aab6:	6832      	ldr	r2, [r6, #0]
 800aab8:	1c51      	adds	r1, r2, #1
 800aaba:	6031      	str	r1, [r6, #0]
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	f805 2b01 	strb.w	r2, [r5], #1
 800aac2:	6872      	ldr	r2, [r6, #4]
 800aac4:	3a01      	subs	r2, #1
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	6072      	str	r2, [r6, #4]
 800aaca:	dc07      	bgt.n	800aadc <_scanf_i+0xb8>
 800aacc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aad0:	4631      	mov	r1, r6
 800aad2:	4650      	mov	r0, sl
 800aad4:	4790      	blx	r2
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f040 8085 	bne.w	800abe6 <_scanf_i+0x1c2>
 800aadc:	f10b 0b01 	add.w	fp, fp, #1
 800aae0:	f1bb 0f03 	cmp.w	fp, #3
 800aae4:	d1cb      	bne.n	800aa7e <_scanf_i+0x5a>
 800aae6:	6863      	ldr	r3, [r4, #4]
 800aae8:	b90b      	cbnz	r3, 800aaee <_scanf_i+0xca>
 800aaea:	230a      	movs	r3, #10
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	6863      	ldr	r3, [r4, #4]
 800aaf0:	4945      	ldr	r1, [pc, #276]	; (800ac08 <_scanf_i+0x1e4>)
 800aaf2:	6960      	ldr	r0, [r4, #20]
 800aaf4:	1ac9      	subs	r1, r1, r3
 800aaf6:	f000 f8ab 	bl	800ac50 <__sccl>
 800aafa:	f04f 0b00 	mov.w	fp, #0
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d03d      	beq.n	800ab82 <_scanf_i+0x15e>
 800ab06:	6831      	ldr	r1, [r6, #0]
 800ab08:	6960      	ldr	r0, [r4, #20]
 800ab0a:	f891 c000 	ldrb.w	ip, [r1]
 800ab0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d035      	beq.n	800ab82 <_scanf_i+0x15e>
 800ab16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ab1a:	d124      	bne.n	800ab66 <_scanf_i+0x142>
 800ab1c:	0510      	lsls	r0, r2, #20
 800ab1e:	d522      	bpl.n	800ab66 <_scanf_i+0x142>
 800ab20:	f10b 0b01 	add.w	fp, fp, #1
 800ab24:	f1b9 0f00 	cmp.w	r9, #0
 800ab28:	d003      	beq.n	800ab32 <_scanf_i+0x10e>
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	6873      	ldr	r3, [r6, #4]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	6073      	str	r3, [r6, #4]
 800ab3a:	dd1b      	ble.n	800ab74 <_scanf_i+0x150>
 800ab3c:	6833      	ldr	r3, [r6, #0]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	6033      	str	r3, [r6, #0]
 800ab42:	68a3      	ldr	r3, [r4, #8]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	60a3      	str	r3, [r4, #8]
 800ab48:	e7d9      	b.n	800aafe <_scanf_i+0xda>
 800ab4a:	f1bb 0f02 	cmp.w	fp, #2
 800ab4e:	d1ae      	bne.n	800aaae <_scanf_i+0x8a>
 800ab50:	6822      	ldr	r2, [r4, #0]
 800ab52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ab56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ab5a:	d1bf      	bne.n	800aadc <_scanf_i+0xb8>
 800ab5c:	2310      	movs	r3, #16
 800ab5e:	6063      	str	r3, [r4, #4]
 800ab60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab64:	e7a2      	b.n	800aaac <_scanf_i+0x88>
 800ab66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ab6a:	6022      	str	r2, [r4, #0]
 800ab6c:	780b      	ldrb	r3, [r1, #0]
 800ab6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ab72:	e7de      	b.n	800ab32 <_scanf_i+0x10e>
 800ab74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	4798      	blx	r3
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d0df      	beq.n	800ab42 <_scanf_i+0x11e>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	05d9      	lsls	r1, r3, #23
 800ab86:	d50d      	bpl.n	800aba4 <_scanf_i+0x180>
 800ab88:	42bd      	cmp	r5, r7
 800ab8a:	d909      	bls.n	800aba0 <_scanf_i+0x17c>
 800ab8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab94:	4632      	mov	r2, r6
 800ab96:	4650      	mov	r0, sl
 800ab98:	4798      	blx	r3
 800ab9a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab9e:	464d      	mov	r5, r9
 800aba0:	42bd      	cmp	r5, r7
 800aba2:	d028      	beq.n	800abf6 <_scanf_i+0x1d2>
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	f012 0210 	ands.w	r2, r2, #16
 800abaa:	d113      	bne.n	800abd4 <_scanf_i+0x1b0>
 800abac:	702a      	strb	r2, [r5, #0]
 800abae:	6863      	ldr	r3, [r4, #4]
 800abb0:	9e01      	ldr	r6, [sp, #4]
 800abb2:	4639      	mov	r1, r7
 800abb4:	4650      	mov	r0, sl
 800abb6:	47b0      	blx	r6
 800abb8:	f8d8 3000 	ldr.w	r3, [r8]
 800abbc:	6821      	ldr	r1, [r4, #0]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	f8c8 2000 	str.w	r2, [r8]
 800abc4:	f011 0f20 	tst.w	r1, #32
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	d00f      	beq.n	800abec <_scanf_i+0x1c8>
 800abcc:	6018      	str	r0, [r3, #0]
 800abce:	68e3      	ldr	r3, [r4, #12]
 800abd0:	3301      	adds	r3, #1
 800abd2:	60e3      	str	r3, [r4, #12]
 800abd4:	1bed      	subs	r5, r5, r7
 800abd6:	44ab      	add	fp, r5
 800abd8:	6925      	ldr	r5, [r4, #16]
 800abda:	445d      	add	r5, fp
 800abdc:	6125      	str	r5, [r4, #16]
 800abde:	2000      	movs	r0, #0
 800abe0:	b007      	add	sp, #28
 800abe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe6:	f04f 0b00 	mov.w	fp, #0
 800abea:	e7ca      	b.n	800ab82 <_scanf_i+0x15e>
 800abec:	07ca      	lsls	r2, r1, #31
 800abee:	bf4c      	ite	mi
 800abf0:	8018      	strhmi	r0, [r3, #0]
 800abf2:	6018      	strpl	r0, [r3, #0]
 800abf4:	e7eb      	b.n	800abce <_scanf_i+0x1aa>
 800abf6:	2001      	movs	r0, #1
 800abf8:	e7f2      	b.n	800abe0 <_scanf_i+0x1bc>
 800abfa:	bf00      	nop
 800abfc:	0800b91c 	.word	0x0800b91c
 800ac00:	0800adbd 	.word	0x0800adbd
 800ac04:	08008d05 	.word	0x08008d05
 800ac08:	0800bcc6 	.word	0x0800bcc6

0800ac0c <_read_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d07      	ldr	r5, [pc, #28]	; (800ac2c <_read_r+0x20>)
 800ac10:	4604      	mov	r4, r0
 800ac12:	4608      	mov	r0, r1
 800ac14:	4611      	mov	r1, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	602a      	str	r2, [r5, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f7f6 ffb6 	bl	8001b8c <_read>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_read_r+0x1e>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_read_r+0x1e>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	2000044c 	.word	0x2000044c

0800ac30 <_sbrk_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d06      	ldr	r5, [pc, #24]	; (800ac4c <_sbrk_r+0x1c>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f7 f814 	bl	8001c68 <_sbrk>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_sbrk_r+0x1a>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_sbrk_r+0x1a>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	2000044c 	.word	0x2000044c

0800ac50 <__sccl>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	780b      	ldrb	r3, [r1, #0]
 800ac54:	4604      	mov	r4, r0
 800ac56:	2b5e      	cmp	r3, #94	; 0x5e
 800ac58:	bf0b      	itete	eq
 800ac5a:	784b      	ldrbeq	r3, [r1, #1]
 800ac5c:	1c48      	addne	r0, r1, #1
 800ac5e:	1c88      	addeq	r0, r1, #2
 800ac60:	2200      	movne	r2, #0
 800ac62:	bf08      	it	eq
 800ac64:	2201      	moveq	r2, #1
 800ac66:	1e61      	subs	r1, r4, #1
 800ac68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ac6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ac70:	42a9      	cmp	r1, r5
 800ac72:	d1fb      	bne.n	800ac6c <__sccl+0x1c>
 800ac74:	b90b      	cbnz	r3, 800ac7a <__sccl+0x2a>
 800ac76:	3801      	subs	r0, #1
 800ac78:	bd70      	pop	{r4, r5, r6, pc}
 800ac7a:	f082 0101 	eor.w	r1, r2, #1
 800ac7e:	54e1      	strb	r1, [r4, r3]
 800ac80:	1c42      	adds	r2, r0, #1
 800ac82:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ac86:	2d2d      	cmp	r5, #45	; 0x2d
 800ac88:	f102 36ff 	add.w	r6, r2, #4294967295
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	d006      	beq.n	800ac9e <__sccl+0x4e>
 800ac90:	2d5d      	cmp	r5, #93	; 0x5d
 800ac92:	d0f1      	beq.n	800ac78 <__sccl+0x28>
 800ac94:	b90d      	cbnz	r5, 800ac9a <__sccl+0x4a>
 800ac96:	4630      	mov	r0, r6
 800ac98:	e7ee      	b.n	800ac78 <__sccl+0x28>
 800ac9a:	462b      	mov	r3, r5
 800ac9c:	e7ef      	b.n	800ac7e <__sccl+0x2e>
 800ac9e:	7816      	ldrb	r6, [r2, #0]
 800aca0:	2e5d      	cmp	r6, #93	; 0x5d
 800aca2:	d0fa      	beq.n	800ac9a <__sccl+0x4a>
 800aca4:	42b3      	cmp	r3, r6
 800aca6:	dcf8      	bgt.n	800ac9a <__sccl+0x4a>
 800aca8:	4618      	mov	r0, r3
 800acaa:	3001      	adds	r0, #1
 800acac:	4286      	cmp	r6, r0
 800acae:	5421      	strb	r1, [r4, r0]
 800acb0:	dcfb      	bgt.n	800acaa <__sccl+0x5a>
 800acb2:	43d8      	mvns	r0, r3
 800acb4:	4430      	add	r0, r6
 800acb6:	1c5d      	adds	r5, r3, #1
 800acb8:	42b3      	cmp	r3, r6
 800acba:	bfa8      	it	ge
 800acbc:	2000      	movge	r0, #0
 800acbe:	182b      	adds	r3, r5, r0
 800acc0:	3202      	adds	r2, #2
 800acc2:	e7de      	b.n	800ac82 <__sccl+0x32>

0800acc4 <_strtoul_l.isra.0>:
 800acc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acc8:	4e3b      	ldr	r6, [pc, #236]	; (800adb8 <_strtoul_l.isra.0+0xf4>)
 800acca:	4686      	mov	lr, r0
 800accc:	468c      	mov	ip, r1
 800acce:	4660      	mov	r0, ip
 800acd0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800acd4:	5da5      	ldrb	r5, [r4, r6]
 800acd6:	f015 0508 	ands.w	r5, r5, #8
 800acda:	d1f8      	bne.n	800acce <_strtoul_l.isra.0+0xa>
 800acdc:	2c2d      	cmp	r4, #45	; 0x2d
 800acde:	d134      	bne.n	800ad4a <_strtoul_l.isra.0+0x86>
 800ace0:	f89c 4000 	ldrb.w	r4, [ip]
 800ace4:	f04f 0801 	mov.w	r8, #1
 800ace8:	f100 0c02 	add.w	ip, r0, #2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05e      	beq.n	800adae <_strtoul_l.isra.0+0xea>
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d10c      	bne.n	800ad0e <_strtoul_l.isra.0+0x4a>
 800acf4:	2c30      	cmp	r4, #48	; 0x30
 800acf6:	d10a      	bne.n	800ad0e <_strtoul_l.isra.0+0x4a>
 800acf8:	f89c 0000 	ldrb.w	r0, [ip]
 800acfc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad00:	2858      	cmp	r0, #88	; 0x58
 800ad02:	d14f      	bne.n	800ada4 <_strtoul_l.isra.0+0xe0>
 800ad04:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ad08:	2310      	movs	r3, #16
 800ad0a:	f10c 0c02 	add.w	ip, ip, #2
 800ad0e:	f04f 37ff 	mov.w	r7, #4294967295
 800ad12:	2500      	movs	r5, #0
 800ad14:	fbb7 f7f3 	udiv	r7, r7, r3
 800ad18:	fb03 f907 	mul.w	r9, r3, r7
 800ad1c:	ea6f 0909 	mvn.w	r9, r9
 800ad20:	4628      	mov	r0, r5
 800ad22:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ad26:	2e09      	cmp	r6, #9
 800ad28:	d818      	bhi.n	800ad5c <_strtoul_l.isra.0+0x98>
 800ad2a:	4634      	mov	r4, r6
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	dd24      	ble.n	800ad7a <_strtoul_l.isra.0+0xb6>
 800ad30:	2d00      	cmp	r5, #0
 800ad32:	db1f      	blt.n	800ad74 <_strtoul_l.isra.0+0xb0>
 800ad34:	4287      	cmp	r7, r0
 800ad36:	d31d      	bcc.n	800ad74 <_strtoul_l.isra.0+0xb0>
 800ad38:	d101      	bne.n	800ad3e <_strtoul_l.isra.0+0x7a>
 800ad3a:	45a1      	cmp	r9, r4
 800ad3c:	db1a      	blt.n	800ad74 <_strtoul_l.isra.0+0xb0>
 800ad3e:	fb00 4003 	mla	r0, r0, r3, r4
 800ad42:	2501      	movs	r5, #1
 800ad44:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ad48:	e7eb      	b.n	800ad22 <_strtoul_l.isra.0+0x5e>
 800ad4a:	2c2b      	cmp	r4, #43	; 0x2b
 800ad4c:	bf08      	it	eq
 800ad4e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ad52:	46a8      	mov	r8, r5
 800ad54:	bf08      	it	eq
 800ad56:	f100 0c02 	addeq.w	ip, r0, #2
 800ad5a:	e7c7      	b.n	800acec <_strtoul_l.isra.0+0x28>
 800ad5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ad60:	2e19      	cmp	r6, #25
 800ad62:	d801      	bhi.n	800ad68 <_strtoul_l.isra.0+0xa4>
 800ad64:	3c37      	subs	r4, #55	; 0x37
 800ad66:	e7e1      	b.n	800ad2c <_strtoul_l.isra.0+0x68>
 800ad68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ad6c:	2e19      	cmp	r6, #25
 800ad6e:	d804      	bhi.n	800ad7a <_strtoul_l.isra.0+0xb6>
 800ad70:	3c57      	subs	r4, #87	; 0x57
 800ad72:	e7db      	b.n	800ad2c <_strtoul_l.isra.0+0x68>
 800ad74:	f04f 35ff 	mov.w	r5, #4294967295
 800ad78:	e7e4      	b.n	800ad44 <_strtoul_l.isra.0+0x80>
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	da07      	bge.n	800ad8e <_strtoul_l.isra.0+0xca>
 800ad7e:	2322      	movs	r3, #34	; 0x22
 800ad80:	f8ce 3000 	str.w	r3, [lr]
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	b942      	cbnz	r2, 800ad9c <_strtoul_l.isra.0+0xd8>
 800ad8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad8e:	f1b8 0f00 	cmp.w	r8, #0
 800ad92:	d000      	beq.n	800ad96 <_strtoul_l.isra.0+0xd2>
 800ad94:	4240      	negs	r0, r0
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d0f7      	beq.n	800ad8a <_strtoul_l.isra.0+0xc6>
 800ad9a:	b10d      	cbz	r5, 800ada0 <_strtoul_l.isra.0+0xdc>
 800ad9c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ada0:	6011      	str	r1, [r2, #0]
 800ada2:	e7f2      	b.n	800ad8a <_strtoul_l.isra.0+0xc6>
 800ada4:	2430      	movs	r4, #48	; 0x30
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1b1      	bne.n	800ad0e <_strtoul_l.isra.0+0x4a>
 800adaa:	2308      	movs	r3, #8
 800adac:	e7af      	b.n	800ad0e <_strtoul_l.isra.0+0x4a>
 800adae:	2c30      	cmp	r4, #48	; 0x30
 800adb0:	d0a2      	beq.n	800acf8 <_strtoul_l.isra.0+0x34>
 800adb2:	230a      	movs	r3, #10
 800adb4:	e7ab      	b.n	800ad0e <_strtoul_l.isra.0+0x4a>
 800adb6:	bf00      	nop
 800adb8:	0800b9ab 	.word	0x0800b9ab

0800adbc <_strtoul_r>:
 800adbc:	f7ff bf82 	b.w	800acc4 <_strtoul_l.isra.0>

0800adc0 <__submore>:
 800adc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc4:	460c      	mov	r4, r1
 800adc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800adc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adcc:	4299      	cmp	r1, r3
 800adce:	d11d      	bne.n	800ae0c <__submore+0x4c>
 800add0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800add4:	f7ff fa46 	bl	800a264 <_malloc_r>
 800add8:	b918      	cbnz	r0, 800ade2 <__submore+0x22>
 800adda:	f04f 30ff 	mov.w	r0, #4294967295
 800adde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade6:	63a3      	str	r3, [r4, #56]	; 0x38
 800ade8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800adec:	6360      	str	r0, [r4, #52]	; 0x34
 800adee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800adf2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800adf6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800adfa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800adfe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ae02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ae06:	6020      	str	r0, [r4, #0]
 800ae08:	2000      	movs	r0, #0
 800ae0a:	e7e8      	b.n	800adde <__submore+0x1e>
 800ae0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ae0e:	0077      	lsls	r7, r6, #1
 800ae10:	463a      	mov	r2, r7
 800ae12:	f000 fa31 	bl	800b278 <_realloc_r>
 800ae16:	4605      	mov	r5, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d0de      	beq.n	800adda <__submore+0x1a>
 800ae1c:	eb00 0806 	add.w	r8, r0, r6
 800ae20:	4601      	mov	r1, r0
 800ae22:	4632      	mov	r2, r6
 800ae24:	4640      	mov	r0, r8
 800ae26:	f7fe fe31 	bl	8009a8c <memcpy>
 800ae2a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ae2e:	f8c4 8000 	str.w	r8, [r4]
 800ae32:	e7e9      	b.n	800ae08 <__submore+0x48>

0800ae34 <__assert_func>:
 800ae34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae36:	4614      	mov	r4, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <__assert_func+0x2c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4605      	mov	r5, r0
 800ae40:	68d8      	ldr	r0, [r3, #12]
 800ae42:	b14c      	cbz	r4, 800ae58 <__assert_func+0x24>
 800ae44:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <__assert_func+0x30>)
 800ae46:	9100      	str	r1, [sp, #0]
 800ae48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae4c:	4906      	ldr	r1, [pc, #24]	; (800ae68 <__assert_func+0x34>)
 800ae4e:	462b      	mov	r3, r5
 800ae50:	f000 f9a6 	bl	800b1a0 <fiprintf>
 800ae54:	f000 fc5e 	bl	800b714 <abort>
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__assert_func+0x38>)
 800ae5a:	461c      	mov	r4, r3
 800ae5c:	e7f3      	b.n	800ae46 <__assert_func+0x12>
 800ae5e:	bf00      	nop
 800ae60:	20000044 	.word	0x20000044
 800ae64:	0800bcc8 	.word	0x0800bcc8
 800ae68:	0800bcd5 	.word	0x0800bcd5
 800ae6c:	0800bd03 	.word	0x0800bd03

0800ae70 <__sflush_r>:
 800ae70:	898a      	ldrh	r2, [r1, #12]
 800ae72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae76:	4605      	mov	r5, r0
 800ae78:	0710      	lsls	r0, r2, #28
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	d458      	bmi.n	800af30 <__sflush_r+0xc0>
 800ae7e:	684b      	ldr	r3, [r1, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	dc05      	bgt.n	800ae90 <__sflush_r+0x20>
 800ae84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	dc02      	bgt.n	800ae90 <__sflush_r+0x20>
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	d0f9      	beq.n	800ae8a <__sflush_r+0x1a>
 800ae96:	2300      	movs	r3, #0
 800ae98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae9c:	682f      	ldr	r7, [r5, #0]
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	d032      	beq.n	800af08 <__sflush_r+0x98>
 800aea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	075a      	lsls	r2, r3, #29
 800aea8:	d505      	bpl.n	800aeb6 <__sflush_r+0x46>
 800aeaa:	6863      	ldr	r3, [r4, #4]
 800aeac:	1ac0      	subs	r0, r0, r3
 800aeae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeb0:	b10b      	cbz	r3, 800aeb6 <__sflush_r+0x46>
 800aeb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	4602      	mov	r2, r0
 800aeba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aebc:	6a21      	ldr	r1, [r4, #32]
 800aebe:	4628      	mov	r0, r5
 800aec0:	47b0      	blx	r6
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	d106      	bne.n	800aed6 <__sflush_r+0x66>
 800aec8:	6829      	ldr	r1, [r5, #0]
 800aeca:	291d      	cmp	r1, #29
 800aecc:	d82c      	bhi.n	800af28 <__sflush_r+0xb8>
 800aece:	4a2a      	ldr	r2, [pc, #168]	; (800af78 <__sflush_r+0x108>)
 800aed0:	40ca      	lsrs	r2, r1
 800aed2:	07d6      	lsls	r6, r2, #31
 800aed4:	d528      	bpl.n	800af28 <__sflush_r+0xb8>
 800aed6:	2200      	movs	r2, #0
 800aed8:	6062      	str	r2, [r4, #4]
 800aeda:	04d9      	lsls	r1, r3, #19
 800aedc:	6922      	ldr	r2, [r4, #16]
 800aede:	6022      	str	r2, [r4, #0]
 800aee0:	d504      	bpl.n	800aeec <__sflush_r+0x7c>
 800aee2:	1c42      	adds	r2, r0, #1
 800aee4:	d101      	bne.n	800aeea <__sflush_r+0x7a>
 800aee6:	682b      	ldr	r3, [r5, #0]
 800aee8:	b903      	cbnz	r3, 800aeec <__sflush_r+0x7c>
 800aeea:	6560      	str	r0, [r4, #84]	; 0x54
 800aeec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeee:	602f      	str	r7, [r5, #0]
 800aef0:	2900      	cmp	r1, #0
 800aef2:	d0ca      	beq.n	800ae8a <__sflush_r+0x1a>
 800aef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef8:	4299      	cmp	r1, r3
 800aefa:	d002      	beq.n	800af02 <__sflush_r+0x92>
 800aefc:	4628      	mov	r0, r5
 800aefe:	f7ff f961 	bl	800a1c4 <_free_r>
 800af02:	2000      	movs	r0, #0
 800af04:	6360      	str	r0, [r4, #52]	; 0x34
 800af06:	e7c1      	b.n	800ae8c <__sflush_r+0x1c>
 800af08:	6a21      	ldr	r1, [r4, #32]
 800af0a:	2301      	movs	r3, #1
 800af0c:	4628      	mov	r0, r5
 800af0e:	47b0      	blx	r6
 800af10:	1c41      	adds	r1, r0, #1
 800af12:	d1c7      	bne.n	800aea4 <__sflush_r+0x34>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0c4      	beq.n	800aea4 <__sflush_r+0x34>
 800af1a:	2b1d      	cmp	r3, #29
 800af1c:	d001      	beq.n	800af22 <__sflush_r+0xb2>
 800af1e:	2b16      	cmp	r3, #22
 800af20:	d101      	bne.n	800af26 <__sflush_r+0xb6>
 800af22:	602f      	str	r7, [r5, #0]
 800af24:	e7b1      	b.n	800ae8a <__sflush_r+0x1a>
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	e7ad      	b.n	800ae8c <__sflush_r+0x1c>
 800af30:	690f      	ldr	r7, [r1, #16]
 800af32:	2f00      	cmp	r7, #0
 800af34:	d0a9      	beq.n	800ae8a <__sflush_r+0x1a>
 800af36:	0793      	lsls	r3, r2, #30
 800af38:	680e      	ldr	r6, [r1, #0]
 800af3a:	bf08      	it	eq
 800af3c:	694b      	ldreq	r3, [r1, #20]
 800af3e:	600f      	str	r7, [r1, #0]
 800af40:	bf18      	it	ne
 800af42:	2300      	movne	r3, #0
 800af44:	eba6 0807 	sub.w	r8, r6, r7
 800af48:	608b      	str	r3, [r1, #8]
 800af4a:	f1b8 0f00 	cmp.w	r8, #0
 800af4e:	dd9c      	ble.n	800ae8a <__sflush_r+0x1a>
 800af50:	6a21      	ldr	r1, [r4, #32]
 800af52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af54:	4643      	mov	r3, r8
 800af56:	463a      	mov	r2, r7
 800af58:	4628      	mov	r0, r5
 800af5a:	47b0      	blx	r6
 800af5c:	2800      	cmp	r0, #0
 800af5e:	dc06      	bgt.n	800af6e <__sflush_r+0xfe>
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af66:	81a3      	strh	r3, [r4, #12]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	e78e      	b.n	800ae8c <__sflush_r+0x1c>
 800af6e:	4407      	add	r7, r0
 800af70:	eba8 0800 	sub.w	r8, r8, r0
 800af74:	e7e9      	b.n	800af4a <__sflush_r+0xda>
 800af76:	bf00      	nop
 800af78:	20400001 	.word	0x20400001

0800af7c <_fflush_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	690b      	ldr	r3, [r1, #16]
 800af80:	4605      	mov	r5, r0
 800af82:	460c      	mov	r4, r1
 800af84:	b913      	cbnz	r3, 800af8c <_fflush_r+0x10>
 800af86:	2500      	movs	r5, #0
 800af88:	4628      	mov	r0, r5
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	b118      	cbz	r0, 800af96 <_fflush_r+0x1a>
 800af8e:	6983      	ldr	r3, [r0, #24]
 800af90:	b90b      	cbnz	r3, 800af96 <_fflush_r+0x1a>
 800af92:	f000 f887 	bl	800b0a4 <__sinit>
 800af96:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <_fflush_r+0x6c>)
 800af98:	429c      	cmp	r4, r3
 800af9a:	d11b      	bne.n	800afd4 <_fflush_r+0x58>
 800af9c:	686c      	ldr	r4, [r5, #4]
 800af9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0ef      	beq.n	800af86 <_fflush_r+0xa>
 800afa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afa8:	07d0      	lsls	r0, r2, #31
 800afaa:	d404      	bmi.n	800afb6 <_fflush_r+0x3a>
 800afac:	0599      	lsls	r1, r3, #22
 800afae:	d402      	bmi.n	800afb6 <_fflush_r+0x3a>
 800afb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afb2:	f000 f927 	bl	800b204 <__retarget_lock_acquire_recursive>
 800afb6:	4628      	mov	r0, r5
 800afb8:	4621      	mov	r1, r4
 800afba:	f7ff ff59 	bl	800ae70 <__sflush_r>
 800afbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afc0:	07da      	lsls	r2, r3, #31
 800afc2:	4605      	mov	r5, r0
 800afc4:	d4e0      	bmi.n	800af88 <_fflush_r+0xc>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	059b      	lsls	r3, r3, #22
 800afca:	d4dd      	bmi.n	800af88 <_fflush_r+0xc>
 800afcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afce:	f000 f91a 	bl	800b206 <__retarget_lock_release_recursive>
 800afd2:	e7d9      	b.n	800af88 <_fflush_r+0xc>
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <_fflush_r+0x70>)
 800afd6:	429c      	cmp	r4, r3
 800afd8:	d101      	bne.n	800afde <_fflush_r+0x62>
 800afda:	68ac      	ldr	r4, [r5, #8]
 800afdc:	e7df      	b.n	800af9e <_fflush_r+0x22>
 800afde:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <_fflush_r+0x74>)
 800afe0:	429c      	cmp	r4, r3
 800afe2:	bf08      	it	eq
 800afe4:	68ec      	ldreq	r4, [r5, #12]
 800afe6:	e7da      	b.n	800af9e <_fflush_r+0x22>
 800afe8:	0800bd24 	.word	0x0800bd24
 800afec:	0800bd44 	.word	0x0800bd44
 800aff0:	0800bd04 	.word	0x0800bd04

0800aff4 <std>:
 800aff4:	2300      	movs	r3, #0
 800aff6:	b510      	push	{r4, lr}
 800aff8:	4604      	mov	r4, r0
 800affa:	e9c0 3300 	strd	r3, r3, [r0]
 800affe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b002:	6083      	str	r3, [r0, #8]
 800b004:	8181      	strh	r1, [r0, #12]
 800b006:	6643      	str	r3, [r0, #100]	; 0x64
 800b008:	81c2      	strh	r2, [r0, #14]
 800b00a:	6183      	str	r3, [r0, #24]
 800b00c:	4619      	mov	r1, r3
 800b00e:	2208      	movs	r2, #8
 800b010:	305c      	adds	r0, #92	; 0x5c
 800b012:	f7fd f8ef 	bl	80081f4 <memset>
 800b016:	4b05      	ldr	r3, [pc, #20]	; (800b02c <std+0x38>)
 800b018:	6263      	str	r3, [r4, #36]	; 0x24
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <std+0x3c>)
 800b01c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <std+0x40>)
 800b020:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <std+0x44>)
 800b024:	6224      	str	r4, [r4, #32]
 800b026:	6323      	str	r3, [r4, #48]	; 0x30
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	08008b71 	.word	0x08008b71
 800b030:	08008b97 	.word	0x08008b97
 800b034:	08008bcf 	.word	0x08008bcf
 800b038:	08008bf3 	.word	0x08008bf3

0800b03c <_cleanup_r>:
 800b03c:	4901      	ldr	r1, [pc, #4]	; (800b044 <_cleanup_r+0x8>)
 800b03e:	f000 b8c1 	b.w	800b1c4 <_fwalk_reent>
 800b042:	bf00      	nop
 800b044:	0800af7d 	.word	0x0800af7d

0800b048 <__sfmoreglue>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	1e4a      	subs	r2, r1, #1
 800b04c:	2568      	movs	r5, #104	; 0x68
 800b04e:	4355      	muls	r5, r2
 800b050:	460e      	mov	r6, r1
 800b052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b056:	f7ff f905 	bl	800a264 <_malloc_r>
 800b05a:	4604      	mov	r4, r0
 800b05c:	b140      	cbz	r0, 800b070 <__sfmoreglue+0x28>
 800b05e:	2100      	movs	r1, #0
 800b060:	e9c0 1600 	strd	r1, r6, [r0]
 800b064:	300c      	adds	r0, #12
 800b066:	60a0      	str	r0, [r4, #8]
 800b068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b06c:	f7fd f8c2 	bl	80081f4 <memset>
 800b070:	4620      	mov	r0, r4
 800b072:	bd70      	pop	{r4, r5, r6, pc}

0800b074 <__sfp_lock_acquire>:
 800b074:	4801      	ldr	r0, [pc, #4]	; (800b07c <__sfp_lock_acquire+0x8>)
 800b076:	f000 b8c5 	b.w	800b204 <__retarget_lock_acquire_recursive>
 800b07a:	bf00      	nop
 800b07c:	20000458 	.word	0x20000458

0800b080 <__sfp_lock_release>:
 800b080:	4801      	ldr	r0, [pc, #4]	; (800b088 <__sfp_lock_release+0x8>)
 800b082:	f000 b8c0 	b.w	800b206 <__retarget_lock_release_recursive>
 800b086:	bf00      	nop
 800b088:	20000458 	.word	0x20000458

0800b08c <__sinit_lock_acquire>:
 800b08c:	4801      	ldr	r0, [pc, #4]	; (800b094 <__sinit_lock_acquire+0x8>)
 800b08e:	f000 b8b9 	b.w	800b204 <__retarget_lock_acquire_recursive>
 800b092:	bf00      	nop
 800b094:	20000453 	.word	0x20000453

0800b098 <__sinit_lock_release>:
 800b098:	4801      	ldr	r0, [pc, #4]	; (800b0a0 <__sinit_lock_release+0x8>)
 800b09a:	f000 b8b4 	b.w	800b206 <__retarget_lock_release_recursive>
 800b09e:	bf00      	nop
 800b0a0:	20000453 	.word	0x20000453

0800b0a4 <__sinit>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	f7ff fff0 	bl	800b08c <__sinit_lock_acquire>
 800b0ac:	69a3      	ldr	r3, [r4, #24]
 800b0ae:	b11b      	cbz	r3, 800b0b8 <__sinit+0x14>
 800b0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b4:	f7ff bff0 	b.w	800b098 <__sinit_lock_release>
 800b0b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b0be:	4b13      	ldr	r3, [pc, #76]	; (800b10c <__sinit+0x68>)
 800b0c0:	4a13      	ldr	r2, [pc, #76]	; (800b110 <__sinit+0x6c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	bf04      	itt	eq
 800b0ca:	2301      	moveq	r3, #1
 800b0cc:	61a3      	streq	r3, [r4, #24]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 f820 	bl	800b114 <__sfp>
 800b0d4:	6060      	str	r0, [r4, #4]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 f81c 	bl	800b114 <__sfp>
 800b0dc:	60a0      	str	r0, [r4, #8]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f818 	bl	800b114 <__sfp>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	60e0      	str	r0, [r4, #12]
 800b0e8:	2104      	movs	r1, #4
 800b0ea:	6860      	ldr	r0, [r4, #4]
 800b0ec:	f7ff ff82 	bl	800aff4 <std>
 800b0f0:	68a0      	ldr	r0, [r4, #8]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	2109      	movs	r1, #9
 800b0f6:	f7ff ff7d 	bl	800aff4 <std>
 800b0fa:	68e0      	ldr	r0, [r4, #12]
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	2112      	movs	r1, #18
 800b100:	f7ff ff78 	bl	800aff4 <std>
 800b104:	2301      	movs	r3, #1
 800b106:	61a3      	str	r3, [r4, #24]
 800b108:	e7d2      	b.n	800b0b0 <__sinit+0xc>
 800b10a:	bf00      	nop
 800b10c:	0800b974 	.word	0x0800b974
 800b110:	0800b03d 	.word	0x0800b03d

0800b114 <__sfp>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	4607      	mov	r7, r0
 800b118:	f7ff ffac 	bl	800b074 <__sfp_lock_acquire>
 800b11c:	4b1e      	ldr	r3, [pc, #120]	; (800b198 <__sfp+0x84>)
 800b11e:	681e      	ldr	r6, [r3, #0]
 800b120:	69b3      	ldr	r3, [r6, #24]
 800b122:	b913      	cbnz	r3, 800b12a <__sfp+0x16>
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff ffbd 	bl	800b0a4 <__sinit>
 800b12a:	3648      	adds	r6, #72	; 0x48
 800b12c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b130:	3b01      	subs	r3, #1
 800b132:	d503      	bpl.n	800b13c <__sfp+0x28>
 800b134:	6833      	ldr	r3, [r6, #0]
 800b136:	b30b      	cbz	r3, 800b17c <__sfp+0x68>
 800b138:	6836      	ldr	r6, [r6, #0]
 800b13a:	e7f7      	b.n	800b12c <__sfp+0x18>
 800b13c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b140:	b9d5      	cbnz	r5, 800b178 <__sfp+0x64>
 800b142:	4b16      	ldr	r3, [pc, #88]	; (800b19c <__sfp+0x88>)
 800b144:	60e3      	str	r3, [r4, #12]
 800b146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b14a:	6665      	str	r5, [r4, #100]	; 0x64
 800b14c:	f000 f859 	bl	800b202 <__retarget_lock_init_recursive>
 800b150:	f7ff ff96 	bl	800b080 <__sfp_lock_release>
 800b154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b15c:	6025      	str	r5, [r4, #0]
 800b15e:	61a5      	str	r5, [r4, #24]
 800b160:	2208      	movs	r2, #8
 800b162:	4629      	mov	r1, r5
 800b164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b168:	f7fd f844 	bl	80081f4 <memset>
 800b16c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b174:	4620      	mov	r0, r4
 800b176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b178:	3468      	adds	r4, #104	; 0x68
 800b17a:	e7d9      	b.n	800b130 <__sfp+0x1c>
 800b17c:	2104      	movs	r1, #4
 800b17e:	4638      	mov	r0, r7
 800b180:	f7ff ff62 	bl	800b048 <__sfmoreglue>
 800b184:	4604      	mov	r4, r0
 800b186:	6030      	str	r0, [r6, #0]
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1d5      	bne.n	800b138 <__sfp+0x24>
 800b18c:	f7ff ff78 	bl	800b080 <__sfp_lock_release>
 800b190:	230c      	movs	r3, #12
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	e7ee      	b.n	800b174 <__sfp+0x60>
 800b196:	bf00      	nop
 800b198:	0800b974 	.word	0x0800b974
 800b19c:	ffff0001 	.word	0xffff0001

0800b1a0 <fiprintf>:
 800b1a0:	b40e      	push	{r1, r2, r3}
 800b1a2:	b503      	push	{r0, r1, lr}
 800b1a4:	4601      	mov	r1, r0
 800b1a6:	ab03      	add	r3, sp, #12
 800b1a8:	4805      	ldr	r0, [pc, #20]	; (800b1c0 <fiprintf+0x20>)
 800b1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ae:	6800      	ldr	r0, [r0, #0]
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	f000 f8b1 	bl	800b318 <_vfiprintf_r>
 800b1b6:	b002      	add	sp, #8
 800b1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1bc:	b003      	add	sp, #12
 800b1be:	4770      	bx	lr
 800b1c0:	20000044 	.word	0x20000044

0800b1c4 <_fwalk_reent>:
 800b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	4688      	mov	r8, r1
 800b1cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1d0:	2700      	movs	r7, #0
 800b1d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b1da:	d505      	bpl.n	800b1e8 <_fwalk_reent+0x24>
 800b1dc:	6824      	ldr	r4, [r4, #0]
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	d1f7      	bne.n	800b1d2 <_fwalk_reent+0xe>
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e8:	89ab      	ldrh	r3, [r5, #12]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d907      	bls.n	800b1fe <_fwalk_reent+0x3a>
 800b1ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	d003      	beq.n	800b1fe <_fwalk_reent+0x3a>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	47c0      	blx	r8
 800b1fc:	4307      	orrs	r7, r0
 800b1fe:	3568      	adds	r5, #104	; 0x68
 800b200:	e7e9      	b.n	800b1d6 <_fwalk_reent+0x12>

0800b202 <__retarget_lock_init_recursive>:
 800b202:	4770      	bx	lr

0800b204 <__retarget_lock_acquire_recursive>:
 800b204:	4770      	bx	lr

0800b206 <__retarget_lock_release_recursive>:
 800b206:	4770      	bx	lr

0800b208 <__ascii_mbtowc>:
 800b208:	b082      	sub	sp, #8
 800b20a:	b901      	cbnz	r1, 800b20e <__ascii_mbtowc+0x6>
 800b20c:	a901      	add	r1, sp, #4
 800b20e:	b142      	cbz	r2, 800b222 <__ascii_mbtowc+0x1a>
 800b210:	b14b      	cbz	r3, 800b226 <__ascii_mbtowc+0x1e>
 800b212:	7813      	ldrb	r3, [r2, #0]
 800b214:	600b      	str	r3, [r1, #0]
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	1e10      	subs	r0, r2, #0
 800b21a:	bf18      	it	ne
 800b21c:	2001      	movne	r0, #1
 800b21e:	b002      	add	sp, #8
 800b220:	4770      	bx	lr
 800b222:	4610      	mov	r0, r2
 800b224:	e7fb      	b.n	800b21e <__ascii_mbtowc+0x16>
 800b226:	f06f 0001 	mvn.w	r0, #1
 800b22a:	e7f8      	b.n	800b21e <__ascii_mbtowc+0x16>

0800b22c <memmove>:
 800b22c:	4288      	cmp	r0, r1
 800b22e:	b510      	push	{r4, lr}
 800b230:	eb01 0402 	add.w	r4, r1, r2
 800b234:	d902      	bls.n	800b23c <memmove+0x10>
 800b236:	4284      	cmp	r4, r0
 800b238:	4623      	mov	r3, r4
 800b23a:	d807      	bhi.n	800b24c <memmove+0x20>
 800b23c:	1e43      	subs	r3, r0, #1
 800b23e:	42a1      	cmp	r1, r4
 800b240:	d008      	beq.n	800b254 <memmove+0x28>
 800b242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b24a:	e7f8      	b.n	800b23e <memmove+0x12>
 800b24c:	4402      	add	r2, r0
 800b24e:	4601      	mov	r1, r0
 800b250:	428a      	cmp	r2, r1
 800b252:	d100      	bne.n	800b256 <memmove+0x2a>
 800b254:	bd10      	pop	{r4, pc}
 800b256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b25e:	e7f7      	b.n	800b250 <memmove+0x24>

0800b260 <__malloc_lock>:
 800b260:	4801      	ldr	r0, [pc, #4]	; (800b268 <__malloc_lock+0x8>)
 800b262:	f7ff bfcf 	b.w	800b204 <__retarget_lock_acquire_recursive>
 800b266:	bf00      	nop
 800b268:	20000454 	.word	0x20000454

0800b26c <__malloc_unlock>:
 800b26c:	4801      	ldr	r0, [pc, #4]	; (800b274 <__malloc_unlock+0x8>)
 800b26e:	f7ff bfca 	b.w	800b206 <__retarget_lock_release_recursive>
 800b272:	bf00      	nop
 800b274:	20000454 	.word	0x20000454

0800b278 <_realloc_r>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	4607      	mov	r7, r0
 800b27c:	4614      	mov	r4, r2
 800b27e:	460e      	mov	r6, r1
 800b280:	b921      	cbnz	r1, 800b28c <_realloc_r+0x14>
 800b282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b286:	4611      	mov	r1, r2
 800b288:	f7fe bfec 	b.w	800a264 <_malloc_r>
 800b28c:	b922      	cbnz	r2, 800b298 <_realloc_r+0x20>
 800b28e:	f7fe ff99 	bl	800a1c4 <_free_r>
 800b292:	4625      	mov	r5, r4
 800b294:	4628      	mov	r0, r5
 800b296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b298:	f000 faa8 	bl	800b7ec <_malloc_usable_size_r>
 800b29c:	42a0      	cmp	r0, r4
 800b29e:	d20f      	bcs.n	800b2c0 <_realloc_r+0x48>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	f7fe ffde 	bl	800a264 <_malloc_r>
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d0f2      	beq.n	800b294 <_realloc_r+0x1c>
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	f7fe fbeb 	bl	8009a8c <memcpy>
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7fe ff83 	bl	800a1c4 <_free_r>
 800b2be:	e7e9      	b.n	800b294 <_realloc_r+0x1c>
 800b2c0:	4635      	mov	r5, r6
 800b2c2:	e7e7      	b.n	800b294 <_realloc_r+0x1c>

0800b2c4 <__sfputc_r>:
 800b2c4:	6893      	ldr	r3, [r2, #8]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	b410      	push	{r4}
 800b2cc:	6093      	str	r3, [r2, #8]
 800b2ce:	da08      	bge.n	800b2e2 <__sfputc_r+0x1e>
 800b2d0:	6994      	ldr	r4, [r2, #24]
 800b2d2:	42a3      	cmp	r3, r4
 800b2d4:	db01      	blt.n	800b2da <__sfputc_r+0x16>
 800b2d6:	290a      	cmp	r1, #10
 800b2d8:	d103      	bne.n	800b2e2 <__sfputc_r+0x1e>
 800b2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2de:	f000 b94b 	b.w	800b578 <__swbuf_r>
 800b2e2:	6813      	ldr	r3, [r2, #0]
 800b2e4:	1c58      	adds	r0, r3, #1
 800b2e6:	6010      	str	r0, [r2, #0]
 800b2e8:	7019      	strb	r1, [r3, #0]
 800b2ea:	4608      	mov	r0, r1
 800b2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <__sfputs_r>:
 800b2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	4614      	mov	r4, r2
 800b2fa:	18d5      	adds	r5, r2, r3
 800b2fc:	42ac      	cmp	r4, r5
 800b2fe:	d101      	bne.n	800b304 <__sfputs_r+0x12>
 800b300:	2000      	movs	r0, #0
 800b302:	e007      	b.n	800b314 <__sfputs_r+0x22>
 800b304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b308:	463a      	mov	r2, r7
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7ff ffda 	bl	800b2c4 <__sfputc_r>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d1f3      	bne.n	800b2fc <__sfputs_r+0xa>
 800b314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b318 <_vfiprintf_r>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	460d      	mov	r5, r1
 800b31e:	b09d      	sub	sp, #116	; 0x74
 800b320:	4614      	mov	r4, r2
 800b322:	4698      	mov	r8, r3
 800b324:	4606      	mov	r6, r0
 800b326:	b118      	cbz	r0, 800b330 <_vfiprintf_r+0x18>
 800b328:	6983      	ldr	r3, [r0, #24]
 800b32a:	b90b      	cbnz	r3, 800b330 <_vfiprintf_r+0x18>
 800b32c:	f7ff feba 	bl	800b0a4 <__sinit>
 800b330:	4b89      	ldr	r3, [pc, #548]	; (800b558 <_vfiprintf_r+0x240>)
 800b332:	429d      	cmp	r5, r3
 800b334:	d11b      	bne.n	800b36e <_vfiprintf_r+0x56>
 800b336:	6875      	ldr	r5, [r6, #4]
 800b338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b33a:	07d9      	lsls	r1, r3, #31
 800b33c:	d405      	bmi.n	800b34a <_vfiprintf_r+0x32>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	059a      	lsls	r2, r3, #22
 800b342:	d402      	bmi.n	800b34a <_vfiprintf_r+0x32>
 800b344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b346:	f7ff ff5d 	bl	800b204 <__retarget_lock_acquire_recursive>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	071b      	lsls	r3, r3, #28
 800b34e:	d501      	bpl.n	800b354 <_vfiprintf_r+0x3c>
 800b350:	692b      	ldr	r3, [r5, #16]
 800b352:	b9eb      	cbnz	r3, 800b390 <_vfiprintf_r+0x78>
 800b354:	4629      	mov	r1, r5
 800b356:	4630      	mov	r0, r6
 800b358:	f000 f96e 	bl	800b638 <__swsetup_r>
 800b35c:	b1c0      	cbz	r0, 800b390 <_vfiprintf_r+0x78>
 800b35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b360:	07dc      	lsls	r4, r3, #31
 800b362:	d50e      	bpl.n	800b382 <_vfiprintf_r+0x6a>
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	b01d      	add	sp, #116	; 0x74
 800b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36e:	4b7b      	ldr	r3, [pc, #492]	; (800b55c <_vfiprintf_r+0x244>)
 800b370:	429d      	cmp	r5, r3
 800b372:	d101      	bne.n	800b378 <_vfiprintf_r+0x60>
 800b374:	68b5      	ldr	r5, [r6, #8]
 800b376:	e7df      	b.n	800b338 <_vfiprintf_r+0x20>
 800b378:	4b79      	ldr	r3, [pc, #484]	; (800b560 <_vfiprintf_r+0x248>)
 800b37a:	429d      	cmp	r5, r3
 800b37c:	bf08      	it	eq
 800b37e:	68f5      	ldreq	r5, [r6, #12]
 800b380:	e7da      	b.n	800b338 <_vfiprintf_r+0x20>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	0598      	lsls	r0, r3, #22
 800b386:	d4ed      	bmi.n	800b364 <_vfiprintf_r+0x4c>
 800b388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b38a:	f7ff ff3c 	bl	800b206 <__retarget_lock_release_recursive>
 800b38e:	e7e9      	b.n	800b364 <_vfiprintf_r+0x4c>
 800b390:	2300      	movs	r3, #0
 800b392:	9309      	str	r3, [sp, #36]	; 0x24
 800b394:	2320      	movs	r3, #32
 800b396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b39a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b39e:	2330      	movs	r3, #48	; 0x30
 800b3a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b564 <_vfiprintf_r+0x24c>
 800b3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3a8:	f04f 0901 	mov.w	r9, #1
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	469a      	mov	sl, r3
 800b3b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3b4:	b10a      	cbz	r2, 800b3ba <_vfiprintf_r+0xa2>
 800b3b6:	2a25      	cmp	r2, #37	; 0x25
 800b3b8:	d1f9      	bne.n	800b3ae <_vfiprintf_r+0x96>
 800b3ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b3be:	d00b      	beq.n	800b3d8 <_vfiprintf_r+0xc0>
 800b3c0:	465b      	mov	r3, fp
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ff93 	bl	800b2f2 <__sfputs_r>
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f000 80aa 	beq.w	800b526 <_vfiprintf_r+0x20e>
 800b3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d4:	445a      	add	r2, fp
 800b3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 80a2 	beq.w	800b526 <_vfiprintf_r+0x20e>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ec:	f10a 0a01 	add.w	sl, sl, #1
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	9307      	str	r3, [sp, #28]
 800b3f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b3fa:	4654      	mov	r4, sl
 800b3fc:	2205      	movs	r2, #5
 800b3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b402:	4858      	ldr	r0, [pc, #352]	; (800b564 <_vfiprintf_r+0x24c>)
 800b404:	f7f4 feec 	bl	80001e0 <memchr>
 800b408:	9a04      	ldr	r2, [sp, #16]
 800b40a:	b9d8      	cbnz	r0, 800b444 <_vfiprintf_r+0x12c>
 800b40c:	06d1      	lsls	r1, r2, #27
 800b40e:	bf44      	itt	mi
 800b410:	2320      	movmi	r3, #32
 800b412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b416:	0713      	lsls	r3, r2, #28
 800b418:	bf44      	itt	mi
 800b41a:	232b      	movmi	r3, #43	; 0x2b
 800b41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b420:	f89a 3000 	ldrb.w	r3, [sl]
 800b424:	2b2a      	cmp	r3, #42	; 0x2a
 800b426:	d015      	beq.n	800b454 <_vfiprintf_r+0x13c>
 800b428:	9a07      	ldr	r2, [sp, #28]
 800b42a:	4654      	mov	r4, sl
 800b42c:	2000      	movs	r0, #0
 800b42e:	f04f 0c0a 	mov.w	ip, #10
 800b432:	4621      	mov	r1, r4
 800b434:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b438:	3b30      	subs	r3, #48	; 0x30
 800b43a:	2b09      	cmp	r3, #9
 800b43c:	d94e      	bls.n	800b4dc <_vfiprintf_r+0x1c4>
 800b43e:	b1b0      	cbz	r0, 800b46e <_vfiprintf_r+0x156>
 800b440:	9207      	str	r2, [sp, #28]
 800b442:	e014      	b.n	800b46e <_vfiprintf_r+0x156>
 800b444:	eba0 0308 	sub.w	r3, r0, r8
 800b448:	fa09 f303 	lsl.w	r3, r9, r3
 800b44c:	4313      	orrs	r3, r2
 800b44e:	9304      	str	r3, [sp, #16]
 800b450:	46a2      	mov	sl, r4
 800b452:	e7d2      	b.n	800b3fa <_vfiprintf_r+0xe2>
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	1d19      	adds	r1, r3, #4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	9103      	str	r1, [sp, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bfbb      	ittet	lt
 800b460:	425b      	neglt	r3, r3
 800b462:	f042 0202 	orrlt.w	r2, r2, #2
 800b466:	9307      	strge	r3, [sp, #28]
 800b468:	9307      	strlt	r3, [sp, #28]
 800b46a:	bfb8      	it	lt
 800b46c:	9204      	strlt	r2, [sp, #16]
 800b46e:	7823      	ldrb	r3, [r4, #0]
 800b470:	2b2e      	cmp	r3, #46	; 0x2e
 800b472:	d10c      	bne.n	800b48e <_vfiprintf_r+0x176>
 800b474:	7863      	ldrb	r3, [r4, #1]
 800b476:	2b2a      	cmp	r3, #42	; 0x2a
 800b478:	d135      	bne.n	800b4e6 <_vfiprintf_r+0x1ce>
 800b47a:	9b03      	ldr	r3, [sp, #12]
 800b47c:	1d1a      	adds	r2, r3, #4
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	9203      	str	r2, [sp, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	bfb8      	it	lt
 800b486:	f04f 33ff 	movlt.w	r3, #4294967295
 800b48a:	3402      	adds	r4, #2
 800b48c:	9305      	str	r3, [sp, #20]
 800b48e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b574 <_vfiprintf_r+0x25c>
 800b492:	7821      	ldrb	r1, [r4, #0]
 800b494:	2203      	movs	r2, #3
 800b496:	4650      	mov	r0, sl
 800b498:	f7f4 fea2 	bl	80001e0 <memchr>
 800b49c:	b140      	cbz	r0, 800b4b0 <_vfiprintf_r+0x198>
 800b49e:	2340      	movs	r3, #64	; 0x40
 800b4a0:	eba0 000a 	sub.w	r0, r0, sl
 800b4a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	4303      	orrs	r3, r0
 800b4ac:	3401      	adds	r4, #1
 800b4ae:	9304      	str	r3, [sp, #16]
 800b4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b4:	482c      	ldr	r0, [pc, #176]	; (800b568 <_vfiprintf_r+0x250>)
 800b4b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ba:	2206      	movs	r2, #6
 800b4bc:	f7f4 fe90 	bl	80001e0 <memchr>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d03f      	beq.n	800b544 <_vfiprintf_r+0x22c>
 800b4c4:	4b29      	ldr	r3, [pc, #164]	; (800b56c <_vfiprintf_r+0x254>)
 800b4c6:	bb1b      	cbnz	r3, 800b510 <_vfiprintf_r+0x1f8>
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	3307      	adds	r3, #7
 800b4cc:	f023 0307 	bic.w	r3, r3, #7
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	9303      	str	r3, [sp, #12]
 800b4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d6:	443b      	add	r3, r7
 800b4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4da:	e767      	b.n	800b3ac <_vfiprintf_r+0x94>
 800b4dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	e7a5      	b.n	800b432 <_vfiprintf_r+0x11a>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	9305      	str	r3, [sp, #20]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	f04f 0c0a 	mov.w	ip, #10
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f8:	3a30      	subs	r2, #48	; 0x30
 800b4fa:	2a09      	cmp	r2, #9
 800b4fc:	d903      	bls.n	800b506 <_vfiprintf_r+0x1ee>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0c5      	beq.n	800b48e <_vfiprintf_r+0x176>
 800b502:	9105      	str	r1, [sp, #20]
 800b504:	e7c3      	b.n	800b48e <_vfiprintf_r+0x176>
 800b506:	fb0c 2101 	mla	r1, ip, r1, r2
 800b50a:	4604      	mov	r4, r0
 800b50c:	2301      	movs	r3, #1
 800b50e:	e7f0      	b.n	800b4f2 <_vfiprintf_r+0x1da>
 800b510:	ab03      	add	r3, sp, #12
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	462a      	mov	r2, r5
 800b516:	4b16      	ldr	r3, [pc, #88]	; (800b570 <_vfiprintf_r+0x258>)
 800b518:	a904      	add	r1, sp, #16
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7fc ff12 	bl	8008344 <_printf_float>
 800b520:	4607      	mov	r7, r0
 800b522:	1c78      	adds	r0, r7, #1
 800b524:	d1d6      	bne.n	800b4d4 <_vfiprintf_r+0x1bc>
 800b526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b528:	07d9      	lsls	r1, r3, #31
 800b52a:	d405      	bmi.n	800b538 <_vfiprintf_r+0x220>
 800b52c:	89ab      	ldrh	r3, [r5, #12]
 800b52e:	059a      	lsls	r2, r3, #22
 800b530:	d402      	bmi.n	800b538 <_vfiprintf_r+0x220>
 800b532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b534:	f7ff fe67 	bl	800b206 <__retarget_lock_release_recursive>
 800b538:	89ab      	ldrh	r3, [r5, #12]
 800b53a:	065b      	lsls	r3, r3, #25
 800b53c:	f53f af12 	bmi.w	800b364 <_vfiprintf_r+0x4c>
 800b540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b542:	e711      	b.n	800b368 <_vfiprintf_r+0x50>
 800b544:	ab03      	add	r3, sp, #12
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	462a      	mov	r2, r5
 800b54a:	4b09      	ldr	r3, [pc, #36]	; (800b570 <_vfiprintf_r+0x258>)
 800b54c:	a904      	add	r1, sp, #16
 800b54e:	4630      	mov	r0, r6
 800b550:	f7fd f99c 	bl	800888c <_printf_i>
 800b554:	e7e4      	b.n	800b520 <_vfiprintf_r+0x208>
 800b556:	bf00      	nop
 800b558:	0800bd24 	.word	0x0800bd24
 800b55c:	0800bd44 	.word	0x0800bd44
 800b560:	0800bd04 	.word	0x0800bd04
 800b564:	0800bc9c 	.word	0x0800bc9c
 800b568:	0800bca6 	.word	0x0800bca6
 800b56c:	08008345 	.word	0x08008345
 800b570:	0800b2f3 	.word	0x0800b2f3
 800b574:	0800bca2 	.word	0x0800bca2

0800b578 <__swbuf_r>:
 800b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57a:	460e      	mov	r6, r1
 800b57c:	4614      	mov	r4, r2
 800b57e:	4605      	mov	r5, r0
 800b580:	b118      	cbz	r0, 800b58a <__swbuf_r+0x12>
 800b582:	6983      	ldr	r3, [r0, #24]
 800b584:	b90b      	cbnz	r3, 800b58a <__swbuf_r+0x12>
 800b586:	f7ff fd8d 	bl	800b0a4 <__sinit>
 800b58a:	4b21      	ldr	r3, [pc, #132]	; (800b610 <__swbuf_r+0x98>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d12b      	bne.n	800b5e8 <__swbuf_r+0x70>
 800b590:	686c      	ldr	r4, [r5, #4]
 800b592:	69a3      	ldr	r3, [r4, #24]
 800b594:	60a3      	str	r3, [r4, #8]
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	071a      	lsls	r2, r3, #28
 800b59a:	d52f      	bpl.n	800b5fc <__swbuf_r+0x84>
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	b36b      	cbz	r3, 800b5fc <__swbuf_r+0x84>
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	6820      	ldr	r0, [r4, #0]
 800b5a4:	1ac0      	subs	r0, r0, r3
 800b5a6:	6963      	ldr	r3, [r4, #20]
 800b5a8:	b2f6      	uxtb	r6, r6
 800b5aa:	4283      	cmp	r3, r0
 800b5ac:	4637      	mov	r7, r6
 800b5ae:	dc04      	bgt.n	800b5ba <__swbuf_r+0x42>
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7ff fce2 	bl	800af7c <_fflush_r>
 800b5b8:	bb30      	cbnz	r0, 800b608 <__swbuf_r+0x90>
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	60a3      	str	r3, [r4, #8]
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	701e      	strb	r6, [r3, #0]
 800b5c8:	6963      	ldr	r3, [r4, #20]
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	4283      	cmp	r3, r0
 800b5ce:	d004      	beq.n	800b5da <__swbuf_r+0x62>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	07db      	lsls	r3, r3, #31
 800b5d4:	d506      	bpl.n	800b5e4 <__swbuf_r+0x6c>
 800b5d6:	2e0a      	cmp	r6, #10
 800b5d8:	d104      	bne.n	800b5e4 <__swbuf_r+0x6c>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f7ff fccd 	bl	800af7c <_fflush_r>
 800b5e2:	b988      	cbnz	r0, 800b608 <__swbuf_r+0x90>
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <__swbuf_r+0x9c>)
 800b5ea:	429c      	cmp	r4, r3
 800b5ec:	d101      	bne.n	800b5f2 <__swbuf_r+0x7a>
 800b5ee:	68ac      	ldr	r4, [r5, #8]
 800b5f0:	e7cf      	b.n	800b592 <__swbuf_r+0x1a>
 800b5f2:	4b09      	ldr	r3, [pc, #36]	; (800b618 <__swbuf_r+0xa0>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	bf08      	it	eq
 800b5f8:	68ec      	ldreq	r4, [r5, #12]
 800b5fa:	e7ca      	b.n	800b592 <__swbuf_r+0x1a>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 f81a 	bl	800b638 <__swsetup_r>
 800b604:	2800      	cmp	r0, #0
 800b606:	d0cb      	beq.n	800b5a0 <__swbuf_r+0x28>
 800b608:	f04f 37ff 	mov.w	r7, #4294967295
 800b60c:	e7ea      	b.n	800b5e4 <__swbuf_r+0x6c>
 800b60e:	bf00      	nop
 800b610:	0800bd24 	.word	0x0800bd24
 800b614:	0800bd44 	.word	0x0800bd44
 800b618:	0800bd04 	.word	0x0800bd04

0800b61c <__ascii_wctomb>:
 800b61c:	b149      	cbz	r1, 800b632 <__ascii_wctomb+0x16>
 800b61e:	2aff      	cmp	r2, #255	; 0xff
 800b620:	bf85      	ittet	hi
 800b622:	238a      	movhi	r3, #138	; 0x8a
 800b624:	6003      	strhi	r3, [r0, #0]
 800b626:	700a      	strbls	r2, [r1, #0]
 800b628:	f04f 30ff 	movhi.w	r0, #4294967295
 800b62c:	bf98      	it	ls
 800b62e:	2001      	movls	r0, #1
 800b630:	4770      	bx	lr
 800b632:	4608      	mov	r0, r1
 800b634:	4770      	bx	lr
	...

0800b638 <__swsetup_r>:
 800b638:	4b32      	ldr	r3, [pc, #200]	; (800b704 <__swsetup_r+0xcc>)
 800b63a:	b570      	push	{r4, r5, r6, lr}
 800b63c:	681d      	ldr	r5, [r3, #0]
 800b63e:	4606      	mov	r6, r0
 800b640:	460c      	mov	r4, r1
 800b642:	b125      	cbz	r5, 800b64e <__swsetup_r+0x16>
 800b644:	69ab      	ldr	r3, [r5, #24]
 800b646:	b913      	cbnz	r3, 800b64e <__swsetup_r+0x16>
 800b648:	4628      	mov	r0, r5
 800b64a:	f7ff fd2b 	bl	800b0a4 <__sinit>
 800b64e:	4b2e      	ldr	r3, [pc, #184]	; (800b708 <__swsetup_r+0xd0>)
 800b650:	429c      	cmp	r4, r3
 800b652:	d10f      	bne.n	800b674 <__swsetup_r+0x3c>
 800b654:	686c      	ldr	r4, [r5, #4]
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b65c:	0719      	lsls	r1, r3, #28
 800b65e:	d42c      	bmi.n	800b6ba <__swsetup_r+0x82>
 800b660:	06dd      	lsls	r5, r3, #27
 800b662:	d411      	bmi.n	800b688 <__swsetup_r+0x50>
 800b664:	2309      	movs	r3, #9
 800b666:	6033      	str	r3, [r6, #0]
 800b668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	e03e      	b.n	800b6f2 <__swsetup_r+0xba>
 800b674:	4b25      	ldr	r3, [pc, #148]	; (800b70c <__swsetup_r+0xd4>)
 800b676:	429c      	cmp	r4, r3
 800b678:	d101      	bne.n	800b67e <__swsetup_r+0x46>
 800b67a:	68ac      	ldr	r4, [r5, #8]
 800b67c:	e7eb      	b.n	800b656 <__swsetup_r+0x1e>
 800b67e:	4b24      	ldr	r3, [pc, #144]	; (800b710 <__swsetup_r+0xd8>)
 800b680:	429c      	cmp	r4, r3
 800b682:	bf08      	it	eq
 800b684:	68ec      	ldreq	r4, [r5, #12]
 800b686:	e7e6      	b.n	800b656 <__swsetup_r+0x1e>
 800b688:	0758      	lsls	r0, r3, #29
 800b68a:	d512      	bpl.n	800b6b2 <__swsetup_r+0x7a>
 800b68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b68e:	b141      	cbz	r1, 800b6a2 <__swsetup_r+0x6a>
 800b690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b694:	4299      	cmp	r1, r3
 800b696:	d002      	beq.n	800b69e <__swsetup_r+0x66>
 800b698:	4630      	mov	r0, r6
 800b69a:	f7fe fd93 	bl	800a1c4 <_free_r>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6063      	str	r3, [r4, #4]
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f043 0308 	orr.w	r3, r3, #8
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	b94b      	cbnz	r3, 800b6d2 <__swsetup_r+0x9a>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6c8:	d003      	beq.n	800b6d2 <__swsetup_r+0x9a>
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 f84d 	bl	800b76c <__smakebuf_r>
 800b6d2:	89a0      	ldrh	r0, [r4, #12]
 800b6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6d8:	f010 0301 	ands.w	r3, r0, #1
 800b6dc:	d00a      	beq.n	800b6f4 <__swsetup_r+0xbc>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	6963      	ldr	r3, [r4, #20]
 800b6e4:	425b      	negs	r3, r3
 800b6e6:	61a3      	str	r3, [r4, #24]
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	b943      	cbnz	r3, 800b6fe <__swsetup_r+0xc6>
 800b6ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6f0:	d1ba      	bne.n	800b668 <__swsetup_r+0x30>
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	0781      	lsls	r1, r0, #30
 800b6f6:	bf58      	it	pl
 800b6f8:	6963      	ldrpl	r3, [r4, #20]
 800b6fa:	60a3      	str	r3, [r4, #8]
 800b6fc:	e7f4      	b.n	800b6e8 <__swsetup_r+0xb0>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e7f7      	b.n	800b6f2 <__swsetup_r+0xba>
 800b702:	bf00      	nop
 800b704:	20000044 	.word	0x20000044
 800b708:	0800bd24 	.word	0x0800bd24
 800b70c:	0800bd44 	.word	0x0800bd44
 800b710:	0800bd04 	.word	0x0800bd04

0800b714 <abort>:
 800b714:	b508      	push	{r3, lr}
 800b716:	2006      	movs	r0, #6
 800b718:	f000 f898 	bl	800b84c <raise>
 800b71c:	2001      	movs	r0, #1
 800b71e:	f7f6 fa2b 	bl	8001b78 <_exit>

0800b722 <__swhatbuf_r>:
 800b722:	b570      	push	{r4, r5, r6, lr}
 800b724:	460e      	mov	r6, r1
 800b726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72a:	2900      	cmp	r1, #0
 800b72c:	b096      	sub	sp, #88	; 0x58
 800b72e:	4614      	mov	r4, r2
 800b730:	461d      	mov	r5, r3
 800b732:	da07      	bge.n	800b744 <__swhatbuf_r+0x22>
 800b734:	2300      	movs	r3, #0
 800b736:	602b      	str	r3, [r5, #0]
 800b738:	89b3      	ldrh	r3, [r6, #12]
 800b73a:	061a      	lsls	r2, r3, #24
 800b73c:	d410      	bmi.n	800b760 <__swhatbuf_r+0x3e>
 800b73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b742:	e00e      	b.n	800b762 <__swhatbuf_r+0x40>
 800b744:	466a      	mov	r2, sp
 800b746:	f000 f89d 	bl	800b884 <_fstat_r>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dbf2      	blt.n	800b734 <__swhatbuf_r+0x12>
 800b74e:	9a01      	ldr	r2, [sp, #4]
 800b750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b758:	425a      	negs	r2, r3
 800b75a:	415a      	adcs	r2, r3
 800b75c:	602a      	str	r2, [r5, #0]
 800b75e:	e7ee      	b.n	800b73e <__swhatbuf_r+0x1c>
 800b760:	2340      	movs	r3, #64	; 0x40
 800b762:	2000      	movs	r0, #0
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	b016      	add	sp, #88	; 0x58
 800b768:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b76c <__smakebuf_r>:
 800b76c:	898b      	ldrh	r3, [r1, #12]
 800b76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b770:	079d      	lsls	r5, r3, #30
 800b772:	4606      	mov	r6, r0
 800b774:	460c      	mov	r4, r1
 800b776:	d507      	bpl.n	800b788 <__smakebuf_r+0x1c>
 800b778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	6123      	str	r3, [r4, #16]
 800b780:	2301      	movs	r3, #1
 800b782:	6163      	str	r3, [r4, #20]
 800b784:	b002      	add	sp, #8
 800b786:	bd70      	pop	{r4, r5, r6, pc}
 800b788:	ab01      	add	r3, sp, #4
 800b78a:	466a      	mov	r2, sp
 800b78c:	f7ff ffc9 	bl	800b722 <__swhatbuf_r>
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	4605      	mov	r5, r0
 800b794:	4630      	mov	r0, r6
 800b796:	f7fe fd65 	bl	800a264 <_malloc_r>
 800b79a:	b948      	cbnz	r0, 800b7b0 <__smakebuf_r+0x44>
 800b79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a0:	059a      	lsls	r2, r3, #22
 800b7a2:	d4ef      	bmi.n	800b784 <__smakebuf_r+0x18>
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	f043 0302 	orr.w	r3, r3, #2
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	e7e3      	b.n	800b778 <__smakebuf_r+0xc>
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <__smakebuf_r+0x7c>)
 800b7b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	6020      	str	r0, [r4, #0]
 800b7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	9b00      	ldr	r3, [sp, #0]
 800b7c0:	6163      	str	r3, [r4, #20]
 800b7c2:	9b01      	ldr	r3, [sp, #4]
 800b7c4:	6120      	str	r0, [r4, #16]
 800b7c6:	b15b      	cbz	r3, 800b7e0 <__smakebuf_r+0x74>
 800b7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 f86b 	bl	800b8a8 <_isatty_r>
 800b7d2:	b128      	cbz	r0, 800b7e0 <__smakebuf_r+0x74>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f023 0303 	bic.w	r3, r3, #3
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	89a0      	ldrh	r0, [r4, #12]
 800b7e2:	4305      	orrs	r5, r0
 800b7e4:	81a5      	strh	r5, [r4, #12]
 800b7e6:	e7cd      	b.n	800b784 <__smakebuf_r+0x18>
 800b7e8:	0800b03d 	.word	0x0800b03d

0800b7ec <_malloc_usable_size_r>:
 800b7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f0:	1f18      	subs	r0, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	bfbc      	itt	lt
 800b7f6:	580b      	ldrlt	r3, [r1, r0]
 800b7f8:	18c0      	addlt	r0, r0, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_raise_r>:
 800b7fc:	291f      	cmp	r1, #31
 800b7fe:	b538      	push	{r3, r4, r5, lr}
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	d904      	bls.n	800b810 <_raise_r+0x14>
 800b806:	2316      	movs	r3, #22
 800b808:	6003      	str	r3, [r0, #0]
 800b80a:	f04f 30ff 	mov.w	r0, #4294967295
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b812:	b112      	cbz	r2, 800b81a <_raise_r+0x1e>
 800b814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b818:	b94b      	cbnz	r3, 800b82e <_raise_r+0x32>
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f830 	bl	800b880 <_getpid_r>
 800b820:	462a      	mov	r2, r5
 800b822:	4601      	mov	r1, r0
 800b824:	4620      	mov	r0, r4
 800b826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b82a:	f000 b817 	b.w	800b85c <_kill_r>
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d00a      	beq.n	800b848 <_raise_r+0x4c>
 800b832:	1c59      	adds	r1, r3, #1
 800b834:	d103      	bne.n	800b83e <_raise_r+0x42>
 800b836:	2316      	movs	r3, #22
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	2001      	movs	r0, #1
 800b83c:	e7e7      	b.n	800b80e <_raise_r+0x12>
 800b83e:	2400      	movs	r4, #0
 800b840:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b844:	4628      	mov	r0, r5
 800b846:	4798      	blx	r3
 800b848:	2000      	movs	r0, #0
 800b84a:	e7e0      	b.n	800b80e <_raise_r+0x12>

0800b84c <raise>:
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <raise+0xc>)
 800b84e:	4601      	mov	r1, r0
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	f7ff bfd3 	b.w	800b7fc <_raise_r>
 800b856:	bf00      	nop
 800b858:	20000044 	.word	0x20000044

0800b85c <_kill_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d07      	ldr	r5, [pc, #28]	; (800b87c <_kill_r+0x20>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	4611      	mov	r1, r2
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	f7f6 f975 	bl	8001b58 <_kill>
 800b86e:	1c43      	adds	r3, r0, #1
 800b870:	d102      	bne.n	800b878 <_kill_r+0x1c>
 800b872:	682b      	ldr	r3, [r5, #0]
 800b874:	b103      	cbz	r3, 800b878 <_kill_r+0x1c>
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	bd38      	pop	{r3, r4, r5, pc}
 800b87a:	bf00      	nop
 800b87c:	2000044c 	.word	0x2000044c

0800b880 <_getpid_r>:
 800b880:	f7f6 b962 	b.w	8001b48 <_getpid>

0800b884 <_fstat_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	; (800b8a4 <_fstat_r+0x20>)
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	4608      	mov	r0, r1
 800b88e:	4611      	mov	r1, r2
 800b890:	602b      	str	r3, [r5, #0]
 800b892:	f7f6 f9c0 	bl	8001c16 <_fstat>
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	d102      	bne.n	800b8a0 <_fstat_r+0x1c>
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	b103      	cbz	r3, 800b8a0 <_fstat_r+0x1c>
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	bd38      	pop	{r3, r4, r5, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2000044c 	.word	0x2000044c

0800b8a8 <_isatty_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d06      	ldr	r5, [pc, #24]	; (800b8c4 <_isatty_r+0x1c>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	602b      	str	r3, [r5, #0]
 800b8b4:	f7f6 f9bf 	bl	8001c36 <_isatty>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	d102      	bne.n	800b8c2 <_isatty_r+0x1a>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b103      	cbz	r3, 800b8c2 <_isatty_r+0x1a>
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	2000044c 	.word	0x2000044c

0800b8c8 <_init>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr

0800b8d4 <_fini>:
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d6:	bf00      	nop
 800b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8da:	bc08      	pop	{r3}
 800b8dc:	469e      	mov	lr, r3
 800b8de:	4770      	bx	lr
